//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace tambak
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using tambak.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace tambak.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using tambak.Web.Resources;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AuthenticationService' DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("tambak-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'AverageDailyFeedSummary' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class AverageDailyFeedSummary : Entity
    {
        
        private Nullable<float> _average;
        
        private int _productionCycleID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAverageChanging(Nullable<float> value);
        partial void OnAverageChanged();
        partial void OnProductionCycleIDChanging(int value);
        partial void OnProductionCycleIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AverageDailyFeedSummary"/> class.
        /// </summary>
        public AverageDailyFeedSummary()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Average' value.
        /// </summary>
        [DataMember()]
        public Nullable<float> Average
        {
            get
            {
                return this._average;
            }
            set
            {
                if ((this._average != value))
                {
                    this.OnAverageChanging(value);
                    this.RaiseDataMemberChanging("Average");
                    this.ValidateProperty("Average", value);
                    this._average = value;
                    this.RaiseDataMemberChanged("Average");
                    this.OnAverageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductionCycleID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductionCycleID
        {
            get
            {
                return this._productionCycleID;
            }
            set
            {
                if ((this._productionCycleID != value))
                {
                    this.OnProductionCycleIDChanging(value);
                    this.ValidateProperty("ProductionCycleID", value);
                    this._productionCycleID = value;
                    this.RaisePropertyChanged("ProductionCycleID");
                    this.OnProductionCycleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productionCycleID;
        }
    }
    
    /// <summary>
    /// The 'BatchConsumptionJoin' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class BatchConsumptionJoin : Entity
    {
        
        private int _batchConsumptionJoinID;
        
        private int _batchDetailID;
        
        private int _consumptionLogID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBatchConsumptionJoinIDChanging(int value);
        partial void OnBatchConsumptionJoinIDChanged();
        partial void OnBatchDetailIDChanging(int value);
        partial void OnBatchDetailIDChanged();
        partial void OnConsumptionLogIDChanging(int value);
        partial void OnConsumptionLogIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchConsumptionJoin"/> class.
        /// </summary>
        public BatchConsumptionJoin()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BatchConsumptionJoinID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int BatchConsumptionJoinID
        {
            get
            {
                return this._batchConsumptionJoinID;
            }
            set
            {
                if ((this._batchConsumptionJoinID != value))
                {
                    this.OnBatchConsumptionJoinIDChanging(value);
                    this.ValidateProperty("BatchConsumptionJoinID", value);
                    this._batchConsumptionJoinID = value;
                    this.RaisePropertyChanged("BatchConsumptionJoinID");
                    this.OnBatchConsumptionJoinIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BatchDetailID' value.
        /// </summary>
        [DataMember()]
        public int BatchDetailID
        {
            get
            {
                return this._batchDetailID;
            }
            set
            {
                if ((this._batchDetailID != value))
                {
                    this.OnBatchDetailIDChanging(value);
                    this.RaiseDataMemberChanging("BatchDetailID");
                    this.ValidateProperty("BatchDetailID", value);
                    this._batchDetailID = value;
                    this.RaiseDataMemberChanged("BatchDetailID");
                    this.OnBatchDetailIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConsumptionLogID' value.
        /// </summary>
        [DataMember()]
        public int ConsumptionLogID
        {
            get
            {
                return this._consumptionLogID;
            }
            set
            {
                if ((this._consumptionLogID != value))
                {
                    this.OnConsumptionLogIDChanging(value);
                    this.RaiseDataMemberChanging("ConsumptionLogID");
                    this.ValidateProperty("ConsumptionLogID", value);
                    this._consumptionLogID = value;
                    this.RaiseDataMemberChanged("ConsumptionLogID");
                    this.OnConsumptionLogIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._batchConsumptionJoinID;
        }
    }
    
    /// <summary>
    /// The 'BatchDetail' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class BatchDetail : Entity
    {
        
        private int _batchHeaderID;
        
        private int _batchTrxID;
        
        private double _buyPrice;
        
        private bool _isVoid;
        
        private int _productID;
        
        private Nullable<int> _productionCycleID;
        
        private double _quantity;
        
        private Nullable<int> _salesOrderDetailID;
        
        private Nullable<double> _soldPrice;
        
        private Nullable<DateTime> _trxDate;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnbatchHeaderIDChanging(int value);
        partial void OnbatchHeaderIDChanged();
        partial void OnBatchTrxIDChanging(int value);
        partial void OnBatchTrxIDChanged();
        partial void OnBuyPriceChanging(double value);
        partial void OnBuyPriceChanged();
        partial void OnisVoidChanging(bool value);
        partial void OnisVoidChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductionCycleIDChanging(Nullable<int> value);
        partial void OnProductionCycleIDChanged();
        partial void OnQuantityChanging(double value);
        partial void OnQuantityChanged();
        partial void OnSalesOrderDetailIDChanging(Nullable<int> value);
        partial void OnSalesOrderDetailIDChanged();
        partial void OnsoldPriceChanging(Nullable<double> value);
        partial void OnsoldPriceChanged();
        partial void OnTrxDateChanging(Nullable<DateTime> value);
        partial void OnTrxDateChanged();
        partial void OnuserNameChanging(string value);
        partial void OnuserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchDetail"/> class.
        /// </summary>
        public BatchDetail()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'batchHeaderID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int batchHeaderID
        {
            get
            {
                return this._batchHeaderID;
            }
            set
            {
                if ((this._batchHeaderID != value))
                {
                    this.OnbatchHeaderIDChanging(value);
                    this.RaiseDataMemberChanging("batchHeaderID");
                    this.ValidateProperty("batchHeaderID", value);
                    this._batchHeaderID = value;
                    this.RaiseDataMemberChanged("batchHeaderID");
                    this.OnbatchHeaderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BatchTrxID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int BatchTrxID
        {
            get
            {
                return this._batchTrxID;
            }
            set
            {
                if ((this._batchTrxID != value))
                {
                    this.OnBatchTrxIDChanging(value);
                    this.ValidateProperty("BatchTrxID", value);
                    this._batchTrxID = value;
                    this.RaisePropertyChanged("BatchTrxID");
                    this.OnBatchTrxIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BuyPrice' value.
        /// </summary>
        [DataMember()]
        public double BuyPrice
        {
            get
            {
                return this._buyPrice;
            }
            set
            {
                if ((this._buyPrice != value))
                {
                    this.OnBuyPriceChanging(value);
                    this.RaiseDataMemberChanging("BuyPrice");
                    this.ValidateProperty("BuyPrice", value);
                    this._buyPrice = value;
                    this.RaiseDataMemberChanged("BuyPrice");
                    this.OnBuyPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isVoid' value.
        /// </summary>
        [DataMember()]
        public bool isVoid
        {
            get
            {
                return this._isVoid;
            }
            set
            {
                if ((this._isVoid != value))
                {
                    this.OnisVoidChanging(value);
                    this.RaiseDataMemberChanging("isVoid");
                    this.ValidateProperty("isVoid", value);
                    this._isVoid = value;
                    this.RaiseDataMemberChanged("isVoid");
                    this.OnisVoidChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.RaiseDataMemberChanging("ProductID");
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaiseDataMemberChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductionCycleID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ProductionCycleID
        {
            get
            {
                return this._productionCycleID;
            }
            set
            {
                if ((this._productionCycleID != value))
                {
                    this.OnProductionCycleIDChanging(value);
                    this.RaiseDataMemberChanging("ProductionCycleID");
                    this.ValidateProperty("ProductionCycleID", value);
                    this._productionCycleID = value;
                    this.RaiseDataMemberChanged("ProductionCycleID");
                    this.OnProductionCycleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Quantity' value.
        /// </summary>
        [DataMember()]
        public double Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    this.OnQuantityChanging(value);
                    this.RaiseDataMemberChanging("Quantity");
                    this.ValidateProperty("Quantity", value);
                    this._quantity = value;
                    this.RaiseDataMemberChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesOrderDetailID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> SalesOrderDetailID
        {
            get
            {
                return this._salesOrderDetailID;
            }
            set
            {
                if ((this._salesOrderDetailID != value))
                {
                    this.OnSalesOrderDetailIDChanging(value);
                    this.RaiseDataMemberChanging("SalesOrderDetailID");
                    this.ValidateProperty("SalesOrderDetailID", value);
                    this._salesOrderDetailID = value;
                    this.RaiseDataMemberChanged("SalesOrderDetailID");
                    this.OnSalesOrderDetailIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'soldPrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> soldPrice
        {
            get
            {
                return this._soldPrice;
            }
            set
            {
                if ((this._soldPrice != value))
                {
                    this.OnsoldPriceChanging(value);
                    this.RaiseDataMemberChanging("soldPrice");
                    this.ValidateProperty("soldPrice", value);
                    this._soldPrice = value;
                    this.RaiseDataMemberChanged("soldPrice");
                    this.OnsoldPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TrxDate' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public Nullable<DateTime> TrxDate
        {
            get
            {
                return this._trxDate;
            }
            set
            {
                if ((this._trxDate != value))
                {
                    this.OnTrxDateChanging(value);
                    this.RaiseDataMemberChanging("TrxDate");
                    this.ValidateProperty("TrxDate", value);
                    this._trxDate = value;
                    this.RaiseDataMemberChanged("TrxDate");
                    this.OnTrxDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'userName' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string userName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnuserNameChanging(value);
                    this.RaiseDataMemberChanging("userName");
                    this.ValidateProperty("userName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("userName");
                    this.OnuserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._batchTrxID;
        }
    }
    
    /// <summary>
    /// The 'BatchHeader' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class BatchHeader : Entity
    {
        
        private Nullable<DateTime> _batchDate;
        
        private int _batchID;
        
        private string _deliveryLogID;
        
        private Nullable<DateTime> _expireDate;
        
        private Nullable<int> _facilitiesID;
        
        private string _location;
        
        private Nullable<int> _poDetailID;
        
        private int _productID;
        
        private double _unitCost;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBatchDateChanging(Nullable<DateTime> value);
        partial void OnBatchDateChanged();
        partial void OnBatchIDChanging(int value);
        partial void OnBatchIDChanged();
        partial void OnDeliveryLogIDChanging(string value);
        partial void OnDeliveryLogIDChanged();
        partial void OnExpireDateChanging(Nullable<DateTime> value);
        partial void OnExpireDateChanged();
        partial void OnFacilitiesIDChanging(Nullable<int> value);
        partial void OnFacilitiesIDChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnPODetailIDChanging(Nullable<int> value);
        partial void OnPODetailIDChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnunitCostChanging(double value);
        partial void OnunitCostChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchHeader"/> class.
        /// </summary>
        public BatchHeader()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BatchDate' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public Nullable<DateTime> BatchDate
        {
            get
            {
                return this._batchDate;
            }
            set
            {
                if ((this._batchDate != value))
                {
                    this.OnBatchDateChanging(value);
                    this.RaiseDataMemberChanging("BatchDate");
                    this.ValidateProperty("BatchDate", value);
                    this._batchDate = value;
                    this.RaiseDataMemberChanged("BatchDate");
                    this.OnBatchDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BatchID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int BatchID
        {
            get
            {
                return this._batchID;
            }
            set
            {
                if ((this._batchID != value))
                {
                    this.OnBatchIDChanging(value);
                    this.ValidateProperty("BatchID", value);
                    this._batchID = value;
                    this.RaisePropertyChanged("BatchID");
                    this.OnBatchIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeliveryLogID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string DeliveryLogID
        {
            get
            {
                return this._deliveryLogID;
            }
            set
            {
                if ((this._deliveryLogID != value))
                {
                    this.OnDeliveryLogIDChanging(value);
                    this.RaiseDataMemberChanging("DeliveryLogID");
                    this.ValidateProperty("DeliveryLogID", value);
                    this._deliveryLogID = value;
                    this.RaiseDataMemberChanged("DeliveryLogID");
                    this.OnDeliveryLogIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExpireDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ExpireDate
        {
            get
            {
                return this._expireDate;
            }
            set
            {
                if ((this._expireDate != value))
                {
                    this.OnExpireDateChanging(value);
                    this.RaiseDataMemberChanging("ExpireDate");
                    this.ValidateProperty("ExpireDate", value);
                    this._expireDate = value;
                    this.RaiseDataMemberChanged("ExpireDate");
                    this.OnExpireDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FacilitiesID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> FacilitiesID
        {
            get
            {
                return this._facilitiesID;
            }
            set
            {
                if ((this._facilitiesID != value))
                {
                    this.OnFacilitiesIDChanging(value);
                    this.RaiseDataMemberChanging("FacilitiesID");
                    this.ValidateProperty("FacilitiesID", value);
                    this._facilitiesID = value;
                    this.RaiseDataMemberChanged("FacilitiesID");
                    this.OnFacilitiesIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Location' value.
        /// </summary>
        [DataMember()]
        [StringLength(512)]
        public string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    this.OnLocationChanging(value);
                    this.RaiseDataMemberChanging("Location");
                    this.ValidateProperty("Location", value);
                    this._location = value;
                    this.RaiseDataMemberChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PODetailID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> PODetailID
        {
            get
            {
                return this._poDetailID;
            }
            set
            {
                if ((this._poDetailID != value))
                {
                    this.OnPODetailIDChanging(value);
                    this.RaiseDataMemberChanging("PODetailID");
                    this.ValidateProperty("PODetailID", value);
                    this._poDetailID = value;
                    this.RaiseDataMemberChanged("PODetailID");
                    this.OnPODetailIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.RaiseDataMemberChanging("ProductID");
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaiseDataMemberChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'unitCost' value.
        /// </summary>
        [DataMember()]
        public double unitCost
        {
            get
            {
                return this._unitCost;
            }
            set
            {
                if ((this._unitCost != value))
                {
                    this.OnunitCostChanging(value);
                    this.RaiseDataMemberChanging("unitCost");
                    this.ValidateProperty("unitCost", value);
                    this._unitCost = value;
                    this.RaiseDataMemberChanged("unitCost");
                    this.OnunitCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._batchID;
        }
    }
    
    /// <summary>
    /// The 'batchQuantityView' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class batchQuantityView : Entity
    {
        
        private Nullable<DateTime> _batchDate;
        
        private int _batchID;
        
        private int _productID;
        
        private Nullable<double> _unit_Available;
        
        private double _unitCost;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBatchDateChanging(Nullable<DateTime> value);
        partial void OnBatchDateChanged();
        partial void OnBatchIDChanging(int value);
        partial void OnBatchIDChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnUnit_AvailableChanging(Nullable<double> value);
        partial void OnUnit_AvailableChanged();
        partial void OnunitCostChanging(double value);
        partial void OnunitCostChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="batchQuantityView"/> class.
        /// </summary>
        public batchQuantityView()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BatchDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> BatchDate
        {
            get
            {
                return this._batchDate;
            }
            set
            {
                if ((this._batchDate != value))
                {
                    this.OnBatchDateChanging(value);
                    this.RaiseDataMemberChanging("BatchDate");
                    this.ValidateProperty("BatchDate", value);
                    this._batchDate = value;
                    this.RaiseDataMemberChanged("BatchDate");
                    this.OnBatchDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BatchID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int BatchID
        {
            get
            {
                return this._batchID;
            }
            set
            {
                if ((this._batchID != value))
                {
                    this.OnBatchIDChanging(value);
                    this.ValidateProperty("BatchID", value);
                    this._batchID = value;
                    this.RaisePropertyChanged("BatchID");
                    this.OnBatchIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaisePropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Unit_Available' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Unit_Available
        {
            get
            {
                return this._unit_Available;
            }
            set
            {
                if ((this._unit_Available != value))
                {
                    this.OnUnit_AvailableChanging(value);
                    this.RaiseDataMemberChanging("Unit_Available");
                    this.ValidateProperty("Unit_Available", value);
                    this._unit_Available = value;
                    this.RaiseDataMemberChanged("Unit_Available");
                    this.OnUnit_AvailableChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'unitCost' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public double unitCost
        {
            get
            {
                return this._unitCost;
            }
            set
            {
                if ((this._unitCost != value))
                {
                    this.OnunitCostChanging(value);
                    this.ValidateProperty("unitCost", value);
                    this._unitCost = value;
                    this.RaisePropertyChanged("unitCost");
                    this.OnunitCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._batchID, this._productID, this._unitCost);
        }
    }
    
    /// <summary>
    /// The 'Category' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class Category : Entity
    {
        
        private int _categoryId;
        
        private string _categoryName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Category"/> class.
        /// </summary>
        public Category()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CategoryId
        {
            get
            {
                return this._categoryId;
            }
            set
            {
                if ((this._categoryId != value))
                {
                    this.OnCategoryIdChanging(value);
                    this.ValidateProperty("CategoryId", value);
                    this._categoryId = value;
                    this.RaisePropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(512)]
        public string CategoryName
        {
            get
            {
                return this._categoryName;
            }
            set
            {
                if ((this._categoryName != value))
                {
                    this.OnCategoryNameChanging(value);
                    this.RaiseDataMemberChanging("CategoryName");
                    this.ValidateProperty("CategoryName", value);
                    this._categoryName = value;
                    this.RaiseDataMemberChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._categoryId;
        }
    }
    
    /// <summary>
    /// The 'Company' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class Company : Entity
    {
        
        private string _address;
        
        private string _address2;
        
        private string _city;
        
        private int _companyID;
        
        private string _companyName;
        
        private string _contactPerson;
        
        private string _country;
        
        private string _email;
        
        private string _entryDate;
        
        private string _phoneNumber;
        
        private string _userID;
        
        private string _zipCode;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnAddress2Changing(string value);
        partial void OnAddress2Changed();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyIDChanging(int value);
        partial void OnCompanyIDChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnContactPersonChanging(string value);
        partial void OnContactPersonChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnEntryDateChanging(string value);
        partial void OnEntryDateChanged();
        partial void OnPhoneNumberChanging(string value);
        partial void OnPhoneNumberChanged();
        partial void OnUserIDChanging(string value);
        partial void OnUserIDChanged();
        partial void OnZipCodeChanging(string value);
        partial void OnZipCodeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Company"/> class.
        /// </summary>
        public Company()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address2' value.
        /// </summary>
        [DataMember()]
        public string Address2
        {
            get
            {
                return this._address2;
            }
            set
            {
                if ((this._address2 != value))
                {
                    this.OnAddress2Changing(value);
                    this.RaiseDataMemberChanging("Address2");
                    this.ValidateProperty("Address2", value);
                    this._address2 = value;
                    this.RaiseDataMemberChanged("Address2");
                    this.OnAddress2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaisePropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string CompanyName
        {
            get
            {
                return this._companyName;
            }
            set
            {
                if ((this._companyName != value))
                {
                    this.OnCompanyNameChanging(value);
                    this.RaiseDataMemberChanging("CompanyName");
                    this.ValidateProperty("CompanyName", value);
                    this._companyName = value;
                    this.RaiseDataMemberChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactPerson' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(512)]
        public string ContactPerson
        {
            get
            {
                return this._contactPerson;
            }
            set
            {
                if ((this._contactPerson != value))
                {
                    this.OnContactPersonChanging(value);
                    this.RaiseDataMemberChanging("ContactPerson");
                    this.ValidateProperty("ContactPerson", value);
                    this._contactPerson = value;
                    this.RaiseDataMemberChanged("ContactPerson");
                    this.OnContactPersonChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EntryDate' value.
        /// </summary>
        [DataMember()]
        public string EntryDate
        {
            get
            {
                return this._entryDate;
            }
            set
            {
                if ((this._entryDate != value))
                {
                    this.OnEntryDateChanging(value);
                    this.RaiseDataMemberChanging("EntryDate");
                    this.ValidateProperty("EntryDate", value);
                    this._entryDate = value;
                    this.RaiseDataMemberChanged("EntryDate");
                    this.OnEntryDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNumber' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string PhoneNumber
        {
            get
            {
                return this._phoneNumber;
            }
            set
            {
                if ((this._phoneNumber != value))
                {
                    this.OnPhoneNumberChanging(value);
                    this.RaiseDataMemberChanging("PhoneNumber");
                    this.ValidateProperty("PhoneNumber", value);
                    this._phoneNumber = value;
                    this.RaiseDataMemberChanged("PhoneNumber");
                    this.OnPhoneNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        public string UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ZipCode' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string ZipCode
        {
            get
            {
                return this._zipCode;
            }
            set
            {
                if ((this._zipCode != value))
                {
                    this.OnZipCodeChanging(value);
                    this.RaiseDataMemberChanging("ZipCode");
                    this.ValidateProperty("ZipCode", value);
                    this._zipCode = value;
                    this.RaiseDataMemberChanged("ZipCode");
                    this.OnZipCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._companyID;
        }
    }
    
    /// <summary>
    /// The 'Contact' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class Contact : Entity
    {
        
        private string _address;
        
        private Nullable<bool> _archive;
        
        private string _businessPhone;
        
        private string _city;
        
        private string _company;
        
        private int _contactID;
        
        private string _country;
        
        private string _email;
        
        private string _fax;
        
        private string _firstName;
        
        private string _homePhone;
        
        private Nullable<bool> _isActive;
        
        private string _jobTitle;
        
        private string _lastName;
        
        private string _mobilePhone;
        
        private string _notes;
        
        private string _state;
        
        private string _webPage;
        
        private string _zip;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnaddressChanging(string value);
        partial void OnaddressChanged();
        partial void OnarchiveChanging(Nullable<bool> value);
        partial void OnarchiveChanged();
        partial void OnBusinessPhoneChanging(string value);
        partial void OnBusinessPhoneChanged();
        partial void OncityChanging(string value);
        partial void OncityChanged();
        partial void OnCompanyChanging(string value);
        partial void OnCompanyChanged();
        partial void OnContactIDChanging(int value);
        partial void OnContactIDChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnemailChanging(string value);
        partial void OnemailChanged();
        partial void OnfaxChanging(string value);
        partial void OnfaxChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnhomePhoneChanging(string value);
        partial void OnhomePhoneChanged();
        partial void OnisActiveChanging(Nullable<bool> value);
        partial void OnisActiveChanged();
        partial void OnjobTitleChanging(string value);
        partial void OnjobTitleChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnMobilePhoneChanging(string value);
        partial void OnMobilePhoneChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnWebPageChanging(string value);
        partial void OnWebPageChanged();
        partial void OnzipChanging(string value);
        partial void OnzipChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact"/> class.
        /// </summary>
        public Contact()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'address' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnaddressChanging(value);
                    this.RaiseDataMemberChanging("address");
                    this.ValidateProperty("address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("address");
                    this.OnaddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'archive' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> archive
        {
            get
            {
                return this._archive;
            }
            set
            {
                if ((this._archive != value))
                {
                    this.OnarchiveChanging(value);
                    this.RaiseDataMemberChanging("archive");
                    this.ValidateProperty("archive", value);
                    this._archive = value;
                    this.RaiseDataMemberChanged("archive");
                    this.OnarchiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BusinessPhone' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string BusinessPhone
        {
            get
            {
                return this._businessPhone;
            }
            set
            {
                if ((this._businessPhone != value))
                {
                    this.OnBusinessPhoneChanging(value);
                    this.RaiseDataMemberChanging("BusinessPhone");
                    this.ValidateProperty("BusinessPhone", value);
                    this._businessPhone = value;
                    this.RaiseDataMemberChanged("BusinessPhone");
                    this.OnBusinessPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'city' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string city
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OncityChanging(value);
                    this.RaiseDataMemberChanging("city");
                    this.ValidateProperty("city", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("city");
                    this.OncityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Company' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Company
        {
            get
            {
                return this._company;
            }
            set
            {
                if ((this._company != value))
                {
                    this.OnCompanyChanging(value);
                    this.RaiseDataMemberChanging("Company");
                    this.ValidateProperty("Company", value);
                    this._company = value;
                    this.RaiseDataMemberChanged("Company");
                    this.OnCompanyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ContactID
        {
            get
            {
                return this._contactID;
            }
            set
            {
                if ((this._contactID != value))
                {
                    this.OnContactIDChanging(value);
                    this.ValidateProperty("ContactID", value);
                    this._contactID = value;
                    this.RaisePropertyChanged("ContactID");
                    this.OnContactIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'email' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnemailChanging(value);
                    this.RaiseDataMemberChanging("email");
                    this.ValidateProperty("email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("email");
                    this.OnemailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'fax' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string fax
        {
            get
            {
                return this._fax;
            }
            set
            {
                if ((this._fax != value))
                {
                    this.OnfaxChanging(value);
                    this.RaiseDataMemberChanging("fax");
                    this.ValidateProperty("fax", value);
                    this._fax = value;
                    this.RaiseDataMemberChanged("fax");
                    this.OnfaxChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'homePhone' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string homePhone
        {
            get
            {
                return this._homePhone;
            }
            set
            {
                if ((this._homePhone != value))
                {
                    this.OnhomePhoneChanging(value);
                    this.RaiseDataMemberChanging("homePhone");
                    this.ValidateProperty("homePhone", value);
                    this._homePhone = value;
                    this.RaiseDataMemberChanged("homePhone");
                    this.OnhomePhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isActive' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> isActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnisActiveChanging(value);
                    this.RaiseDataMemberChanging("isActive");
                    this.ValidateProperty("isActive", value);
                    this._isActive = value;
                    this.RaiseDataMemberChanged("isActive");
                    this.OnisActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'jobTitle' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string jobTitle
        {
            get
            {
                return this._jobTitle;
            }
            set
            {
                if ((this._jobTitle != value))
                {
                    this.OnjobTitleChanging(value);
                    this.RaiseDataMemberChanging("jobTitle");
                    this.ValidateProperty("jobTitle", value);
                    this._jobTitle = value;
                    this.RaiseDataMemberChanged("jobTitle");
                    this.OnjobTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MobilePhone' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string MobilePhone
        {
            get
            {
                return this._mobilePhone;
            }
            set
            {
                if ((this._mobilePhone != value))
                {
                    this.OnMobilePhoneChanging(value);
                    this.RaiseDataMemberChanging("MobilePhone");
                    this.ValidateProperty("MobilePhone", value);
                    this._mobilePhone = value;
                    this.RaiseDataMemberChanged("MobilePhone");
                    this.OnMobilePhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WebPage' value.
        /// </summary>
        [DataMember()]
        public string WebPage
        {
            get
            {
                return this._webPage;
            }
            set
            {
                if ((this._webPage != value))
                {
                    this.OnWebPageChanging(value);
                    this.RaiseDataMemberChanging("WebPage");
                    this.ValidateProperty("WebPage", value);
                    this._webPage = value;
                    this.RaiseDataMemberChanged("WebPage");
                    this.OnWebPageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'zip' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string zip
        {
            get
            {
                return this._zip;
            }
            set
            {
                if ((this._zip != value))
                {
                    this.OnzipChanging(value);
                    this.RaiseDataMemberChanging("zip");
                    this.ValidateProperty("zip", value);
                    this._zip = value;
                    this.RaiseDataMemberChanged("zip");
                    this.OnzipChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._contactID;
        }
    }
    
    /// <summary>
    /// The 'ContactToUserLink' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class ContactToUserLink : Entity
    {
        
        private int _contactID;
        
        private string _username;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnContactIDChanging(int value);
        partial void OnContactIDChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactToUserLink"/> class.
        /// </summary>
        public ContactToUserLink()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ContactID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int ContactID
        {
            get
            {
                return this._contactID;
            }
            set
            {
                if ((this._contactID != value))
                {
                    this.OnContactIDChanging(value);
                    this.RaiseDataMemberChanging("ContactID");
                    this.ValidateProperty("ContactID", value);
                    this._contactID = value;
                    this.RaiseDataMemberChanged("ContactID");
                    this.OnContactIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Username' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(255)]
        public string Username
        {
            get
            {
                return this._username;
            }
            set
            {
                if ((this._username != value))
                {
                    this.OnUsernameChanging(value);
                    this.RaiseDataMemberChanging("Username");
                    this.ValidateProperty("Username", value);
                    this._username = value;
                    this.RaiseDataMemberChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._username == null))
            {
                return null;
            }
            return EntityKey.Create(this._contactID, this._username);
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The 'CumulativeFeedView' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class CumulativeFeedView : Entity
    {
        
        private Nullable<double> _cumulative_Feed;
        
        private int _productionCycleID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCumulative_FeedChanging(Nullable<double> value);
        partial void OnCumulative_FeedChanged();
        partial void OnProductionCycleIDChanging(int value);
        partial void OnProductionCycleIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CumulativeFeedView"/> class.
        /// </summary>
        public CumulativeFeedView()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Cumulative_Feed' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Cumulative_Feed
        {
            get
            {
                return this._cumulative_Feed;
            }
            set
            {
                if ((this._cumulative_Feed != value))
                {
                    this.OnCumulative_FeedChanging(value);
                    this.RaiseDataMemberChanging("Cumulative_Feed");
                    this.ValidateProperty("Cumulative_Feed", value);
                    this._cumulative_Feed = value;
                    this.RaiseDataMemberChanged("Cumulative_Feed");
                    this.OnCumulative_FeedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductionCycleID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductionCycleID
        {
            get
            {
                return this._productionCycleID;
            }
            set
            {
                if ((this._productionCycleID != value))
                {
                    this.OnProductionCycleIDChanging(value);
                    this.ValidateProperty("ProductionCycleID", value);
                    this._productionCycleID = value;
                    this.RaisePropertyChanged("ProductionCycleID");
                    this.OnProductionCycleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productionCycleID;
        }
    }
    
    /// <summary>
    /// The 'CurrencyRate' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class CurrencyRate : Entity
    {
        
        private int _currencyRateID;
        
        private string _currencyShortCode;
        
        private Nullable<double> _middleRate;
        
        private Nullable<double> _purchaseRate;
        
        private Nullable<double> _sellRate;
        
        private Nullable<DateTime> _transactionDate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCurrencyRateIDChanging(int value);
        partial void OnCurrencyRateIDChanged();
        partial void OnCurrencyShortCodeChanging(string value);
        partial void OnCurrencyShortCodeChanged();
        partial void OnMiddleRateChanging(Nullable<double> value);
        partial void OnMiddleRateChanged();
        partial void OnPurchaseRateChanging(Nullable<double> value);
        partial void OnPurchaseRateChanged();
        partial void OnSellRateChanging(Nullable<double> value);
        partial void OnSellRateChanged();
        partial void OnTransactionDateChanging(Nullable<DateTime> value);
        partial void OnTransactionDateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyRate"/> class.
        /// </summary>
        public CurrencyRate()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CurrencyRateID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CurrencyRateID
        {
            get
            {
                return this._currencyRateID;
            }
            set
            {
                if ((this._currencyRateID != value))
                {
                    this.OnCurrencyRateIDChanging(value);
                    this.ValidateProperty("CurrencyRateID", value);
                    this._currencyRateID = value;
                    this.RaisePropertyChanged("CurrencyRateID");
                    this.OnCurrencyRateIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrencyShortCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(3)]
        public string CurrencyShortCode
        {
            get
            {
                return this._currencyShortCode;
            }
            set
            {
                if ((this._currencyShortCode != value))
                {
                    this.OnCurrencyShortCodeChanging(value);
                    this.RaiseDataMemberChanging("CurrencyShortCode");
                    this.ValidateProperty("CurrencyShortCode", value);
                    this._currencyShortCode = value;
                    this.RaiseDataMemberChanged("CurrencyShortCode");
                    this.OnCurrencyShortCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MiddleRate' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> MiddleRate
        {
            get
            {
                return this._middleRate;
            }
            set
            {
                if ((this._middleRate != value))
                {
                    this.OnMiddleRateChanging(value);
                    this.RaiseDataMemberChanging("MiddleRate");
                    this.ValidateProperty("MiddleRate", value);
                    this._middleRate = value;
                    this.RaiseDataMemberChanged("MiddleRate");
                    this.OnMiddleRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurchaseRate' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> PurchaseRate
        {
            get
            {
                return this._purchaseRate;
            }
            set
            {
                if ((this._purchaseRate != value))
                {
                    this.OnPurchaseRateChanging(value);
                    this.RaiseDataMemberChanging("PurchaseRate");
                    this.ValidateProperty("PurchaseRate", value);
                    this._purchaseRate = value;
                    this.RaiseDataMemberChanged("PurchaseRate");
                    this.OnPurchaseRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SellRate' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> SellRate
        {
            get
            {
                return this._sellRate;
            }
            set
            {
                if ((this._sellRate != value))
                {
                    this.OnSellRateChanging(value);
                    this.RaiseDataMemberChanging("SellRate");
                    this.ValidateProperty("SellRate", value);
                    this._sellRate = value;
                    this.RaiseDataMemberChanged("SellRate");
                    this.OnSellRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TransactionDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> TransactionDate
        {
            get
            {
                return this._transactionDate;
            }
            set
            {
                if ((this._transactionDate != value))
                {
                    this.OnTransactionDateChanging(value);
                    this.RaiseDataMemberChanging("TransactionDate");
                    this.ValidateProperty("TransactionDate", value);
                    this._transactionDate = value;
                    this.RaiseDataMemberChanged("TransactionDate");
                    this.OnTransactionDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._currencyRateID;
        }
    }
    
    /// <summary>
    /// The 'CurrentActivePond' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class CurrentActivePond : Entity
    {
        
        private Nullable<int> _doc;
        
        private Nullable<int> _numberOfFry;
        
        private string _pondDescription;
        
        private int _pondID;
        
        private int _productionCycleID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDOCChanging(Nullable<int> value);
        partial void OnDOCChanged();
        partial void OnNumberOfFryChanging(Nullable<int> value);
        partial void OnNumberOfFryChanged();
        partial void OnPondDescriptionChanging(string value);
        partial void OnPondDescriptionChanged();
        partial void OnPondIDChanging(int value);
        partial void OnPondIDChanged();
        partial void OnProductionCycleIDChanging(int value);
        partial void OnProductionCycleIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentActivePond"/> class.
        /// </summary>
        public CurrentActivePond()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DOC' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> DOC
        {
            get
            {
                return this._doc;
            }
            set
            {
                if ((this._doc != value))
                {
                    this.OnDOCChanging(value);
                    this.RaiseDataMemberChanging("DOC");
                    this.ValidateProperty("DOC", value);
                    this._doc = value;
                    this.RaiseDataMemberChanged("DOC");
                    this.OnDOCChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumberOfFry' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> NumberOfFry
        {
            get
            {
                return this._numberOfFry;
            }
            set
            {
                if ((this._numberOfFry != value))
                {
                    this.OnNumberOfFryChanging(value);
                    this.RaiseDataMemberChanging("NumberOfFry");
                    this.ValidateProperty("NumberOfFry", value);
                    this._numberOfFry = value;
                    this.RaiseDataMemberChanged("NumberOfFry");
                    this.OnNumberOfFryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PondDescription' value.
        /// </summary>
        [DataMember()]
        public string PondDescription
        {
            get
            {
                return this._pondDescription;
            }
            set
            {
                if ((this._pondDescription != value))
                {
                    this.OnPondDescriptionChanging(value);
                    this.RaiseDataMemberChanging("PondDescription");
                    this.ValidateProperty("PondDescription", value);
                    this._pondDescription = value;
                    this.RaiseDataMemberChanged("PondDescription");
                    this.OnPondDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PondID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PondID
        {
            get
            {
                return this._pondID;
            }
            set
            {
                if ((this._pondID != value))
                {
                    this.OnPondIDChanging(value);
                    this.ValidateProperty("PondID", value);
                    this._pondID = value;
                    this.RaisePropertyChanged("PondID");
                    this.OnPondIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductionCycleID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductionCycleID
        {
            get
            {
                return this._productionCycleID;
            }
            set
            {
                if ((this._productionCycleID != value))
                {
                    this.OnProductionCycleIDChanging(value);
                    this.ValidateProperty("ProductionCycleID", value);
                    this._productionCycleID = value;
                    this.RaisePropertyChanged("ProductionCycleID");
                    this.OnProductionCycleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._pondID, this._productionCycleID);
        }
    }
    
    /// <summary>
    /// The 'CurrentInventoryView' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class CurrentInventoryView : Entity
    {
        
        private string _categoryName;
        
        private Nullable<double> _inventory_Level;
        
        private Nullable<bool> _isFinishedProduct;
        
        private int _productID;
        
        private string _productName;
        
        private string _uom;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnInventory_LevelChanging(Nullable<double> value);
        partial void OnInventory_LevelChanged();
        partial void OnIsFinishedProductChanging(Nullable<bool> value);
        partial void OnIsFinishedProductChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnUomChanging(string value);
        partial void OnUomChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentInventoryView"/> class.
        /// </summary>
        public CurrentInventoryView()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryName' value.
        /// </summary>
        [DataMember()]
        [StringLength(512)]
        public string CategoryName
        {
            get
            {
                return this._categoryName;
            }
            set
            {
                if ((this._categoryName != value))
                {
                    this.OnCategoryNameChanging(value);
                    this.RaiseDataMemberChanging("CategoryName");
                    this.ValidateProperty("CategoryName", value);
                    this._categoryName = value;
                    this.RaiseDataMemberChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Inventory_Level' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Inventory_Level
        {
            get
            {
                return this._inventory_Level;
            }
            set
            {
                if ((this._inventory_Level != value))
                {
                    this.OnInventory_LevelChanging(value);
                    this.RaiseDataMemberChanging("Inventory_Level");
                    this.ValidateProperty("Inventory_Level", value);
                    this._inventory_Level = value;
                    this.RaiseDataMemberChanged("Inventory_Level");
                    this.OnInventory_LevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsFinishedProduct' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsFinishedProduct
        {
            get
            {
                return this._isFinishedProduct;
            }
            set
            {
                if ((this._isFinishedProduct != value))
                {
                    this.OnIsFinishedProductChanging(value);
                    this.RaiseDataMemberChanging("IsFinishedProduct");
                    this.ValidateProperty("IsFinishedProduct", value);
                    this._isFinishedProduct = value;
                    this.RaiseDataMemberChanged("IsFinishedProduct");
                    this.OnIsFinishedProductChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaisePropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductName' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string ProductName
        {
            get
            {
                return this._productName;
            }
            set
            {
                if ((this._productName != value))
                {
                    this.OnProductNameChanging(value);
                    this.RaiseDataMemberChanging("ProductName");
                    this.ValidateProperty("ProductName", value);
                    this._productName = value;
                    this.RaiseDataMemberChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Uom' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Uom
        {
            get
            {
                return this._uom;
            }
            set
            {
                if ((this._uom != value))
                {
                    this.OnUomChanging(value);
                    this.RaiseDataMemberChanging("Uom");
                    this.ValidateProperty("Uom", value);
                    this._uom = value;
                    this.RaiseDataMemberChanged("Uom");
                    this.OnUomChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productID;
        }
    }
    
    /// <summary>
    /// The 'DeliveryLog' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class DeliveryLog : Entity
    {
        
        private string _deliveryBatch;
        
        private Nullable<DateTime> _deliveryDate;
        
        private string _deliveryLogID;
        
        private string _deliveryNote;
        
        private string _location;
        
        private int _poDetailsID;
        
        private Nullable<int> _productID;
        
        private double _qtyReceived;
        
        private string _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeliveryBatchChanging(string value);
        partial void OnDeliveryBatchChanged();
        partial void OnDeliveryDateChanging(Nullable<DateTime> value);
        partial void OnDeliveryDateChanged();
        partial void OnDeliveryLogIDChanging(string value);
        partial void OnDeliveryLogIDChanged();
        partial void OnDeliveryNoteChanging(string value);
        partial void OnDeliveryNoteChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnPODetailsIDChanging(int value);
        partial void OnPODetailsIDChanged();
        partial void OnProductIDChanging(Nullable<int> value);
        partial void OnProductIDChanged();
        partial void OnqtyReceivedChanging(double value);
        partial void OnqtyReceivedChanged();
        partial void OnUserIDChanging(string value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryLog"/> class.
        /// </summary>
        public DeliveryLog()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DeliveryBatch' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string DeliveryBatch
        {
            get
            {
                return this._deliveryBatch;
            }
            set
            {
                if ((this._deliveryBatch != value))
                {
                    this.OnDeliveryBatchChanging(value);
                    this.RaiseDataMemberChanging("DeliveryBatch");
                    this.ValidateProperty("DeliveryBatch", value);
                    this._deliveryBatch = value;
                    this.RaiseDataMemberChanged("DeliveryBatch");
                    this.OnDeliveryBatchChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeliveryDate' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public Nullable<DateTime> DeliveryDate
        {
            get
            {
                return this._deliveryDate;
            }
            set
            {
                if ((this._deliveryDate != value))
                {
                    this.OnDeliveryDateChanging(value);
                    this.RaiseDataMemberChanging("DeliveryDate");
                    this.ValidateProperty("DeliveryDate", value);
                    this._deliveryDate = value;
                    this.RaiseDataMemberChanged("DeliveryDate");
                    this.OnDeliveryDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeliveryLogID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string DeliveryLogID
        {
            get
            {
                return this._deliveryLogID;
            }
            set
            {
                if ((this._deliveryLogID != value))
                {
                    this.OnDeliveryLogIDChanging(value);
                    this.ValidateProperty("DeliveryLogID", value);
                    this._deliveryLogID = value;
                    this.RaisePropertyChanged("DeliveryLogID");
                    this.OnDeliveryLogIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeliveryNote' value.
        /// </summary>
        [DataMember()]
        public string DeliveryNote
        {
            get
            {
                return this._deliveryNote;
            }
            set
            {
                if ((this._deliveryNote != value))
                {
                    this.OnDeliveryNoteChanging(value);
                    this.RaiseDataMemberChanging("DeliveryNote");
                    this.ValidateProperty("DeliveryNote", value);
                    this._deliveryNote = value;
                    this.RaiseDataMemberChanged("DeliveryNote");
                    this.OnDeliveryNoteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Location' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    this.OnLocationChanging(value);
                    this.RaiseDataMemberChanging("Location");
                    this.ValidateProperty("Location", value);
                    this._location = value;
                    this.RaiseDataMemberChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PODetailsID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int PODetailsID
        {
            get
            {
                return this._poDetailsID;
            }
            set
            {
                if ((this._poDetailsID != value))
                {
                    this.OnPODetailsIDChanging(value);
                    this.RaiseDataMemberChanging("PODetailsID");
                    this.ValidateProperty("PODetailsID", value);
                    this._poDetailsID = value;
                    this.RaiseDataMemberChanged("PODetailsID");
                    this.OnPODetailsIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.RaiseDataMemberChanging("ProductID");
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaiseDataMemberChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'qtyReceived' value.
        /// </summary>
        [DataMember()]
        public double qtyReceived
        {
            get
            {
                return this._qtyReceived;
            }
            set
            {
                if ((this._qtyReceived != value))
                {
                    this.OnqtyReceivedChanging(value);
                    this.RaiseDataMemberChanging("qtyReceived");
                    this.ValidateProperty("qtyReceived", value);
                    this._qtyReceived = value;
                    this.RaiseDataMemberChanged("qtyReceived");
                    this.OnqtyReceivedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._deliveryLogID;
        }
    }
    
    /// <summary>
    /// The 'EmployeeNameView' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class EmployeeNameView : Entity
    {
        
        private int _contactID;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnContactIDChanging(int value);
        partial void OnContactIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeNameView"/> class.
        /// </summary>
        public EmployeeNameView()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ContactID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ContactID
        {
            get
            {
                return this._contactID;
            }
            set
            {
                if ((this._contactID != value))
                {
                    this.OnContactIDChanging(value);
                    this.ValidateProperty("ContactID", value);
                    this._contactID = value;
                    this.RaisePropertyChanged("ContactID");
                    this.OnContactIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(101)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._contactID;
        }
    }
    
    /// <summary>
    /// The 'Facility' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class Facility : Entity
    {
        
        private string _address;
        
        private string _address2;
        
        private string _city;
        
        private Nullable<int> _companyID;
        
        private string _contactPerson;
        
        private string _country;
        
        private string _email;
        
        private Nullable<DateTime> _entryDate;
        
        private int _facilityId;
        
        private string _facilityName;
        
        private string _phoneNumber;
        
        private string _state;
        
        private string _userID;
        
        private string _zipCode;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnAddress2Changing(string value);
        partial void OnAddress2Changed();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyIDChanging(Nullable<int> value);
        partial void OnCompanyIDChanged();
        partial void OnContactPersonChanging(string value);
        partial void OnContactPersonChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnEntryDateChanging(Nullable<DateTime> value);
        partial void OnEntryDateChanged();
        partial void OnFacilityIdChanging(int value);
        partial void OnFacilityIdChanged();
        partial void OnFacilityNameChanging(string value);
        partial void OnFacilityNameChanged();
        partial void OnPhoneNumberChanging(string value);
        partial void OnPhoneNumberChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnUserIDChanging(string value);
        partial void OnUserIDChanged();
        partial void OnZipCodeChanging(string value);
        partial void OnZipCodeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Facility"/> class.
        /// </summary>
        public Facility()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address2' value.
        /// </summary>
        [DataMember()]
        public string Address2
        {
            get
            {
                return this._address2;
            }
            set
            {
                if ((this._address2 != value))
                {
                    this.OnAddress2Changing(value);
                    this.RaiseDataMemberChanging("Address2");
                    this.ValidateProperty("Address2", value);
                    this._address2 = value;
                    this.RaiseDataMemberChanged("Address2");
                    this.OnAddress2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactPerson' value.
        /// </summary>
        [DataMember()]
        public string ContactPerson
        {
            get
            {
                return this._contactPerson;
            }
            set
            {
                if ((this._contactPerson != value))
                {
                    this.OnContactPersonChanging(value);
                    this.RaiseDataMemberChanging("ContactPerson");
                    this.ValidateProperty("ContactPerson", value);
                    this._contactPerson = value;
                    this.RaiseDataMemberChanged("ContactPerson");
                    this.OnContactPersonChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EntryDate' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public Nullable<DateTime> EntryDate
        {
            get
            {
                return this._entryDate;
            }
            set
            {
                if ((this._entryDate != value))
                {
                    this.OnEntryDateChanging(value);
                    this.RaiseDataMemberChanging("EntryDate");
                    this.ValidateProperty("EntryDate", value);
                    this._entryDate = value;
                    this.RaiseDataMemberChanged("EntryDate");
                    this.OnEntryDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FacilityId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int FacilityId
        {
            get
            {
                return this._facilityId;
            }
            set
            {
                if ((this._facilityId != value))
                {
                    this.OnFacilityIdChanging(value);
                    this.ValidateProperty("FacilityId", value);
                    this._facilityId = value;
                    this.RaisePropertyChanged("FacilityId");
                    this.OnFacilityIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FacilityName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string FacilityName
        {
            get
            {
                return this._facilityName;
            }
            set
            {
                if ((this._facilityName != value))
                {
                    this.OnFacilityNameChanging(value);
                    this.RaiseDataMemberChanging("FacilityName");
                    this.ValidateProperty("FacilityName", value);
                    this._facilityName = value;
                    this.RaiseDataMemberChanged("FacilityName");
                    this.OnFacilityNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNumber' value.
        /// </summary>
        [DataMember()]
        [StringLength(25)]
        public string PhoneNumber
        {
            get
            {
                return this._phoneNumber;
            }
            set
            {
                if ((this._phoneNumber != value))
                {
                    this.OnPhoneNumberChanging(value);
                    this.RaiseDataMemberChanging("PhoneNumber");
                    this.ValidateProperty("PhoneNumber", value);
                    this._phoneNumber = value;
                    this.RaiseDataMemberChanged("PhoneNumber");
                    this.OnPhoneNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [StringLength(128)]
        public string UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ZipCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ZipCode
        {
            get
            {
                return this._zipCode;
            }
            set
            {
                if ((this._zipCode != value))
                {
                    this.OnZipCodeChanging(value);
                    this.RaiseDataMemberChanging("ZipCode");
                    this.ValidateProperty("ZipCode", value);
                    this._zipCode = value;
                    this.RaiseDataMemberChanged("ZipCode");
                    this.OnZipCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._facilityId;
        }
    }
    
    /// <summary>
    /// The 'FeedingAuditView' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class FeedingAuditView : Entity
    {
        
        private Nullable<int> _dayOfCulture;
        
        private int _feedingHistoryID;
        
        private Nullable<double> _feedingPlan;
        
        private int _productionCycleID;
        
        private Nullable<double> _total_Feed;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDayOfCultureChanging(Nullable<int> value);
        partial void OnDayOfCultureChanged();
        partial void OnFeedingHistoryIDChanging(int value);
        partial void OnFeedingHistoryIDChanged();
        partial void OnFeedingPlanChanging(Nullable<double> value);
        partial void OnFeedingPlanChanged();
        partial void OnProductionCycleIDChanging(int value);
        partial void OnProductionCycleIDChanged();
        partial void OnTotal_FeedChanging(Nullable<double> value);
        partial void OnTotal_FeedChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedingAuditView"/> class.
        /// </summary>
        public FeedingAuditView()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DayOfCulture' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> DayOfCulture
        {
            get
            {
                return this._dayOfCulture;
            }
            set
            {
                if ((this._dayOfCulture != value))
                {
                    this.OnDayOfCultureChanging(value);
                    this.RaiseDataMemberChanging("DayOfCulture");
                    this.ValidateProperty("DayOfCulture", value);
                    this._dayOfCulture = value;
                    this.RaiseDataMemberChanged("DayOfCulture");
                    this.OnDayOfCultureChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FeedingHistoryID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int FeedingHistoryID
        {
            get
            {
                return this._feedingHistoryID;
            }
            set
            {
                if ((this._feedingHistoryID != value))
                {
                    this.OnFeedingHistoryIDChanging(value);
                    this.ValidateProperty("FeedingHistoryID", value);
                    this._feedingHistoryID = value;
                    this.RaisePropertyChanged("FeedingHistoryID");
                    this.OnFeedingHistoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FeedingPlan' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> FeedingPlan
        {
            get
            {
                return this._feedingPlan;
            }
            set
            {
                if ((this._feedingPlan != value))
                {
                    this.OnFeedingPlanChanging(value);
                    this.RaiseDataMemberChanging("FeedingPlan");
                    this.ValidateProperty("FeedingPlan", value);
                    this._feedingPlan = value;
                    this.RaiseDataMemberChanged("FeedingPlan");
                    this.OnFeedingPlanChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductionCycleID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductionCycleID
        {
            get
            {
                return this._productionCycleID;
            }
            set
            {
                if ((this._productionCycleID != value))
                {
                    this.OnProductionCycleIDChanging(value);
                    this.ValidateProperty("ProductionCycleID", value);
                    this._productionCycleID = value;
                    this.RaisePropertyChanged("ProductionCycleID");
                    this.OnProductionCycleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Total_Feed' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Total_Feed
        {
            get
            {
                return this._total_Feed;
            }
            set
            {
                if ((this._total_Feed != value))
                {
                    this.OnTotal_FeedChanging(value);
                    this.RaiseDataMemberChanging("Total_Feed");
                    this.ValidateProperty("Total_Feed", value);
                    this._total_Feed = value;
                    this.RaiseDataMemberChanged("Total_Feed");
                    this.OnTotal_FeedChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._feedingHistoryID, this._productionCycleID);
        }
    }
    
    /// <summary>
    /// The 'FeedingLog' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class FeedingLog : Entity
    {
        
        private Nullable<double> _cummulativeFeed;
        
        private Nullable<double> _feedGiven;
        
        private int _feedLogID;
        
        private Nullable<double> _feedPerDay;
        
        private string _feedType;
        
        private Nullable<DateTime> _logDate;
        
        private Nullable<int> _productID;
        
        private int _productionCycleID;
        
        private string _userID;
        
        private Nullable<int> _waterLevel;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCummulativeFeedChanging(Nullable<double> value);
        partial void OnCummulativeFeedChanged();
        partial void OnfeedGivenChanging(Nullable<double> value);
        partial void OnfeedGivenChanged();
        partial void OnFeedLogIDChanging(int value);
        partial void OnFeedLogIDChanged();
        partial void OnfeedPerDayChanging(Nullable<double> value);
        partial void OnfeedPerDayChanged();
        partial void OnfeedTypeChanging(string value);
        partial void OnfeedTypeChanged();
        partial void OnLogDateChanging(Nullable<DateTime> value);
        partial void OnLogDateChanged();
        partial void OnProductIDChanging(Nullable<int> value);
        partial void OnProductIDChanged();
        partial void OnProductionCycleIDChanging(int value);
        partial void OnProductionCycleIDChanged();
        partial void OnUserIDChanging(string value);
        partial void OnUserIDChanged();
        partial void OnwaterLevelChanging(Nullable<int> value);
        partial void OnwaterLevelChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedingLog"/> class.
        /// </summary>
        public FeedingLog()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CummulativeFeed' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> CummulativeFeed
        {
            get
            {
                return this._cummulativeFeed;
            }
            set
            {
                if ((this._cummulativeFeed != value))
                {
                    this.OnCummulativeFeedChanging(value);
                    this.RaiseDataMemberChanging("CummulativeFeed");
                    this.ValidateProperty("CummulativeFeed", value);
                    this._cummulativeFeed = value;
                    this.RaiseDataMemberChanged("CummulativeFeed");
                    this.OnCummulativeFeedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'feedGiven' value.
        /// </summary>
        [DataMember()]
        [Range(((double)(0D)), ((double)(10000D)), ErrorMessage="Enter Value between 0-10,000")]
        [Required()]
        public Nullable<double> feedGiven
        {
            get
            {
                return this._feedGiven;
            }
            set
            {
                if ((this._feedGiven != value))
                {
                    this.OnfeedGivenChanging(value);
                    this.RaiseDataMemberChanging("feedGiven");
                    this.ValidateProperty("feedGiven", value);
                    this._feedGiven = value;
                    this.RaiseDataMemberChanged("feedGiven");
                    this.OnfeedGivenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FeedLogID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int FeedLogID
        {
            get
            {
                return this._feedLogID;
            }
            set
            {
                if ((this._feedLogID != value))
                {
                    this.OnFeedLogIDChanging(value);
                    this.ValidateProperty("FeedLogID", value);
                    this._feedLogID = value;
                    this.RaisePropertyChanged("FeedLogID");
                    this.OnFeedLogIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'feedPerDay' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> feedPerDay
        {
            get
            {
                return this._feedPerDay;
            }
            set
            {
                if ((this._feedPerDay != value))
                {
                    this.OnfeedPerDayChanging(value);
                    this.RaiseDataMemberChanging("feedPerDay");
                    this.ValidateProperty("feedPerDay", value);
                    this._feedPerDay = value;
                    this.RaiseDataMemberChanged("feedPerDay");
                    this.OnfeedPerDayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'feedType' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string feedType
        {
            get
            {
                return this._feedType;
            }
            set
            {
                if ((this._feedType != value))
                {
                    this.OnfeedTypeChanging(value);
                    this.RaiseDataMemberChanging("feedType");
                    this.ValidateProperty("feedType", value);
                    this._feedType = value;
                    this.RaiseDataMemberChanged("feedType");
                    this.OnfeedTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LogDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> LogDate
        {
            get
            {
                return this._logDate;
            }
            set
            {
                if ((this._logDate != value))
                {
                    this.OnLogDateChanging(value);
                    this.RaiseDataMemberChanging("LogDate");
                    this.ValidateProperty("LogDate", value);
                    this._logDate = value;
                    this.RaiseDataMemberChanged("LogDate");
                    this.OnLogDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public Nullable<int> ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.RaiseDataMemberChanging("ProductID");
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaiseDataMemberChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductionCycleID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public int ProductionCycleID
        {
            get
            {
                return this._productionCycleID;
            }
            set
            {
                if ((this._productionCycleID != value))
                {
                    this.OnProductionCycleIDChanging(value);
                    this.RaiseDataMemberChanging("ProductionCycleID");
                    this.ValidateProperty("ProductionCycleID", value);
                    this._productionCycleID = value;
                    this.RaiseDataMemberChanged("ProductionCycleID");
                    this.OnProductionCycleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'waterLevel' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> waterLevel
        {
            get
            {
                return this._waterLevel;
            }
            set
            {
                if ((this._waterLevel != value))
                {
                    this.OnwaterLevelChanging(value);
                    this.RaiseDataMemberChanging("waterLevel");
                    this.ValidateProperty("waterLevel", value);
                    this._waterLevel = value;
                    this.RaiseDataMemberChanged("waterLevel");
                    this.OnwaterLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._feedLogID;
        }
    }
    
    /// <summary>
    /// The 'FRGuide' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class FRGuide : Entity
    {
        
        private Nullable<decimal> _fr;
        
        private int _id;
        
        private decimal _mbw;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFRChanging(Nullable<decimal> value);
        partial void OnFRChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnMBWChanging(decimal value);
        partial void OnMBWChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FRGuide"/> class.
        /// </summary>
        public FRGuide()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FR' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> FR
        {
            get
            {
                return this._fr;
            }
            set
            {
                if ((this._fr != value))
                {
                    this.OnFRChanging(value);
                    this.RaiseDataMemberChanging("FR");
                    this.ValidateProperty("FR", value);
                    this._fr = value;
                    this.RaiseDataMemberChanged("FR");
                    this.OnFRChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MBW' value.
        /// </summary>
        [DataMember()]
        public decimal MBW
        {
            get
            {
                return this._mbw;
            }
            set
            {
                if ((this._mbw != value))
                {
                    this.OnMBWChanging(value);
                    this.RaiseDataMemberChanging("MBW");
                    this.ValidateProperty("MBW", value);
                    this._mbw = value;
                    this.RaiseDataMemberChanged("MBW");
                    this.OnMBWChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Harvest' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class Harvest : Entity
    {
        
        private Nullable<int> _age;
        
        private Nullable<DateTime> _harvestDate;
        
        private Nullable<double> _harvestedPopulation;
        
        private int _harvestID;
        
        private Nullable<bool> _isFinalHarvest;
        
        private Nullable<int> _month;
        
        private Nullable<double> _numberOfFry;
        
        private int _pondID;
        
        private Nullable<double> _populationLeft;
        
        private int _productionCycleID;
        
        private Nullable<double> _size;
        
        private Nullable<double> _weight;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAgeChanging(Nullable<int> value);
        partial void OnAgeChanged();
        partial void OnHarvestDateChanging(Nullable<DateTime> value);
        partial void OnHarvestDateChanged();
        partial void OnHarvestedPopulationChanging(Nullable<double> value);
        partial void OnHarvestedPopulationChanged();
        partial void OnHarvestIDChanging(int value);
        partial void OnHarvestIDChanged();
        partial void OnisFinalHarvestChanging(Nullable<bool> value);
        partial void OnisFinalHarvestChanged();
        partial void OnMonthChanging(Nullable<int> value);
        partial void OnMonthChanged();
        partial void OnNumberOfFryChanging(Nullable<double> value);
        partial void OnNumberOfFryChanged();
        partial void OnPondIDChanging(int value);
        partial void OnPondIDChanged();
        partial void OnPopulationLeftChanging(Nullable<double> value);
        partial void OnPopulationLeftChanged();
        partial void OnProductionCycleIDChanging(int value);
        partial void OnProductionCycleIDChanged();
        partial void OnSizeChanging(Nullable<double> value);
        partial void OnSizeChanged();
        partial void OnWeightChanging(Nullable<double> value);
        partial void OnWeightChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Harvest"/> class.
        /// </summary>
        public Harvest()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Age' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Age
        {
            get
            {
                return this._age;
            }
            set
            {
                if ((this._age != value))
                {
                    this.OnAgeChanging(value);
                    this.RaiseDataMemberChanging("Age");
                    this.ValidateProperty("Age", value);
                    this._age = value;
                    this.RaiseDataMemberChanged("Age");
                    this.OnAgeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HarvestDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> HarvestDate
        {
            get
            {
                return this._harvestDate;
            }
            set
            {
                if ((this._harvestDate != value))
                {
                    this.OnHarvestDateChanging(value);
                    this.RaiseDataMemberChanging("HarvestDate");
                    this.ValidateProperty("HarvestDate", value);
                    this._harvestDate = value;
                    this.RaiseDataMemberChanged("HarvestDate");
                    this.OnHarvestDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HarvestedPopulation' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> HarvestedPopulation
        {
            get
            {
                return this._harvestedPopulation;
            }
            set
            {
                if ((this._harvestedPopulation != value))
                {
                    this.OnHarvestedPopulationChanging(value);
                    this.RaiseDataMemberChanging("HarvestedPopulation");
                    this.ValidateProperty("HarvestedPopulation", value);
                    this._harvestedPopulation = value;
                    this.RaiseDataMemberChanged("HarvestedPopulation");
                    this.OnHarvestedPopulationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HarvestID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int HarvestID
        {
            get
            {
                return this._harvestID;
            }
            set
            {
                if ((this._harvestID != value))
                {
                    this.OnHarvestIDChanging(value);
                    this.ValidateProperty("HarvestID", value);
                    this._harvestID = value;
                    this.RaisePropertyChanged("HarvestID");
                    this.OnHarvestIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isFinalHarvest' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> isFinalHarvest
        {
            get
            {
                return this._isFinalHarvest;
            }
            set
            {
                if ((this._isFinalHarvest != value))
                {
                    this.OnisFinalHarvestChanging(value);
                    this.RaiseDataMemberChanging("isFinalHarvest");
                    this.ValidateProperty("isFinalHarvest", value);
                    this._isFinalHarvest = value;
                    this.RaiseDataMemberChanged("isFinalHarvest");
                    this.OnisFinalHarvestChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Month' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Month
        {
            get
            {
                return this._month;
            }
            set
            {
                if ((this._month != value))
                {
                    this.OnMonthChanging(value);
                    this.RaiseDataMemberChanging("Month");
                    this.ValidateProperty("Month", value);
                    this._month = value;
                    this.RaiseDataMemberChanged("Month");
                    this.OnMonthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumberOfFry' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> NumberOfFry
        {
            get
            {
                return this._numberOfFry;
            }
            set
            {
                if ((this._numberOfFry != value))
                {
                    this.OnNumberOfFryChanging(value);
                    this.RaiseDataMemberChanging("NumberOfFry");
                    this.ValidateProperty("NumberOfFry", value);
                    this._numberOfFry = value;
                    this.RaiseDataMemberChanged("NumberOfFry");
                    this.OnNumberOfFryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PondID' value.
        /// </summary>
        [DataMember()]
        public int PondID
        {
            get
            {
                return this._pondID;
            }
            set
            {
                if ((this._pondID != value))
                {
                    this.OnPondIDChanging(value);
                    this.RaiseDataMemberChanging("PondID");
                    this.ValidateProperty("PondID", value);
                    this._pondID = value;
                    this.RaiseDataMemberChanged("PondID");
                    this.OnPondIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PopulationLeft' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> PopulationLeft
        {
            get
            {
                return this._populationLeft;
            }
            set
            {
                if ((this._populationLeft != value))
                {
                    this.OnPopulationLeftChanging(value);
                    this.RaiseDataMemberChanging("PopulationLeft");
                    this.ValidateProperty("PopulationLeft", value);
                    this._populationLeft = value;
                    this.RaiseDataMemberChanged("PopulationLeft");
                    this.OnPopulationLeftChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductionCycleID' value.
        /// </summary>
        [DataMember()]
        public int ProductionCycleID
        {
            get
            {
                return this._productionCycleID;
            }
            set
            {
                if ((this._productionCycleID != value))
                {
                    this.OnProductionCycleIDChanging(value);
                    this.RaiseDataMemberChanging("ProductionCycleID");
                    this.ValidateProperty("ProductionCycleID", value);
                    this._productionCycleID = value;
                    this.RaiseDataMemberChanged("ProductionCycleID");
                    this.OnProductionCycleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Size' value.
        /// </summary>
        [DataMember()]
        [Range(10, 300)]
        [Required()]
        public Nullable<double> Size
        {
            get
            {
                return this._size;
            }
            set
            {
                if ((this._size != value))
                {
                    this.OnSizeChanging(value);
                    this.RaiseDataMemberChanging("Size");
                    this.ValidateProperty("Size", value);
                    this._size = value;
                    this.RaiseDataMemberChanged("Size");
                    this.OnSizeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Weight' value.
        /// </summary>
        [DataMember()]
        [Range(((double)(0D)), ((double)(999999999999D)))]
        [Required()]
        public Nullable<double> Weight
        {
            get
            {
                return this._weight;
            }
            set
            {
                if ((this._weight != value))
                {
                    this.OnWeightChanging(value);
                    this.RaiseDataMemberChanging("Weight");
                    this.ValidateProperty("Weight", value);
                    this._weight = value;
                    this.RaiseDataMemberChanged("Weight");
                    this.OnWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._harvestID;
        }
    }
    
    /// <summary>
    /// The 'MasterCurrency' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class MasterCurrency : Entity
    {
        
        private string _currencyCulture;
        
        private string _currencyName;
        
        private string _currencyShortName;
        
        private Nullable<bool> _isDefault;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCurrencyCultureChanging(string value);
        partial void OnCurrencyCultureChanged();
        partial void OnCurrencyNameChanging(string value);
        partial void OnCurrencyNameChanged();
        partial void OnCurrencyShortNameChanging(string value);
        partial void OnCurrencyShortNameChanged();
        partial void OnisDefaultChanging(Nullable<bool> value);
        partial void OnisDefaultChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MasterCurrency"/> class.
        /// </summary>
        public MasterCurrency()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CurrencyCulture' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string CurrencyCulture
        {
            get
            {
                return this._currencyCulture;
            }
            set
            {
                if ((this._currencyCulture != value))
                {
                    this.OnCurrencyCultureChanging(value);
                    this.RaiseDataMemberChanging("CurrencyCulture");
                    this.ValidateProperty("CurrencyCulture", value);
                    this._currencyCulture = value;
                    this.RaiseDataMemberChanged("CurrencyCulture");
                    this.OnCurrencyCultureChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrencyName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string CurrencyName
        {
            get
            {
                return this._currencyName;
            }
            set
            {
                if ((this._currencyName != value))
                {
                    this.OnCurrencyNameChanging(value);
                    this.RaiseDataMemberChanging("CurrencyName");
                    this.ValidateProperty("CurrencyName", value);
                    this._currencyName = value;
                    this.RaiseDataMemberChanged("CurrencyName");
                    this.OnCurrencyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrencyShortName' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(3)]
        public string CurrencyShortName
        {
            get
            {
                return this._currencyShortName;
            }
            set
            {
                if ((this._currencyShortName != value))
                {
                    this.OnCurrencyShortNameChanging(value);
                    this.ValidateProperty("CurrencyShortName", value);
                    this._currencyShortName = value;
                    this.RaisePropertyChanged("CurrencyShortName");
                    this.OnCurrencyShortNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isDefault' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> isDefault
        {
            get
            {
                return this._isDefault;
            }
            set
            {
                if ((this._isDefault != value))
                {
                    this.OnisDefaultChanging(value);
                    this.RaiseDataMemberChanging("isDefault");
                    this.ValidateProperty("isDefault", value);
                    this._isDefault = value;
                    this.RaiseDataMemberChanged("isDefault");
                    this.OnisDefaultChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._currencyShortName;
        }
    }
    
    /// <summary>
    /// The 'MasterTax' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class MasterTax : Entity
    {
        
        private string _taxDescription;
        
        private int _taxID;
        
        private Nullable<decimal> _taxRate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnTaxDescriptionChanging(string value);
        partial void OnTaxDescriptionChanged();
        partial void OnTaxIDChanging(int value);
        partial void OnTaxIDChanged();
        partial void OnTaxRateChanging(Nullable<decimal> value);
        partial void OnTaxRateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MasterTax"/> class.
        /// </summary>
        public MasterTax()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'TaxDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string TaxDescription
        {
            get
            {
                return this._taxDescription;
            }
            set
            {
                if ((this._taxDescription != value))
                {
                    this.OnTaxDescriptionChanging(value);
                    this.RaiseDataMemberChanging("TaxDescription");
                    this.ValidateProperty("TaxDescription", value);
                    this._taxDescription = value;
                    this.RaiseDataMemberChanged("TaxDescription");
                    this.OnTaxDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TaxID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int TaxID
        {
            get
            {
                return this._taxID;
            }
            set
            {
                if ((this._taxID != value))
                {
                    this.OnTaxIDChanging(value);
                    this.ValidateProperty("TaxID", value);
                    this._taxID = value;
                    this.RaisePropertyChanged("TaxID");
                    this.OnTaxIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TaxRate' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TaxRate
        {
            get
            {
                return this._taxRate;
            }
            set
            {
                if ((this._taxRate != value))
                {
                    this.OnTaxRateChanging(value);
                    this.RaiseDataMemberChanging("TaxRate");
                    this.ValidateProperty("TaxRate", value);
                    this._taxRate = value;
                    this.RaiseDataMemberChanged("TaxRate");
                    this.OnTaxRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._taxID;
        }
    }
    
    /// <summary>
    /// The 'PDOControl' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class PDOControl : Entity
    {
        
        private string _accountingNotes;
        
        private Nullable<float> _buyPrice;
        
        private Nullable<DateTime> _date;
        
        private int _id;
        
        private string _inventoryID;
        
        private string _inventoryName;
        
        private Nullable<bool> _isClosed;
        
        private Nullable<bool> _isOrdered;
        
        private Nullable<bool> _isPaid;
        
        private string _noPDO;
        
        private Nullable<float> _orderedQuantity;
        
        private string _receivedNotes;
        
        private Nullable<float> _receivedQuantity;
        
        private string _uom;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAccountingNotesChanging(string value);
        partial void OnAccountingNotesChanged();
        partial void OnBuyPriceChanging(Nullable<float> value);
        partial void OnBuyPriceChanged();
        partial void OnDateChanging(Nullable<DateTime> value);
        partial void OnDateChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnInventoryIDChanging(string value);
        partial void OnInventoryIDChanged();
        partial void OnInventoryNameChanging(string value);
        partial void OnInventoryNameChanged();
        partial void OnisClosedChanging(Nullable<bool> value);
        partial void OnisClosedChanged();
        partial void OnisOrderedChanging(Nullable<bool> value);
        partial void OnisOrderedChanged();
        partial void OnisPaidChanging(Nullable<bool> value);
        partial void OnisPaidChanged();
        partial void OnNoPDOChanging(string value);
        partial void OnNoPDOChanged();
        partial void OnOrderedQuantityChanging(Nullable<float> value);
        partial void OnOrderedQuantityChanged();
        partial void OnReceivedNotesChanging(string value);
        partial void OnReceivedNotesChanged();
        partial void OnReceivedQuantityChanging(Nullable<float> value);
        partial void OnReceivedQuantityChanged();
        partial void OnUOMChanging(string value);
        partial void OnUOMChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PDOControl"/> class.
        /// </summary>
        public PDOControl()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AccountingNotes' value.
        /// </summary>
        [DataMember()]
        public string AccountingNotes
        {
            get
            {
                return this._accountingNotes;
            }
            set
            {
                if ((this._accountingNotes != value))
                {
                    this.OnAccountingNotesChanging(value);
                    this.RaiseDataMemberChanging("AccountingNotes");
                    this.ValidateProperty("AccountingNotes", value);
                    this._accountingNotes = value;
                    this.RaiseDataMemberChanged("AccountingNotes");
                    this.OnAccountingNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BuyPrice' value.
        /// </summary>
        [DataMember()]
        [Range(((double)(0D)), ((double)(1E+18D)), ErrorMessage="Nothing less than 0")]
        public Nullable<float> BuyPrice
        {
            get
            {
                return this._buyPrice;
            }
            set
            {
                if ((this._buyPrice != value))
                {
                    this.OnBuyPriceChanging(value);
                    this.RaiseDataMemberChanging("BuyPrice");
                    this.ValidateProperty("BuyPrice", value);
                    this._buyPrice = value;
                    this.RaiseDataMemberChanged("BuyPrice");
                    this.OnBuyPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InventoryID' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string InventoryID
        {
            get
            {
                return this._inventoryID;
            }
            set
            {
                if ((this._inventoryID != value))
                {
                    this.OnInventoryIDChanging(value);
                    this.RaiseDataMemberChanging("InventoryID");
                    this.ValidateProperty("InventoryID", value);
                    this._inventoryID = value;
                    this.RaiseDataMemberChanged("InventoryID");
                    this.OnInventoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InventoryName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string InventoryName
        {
            get
            {
                return this._inventoryName;
            }
            set
            {
                if ((this._inventoryName != value))
                {
                    this.OnInventoryNameChanging(value);
                    this.RaiseDataMemberChanging("InventoryName");
                    this.ValidateProperty("InventoryName", value);
                    this._inventoryName = value;
                    this.RaiseDataMemberChanged("InventoryName");
                    this.OnInventoryNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isClosed' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> isClosed
        {
            get
            {
                return this._isClosed;
            }
            set
            {
                if ((this._isClosed != value))
                {
                    this.OnisClosedChanging(value);
                    this.RaiseDataMemberChanging("isClosed");
                    this.ValidateProperty("isClosed", value);
                    this._isClosed = value;
                    this.RaiseDataMemberChanged("isClosed");
                    this.OnisClosedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isOrdered' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> isOrdered
        {
            get
            {
                return this._isOrdered;
            }
            set
            {
                if ((this._isOrdered != value))
                {
                    this.OnisOrderedChanging(value);
                    this.RaiseDataMemberChanging("isOrdered");
                    this.ValidateProperty("isOrdered", value);
                    this._isOrdered = value;
                    this.RaiseDataMemberChanged("isOrdered");
                    this.OnisOrderedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isPaid' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> isPaid
        {
            get
            {
                return this._isPaid;
            }
            set
            {
                if ((this._isPaid != value))
                {
                    this.OnisPaidChanging(value);
                    this.RaiseDataMemberChanging("isPaid");
                    this.ValidateProperty("isPaid", value);
                    this._isPaid = value;
                    this.RaiseDataMemberChanged("isPaid");
                    this.OnisPaidChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NoPDO' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string NoPDO
        {
            get
            {
                return this._noPDO;
            }
            set
            {
                if ((this._noPDO != value))
                {
                    this.OnNoPDOChanging(value);
                    this.RaiseDataMemberChanging("NoPDO");
                    this.ValidateProperty("NoPDO", value);
                    this._noPDO = value;
                    this.RaiseDataMemberChanged("NoPDO");
                    this.OnNoPDOChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OrderedQuantity' value.
        /// </summary>
        [DataMember()]
        [Range(((double)(0D)), ((double)(1E+18D)), ErrorMessage="Nothing less than 0")]
        public Nullable<float> OrderedQuantity
        {
            get
            {
                return this._orderedQuantity;
            }
            set
            {
                if ((this._orderedQuantity != value))
                {
                    this.OnOrderedQuantityChanging(value);
                    this.RaiseDataMemberChanging("OrderedQuantity");
                    this.ValidateProperty("OrderedQuantity", value);
                    this._orderedQuantity = value;
                    this.RaiseDataMemberChanged("OrderedQuantity");
                    this.OnOrderedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReceivedNotes' value.
        /// </summary>
        [DataMember()]
        public string ReceivedNotes
        {
            get
            {
                return this._receivedNotes;
            }
            set
            {
                if ((this._receivedNotes != value))
                {
                    this.OnReceivedNotesChanging(value);
                    this.RaiseDataMemberChanging("ReceivedNotes");
                    this.ValidateProperty("ReceivedNotes", value);
                    this._receivedNotes = value;
                    this.RaiseDataMemberChanged("ReceivedNotes");
                    this.OnReceivedNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReceivedQuantity' value.
        /// </summary>
        [DataMember()]
        [Range(((double)(0D)), ((double)(1E+18D)), ErrorMessage="Nothing less than 0")]
        public Nullable<float> ReceivedQuantity
        {
            get
            {
                return this._receivedQuantity;
            }
            set
            {
                if ((this._receivedQuantity != value))
                {
                    this.OnReceivedQuantityChanging(value);
                    this.RaiseDataMemberChanging("ReceivedQuantity");
                    this.ValidateProperty("ReceivedQuantity", value);
                    this._receivedQuantity = value;
                    this.RaiseDataMemberChanged("ReceivedQuantity");
                    this.OnReceivedQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UOM' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string UOM
        {
            get
            {
                return this._uom;
            }
            set
            {
                if ((this._uom != value))
                {
                    this.OnUOMChanging(value);
                    this.RaiseDataMemberChanging("UOM");
                    this.ValidateProperty("UOM", value);
                    this._uom = value;
                    this.RaiseDataMemberChanged("UOM");
                    this.OnUOMChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'PODeliveredQuantity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class PODeliveredQuantity : Entity
    {
        
        private string _deliveryBatch;
        
        private int _poDetailsID;
        
        private string _poid;
        
        private double _qtyReceived;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDeliveryBatchChanging(string value);
        partial void OnDeliveryBatchChanged();
        partial void OnPODetailsIDChanging(int value);
        partial void OnPODetailsIDChanged();
        partial void OnPOIDChanging(string value);
        partial void OnPOIDChanged();
        partial void OnqtyReceivedChanging(double value);
        partial void OnqtyReceivedChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PODeliveredQuantity"/> class.
        /// </summary>
        public PODeliveredQuantity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DeliveryBatch' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string DeliveryBatch
        {
            get
            {
                return this._deliveryBatch;
            }
            set
            {
                if ((this._deliveryBatch != value))
                {
                    this.OnDeliveryBatchChanging(value);
                    this.RaiseDataMemberChanging("DeliveryBatch");
                    this.ValidateProperty("DeliveryBatch", value);
                    this._deliveryBatch = value;
                    this.RaiseDataMemberChanged("DeliveryBatch");
                    this.OnDeliveryBatchChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PODetailsID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PODetailsID
        {
            get
            {
                return this._poDetailsID;
            }
            set
            {
                if ((this._poDetailsID != value))
                {
                    this.OnPODetailsIDChanging(value);
                    this.ValidateProperty("PODetailsID", value);
                    this._poDetailsID = value;
                    this.RaisePropertyChanged("PODetailsID");
                    this.OnPODetailsIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'POID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string POID
        {
            get
            {
                return this._poid;
            }
            set
            {
                if ((this._poid != value))
                {
                    this.OnPOIDChanging(value);
                    this.ValidateProperty("POID", value);
                    this._poid = value;
                    this.RaisePropertyChanged("POID");
                    this.OnPOIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'qtyReceived' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public double qtyReceived
        {
            get
            {
                return this._qtyReceived;
            }
            set
            {
                if ((this._qtyReceived != value))
                {
                    this.OnqtyReceivedChanging(value);
                    this.ValidateProperty("qtyReceived", value);
                    this._qtyReceived = value;
                    this.RaisePropertyChanged("qtyReceived");
                    this.OnqtyReceivedChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._poid == null))
            {
                return null;
            }
            return EntityKey.Create(this._poDetailsID, this._poid, this._qtyReceived);
        }
    }
    
    /// <summary>
    /// The 'PODetail' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class PODetail : Entity
    {
        
        private string _description;
        
        private int _poDetailsID;
        
        private string _poid;
        
        private int _productID;
        
        private Nullable<decimal> _qty;
        
        private Nullable<decimal> _total;
        
        private Nullable<decimal> _unitPrice;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnPODetailsIDChanging(int value);
        partial void OnPODetailsIDChanged();
        partial void OnPOIDChanging(string value);
        partial void OnPOIDChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnqtyChanging(Nullable<decimal> value);
        partial void OnqtyChanged();
        partial void OnTotalChanging(Nullable<decimal> value);
        partial void OnTotalChanged();
        partial void OnUnitPriceChanging(Nullable<decimal> value);
        partial void OnUnitPriceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PODetail"/> class.
        /// </summary>
        public PODetail()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(512)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PODetailsID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PODetailsID
        {
            get
            {
                return this._poDetailsID;
            }
            set
            {
                if ((this._poDetailsID != value))
                {
                    this.OnPODetailsIDChanging(value);
                    this.ValidateProperty("PODetailsID", value);
                    this._poDetailsID = value;
                    this.RaisePropertyChanged("PODetailsID");
                    this.OnPODetailsIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'POID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string POID
        {
            get
            {
                return this._poid;
            }
            set
            {
                if ((this._poid != value))
                {
                    this.OnPOIDChanging(value);
                    this.RaiseDataMemberChanging("POID");
                    this.ValidateProperty("POID", value);
                    this._poid = value;
                    this.RaiseDataMemberChanged("POID");
                    this.OnPOIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.RaiseDataMemberChanging("ProductID");
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaiseDataMemberChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'qty' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> qty
        {
            get
            {
                return this._qty;
            }
            set
            {
                if ((this._qty != value))
                {
                    this.OnqtyChanging(value);
                    this.RaiseDataMemberChanging("qty");
                    this.ValidateProperty("qty", value);
                    this._qty = value;
                    this.RaiseDataMemberChanged("qty");
                    this.OnqtyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Total' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Total
        {
            get
            {
                return this._total;
            }
            set
            {
                if ((this._total != value))
                {
                    this.OnTotalChanging(value);
                    this.RaiseDataMemberChanging("Total");
                    this.ValidateProperty("Total", value);
                    this._total = value;
                    this.RaiseDataMemberChanged("Total");
                    this.OnTotalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitPrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UnitPrice
        {
            get
            {
                return this._unitPrice;
            }
            set
            {
                if ((this._unitPrice != value))
                {
                    this.OnUnitPriceChanging(value);
                    this.RaiseDataMemberChanging("UnitPrice");
                    this.ValidateProperty("UnitPrice", value);
                    this._unitPrice = value;
                    this.RaiseDataMemberChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._poDetailsID;
        }
    }
    
    /// <summary>
    /// The 'PODetailsView' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class PODetailsView : Entity
    {
        
        private Nullable<double> _convertedTotal;
        
        private Nullable<double> _convertedUnitPrice;
        
        private string _currency;
        
        private int _poDetailsID;
        
        private string _poid;
        
        private int _productID;
        
        private string _productName;
        
        private Nullable<decimal> _qty;
        
        private Nullable<decimal> _total;
        
        private Nullable<decimal> _unitPrice;
        
        private string _uom;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnConvertedTotalChanging(Nullable<double> value);
        partial void OnConvertedTotalChanged();
        partial void OnConvertedUnitPriceChanging(Nullable<double> value);
        partial void OnConvertedUnitPriceChanged();
        partial void OnCurrencyChanging(string value);
        partial void OnCurrencyChanged();
        partial void OnPODetailsIDChanging(int value);
        partial void OnPODetailsIDChanged();
        partial void OnPOIDChanging(string value);
        partial void OnPOIDChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnqtyChanging(Nullable<decimal> value);
        partial void OnqtyChanged();
        partial void OnTotalChanging(Nullable<decimal> value);
        partial void OnTotalChanged();
        partial void OnUnitPriceChanging(Nullable<decimal> value);
        partial void OnUnitPriceChanged();
        partial void OnUomChanging(string value);
        partial void OnUomChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PODetailsView"/> class.
        /// </summary>
        public PODetailsView()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ConvertedTotal' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ConvertedTotal
        {
            get
            {
                return this._convertedTotal;
            }
            set
            {
                if ((this._convertedTotal != value))
                {
                    this.OnConvertedTotalChanging(value);
                    this.RaiseDataMemberChanging("ConvertedTotal");
                    this.ValidateProperty("ConvertedTotal", value);
                    this._convertedTotal = value;
                    this.RaiseDataMemberChanged("ConvertedTotal");
                    this.OnConvertedTotalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConvertedUnitPrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ConvertedUnitPrice
        {
            get
            {
                return this._convertedUnitPrice;
            }
            set
            {
                if ((this._convertedUnitPrice != value))
                {
                    this.OnConvertedUnitPriceChanging(value);
                    this.RaiseDataMemberChanging("ConvertedUnitPrice");
                    this.ValidateProperty("ConvertedUnitPrice", value);
                    this._convertedUnitPrice = value;
                    this.RaiseDataMemberChanged("ConvertedUnitPrice");
                    this.OnConvertedUnitPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Currency' value.
        /// </summary>
        [DataMember()]
        [StringLength(3)]
        public string Currency
        {
            get
            {
                return this._currency;
            }
            set
            {
                if ((this._currency != value))
                {
                    this.OnCurrencyChanging(value);
                    this.RaiseDataMemberChanging("Currency");
                    this.ValidateProperty("Currency", value);
                    this._currency = value;
                    this.RaiseDataMemberChanged("Currency");
                    this.OnCurrencyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PODetailsID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PODetailsID
        {
            get
            {
                return this._poDetailsID;
            }
            set
            {
                if ((this._poDetailsID != value))
                {
                    this.OnPODetailsIDChanging(value);
                    this.ValidateProperty("PODetailsID", value);
                    this._poDetailsID = value;
                    this.RaisePropertyChanged("PODetailsID");
                    this.OnPODetailsIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'POID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string POID
        {
            get
            {
                return this._poid;
            }
            set
            {
                if ((this._poid != value))
                {
                    this.OnPOIDChanging(value);
                    this.ValidateProperty("POID", value);
                    this._poid = value;
                    this.RaisePropertyChanged("POID");
                    this.OnPOIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaisePropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductName' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string ProductName
        {
            get
            {
                return this._productName;
            }
            set
            {
                if ((this._productName != value))
                {
                    this.OnProductNameChanging(value);
                    this.RaiseDataMemberChanging("ProductName");
                    this.ValidateProperty("ProductName", value);
                    this._productName = value;
                    this.RaiseDataMemberChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'qty' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> qty
        {
            get
            {
                return this._qty;
            }
            set
            {
                if ((this._qty != value))
                {
                    this.OnqtyChanging(value);
                    this.RaiseDataMemberChanging("qty");
                    this.ValidateProperty("qty", value);
                    this._qty = value;
                    this.RaiseDataMemberChanged("qty");
                    this.OnqtyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Total' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Total
        {
            get
            {
                return this._total;
            }
            set
            {
                if ((this._total != value))
                {
                    this.OnTotalChanging(value);
                    this.RaiseDataMemberChanging("Total");
                    this.ValidateProperty("Total", value);
                    this._total = value;
                    this.RaiseDataMemberChanged("Total");
                    this.OnTotalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitPrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UnitPrice
        {
            get
            {
                return this._unitPrice;
            }
            set
            {
                if ((this._unitPrice != value))
                {
                    this.OnUnitPriceChanging(value);
                    this.RaiseDataMemberChanging("UnitPrice");
                    this.ValidateProperty("UnitPrice", value);
                    this._unitPrice = value;
                    this.RaiseDataMemberChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Uom' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Uom
        {
            get
            {
                return this._uom;
            }
            set
            {
                if ((this._uom != value))
                {
                    this.OnUomChanging(value);
                    this.RaiseDataMemberChanging("Uom");
                    this.ValidateProperty("Uom", value);
                    this._uom = value;
                    this.RaiseDataMemberChanged("Uom");
                    this.OnUomChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._poid == null))
            {
                return null;
            }
            return EntityKey.Create(this._poDetailsID, this._poid, this._productID);
        }
    }
    
    /// <summary>
    /// The 'Pond' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class Pond : Entity
    {
        
        private string _pondDescription;
        
        private int _pondID;
        
        private string _pondLocation;
        
        private Nullable<int> _pondSize;
        
        private string _pondUOM;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnPondDescriptionChanging(string value);
        partial void OnPondDescriptionChanged();
        partial void OnPondIDChanging(int value);
        partial void OnPondIDChanged();
        partial void OnPondLocationChanging(string value);
        partial void OnPondLocationChanged();
        partial void OnpondSizeChanging(Nullable<int> value);
        partial void OnpondSizeChanged();
        partial void OnpondUOMChanging(string value);
        partial void OnpondUOMChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Pond"/> class.
        /// </summary>
        public Pond()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'PondDescription' value.
        /// </summary>
        [DataMember()]
        public string PondDescription
        {
            get
            {
                return this._pondDescription;
            }
            set
            {
                if ((this._pondDescription != value))
                {
                    this.OnPondDescriptionChanging(value);
                    this.RaiseDataMemberChanging("PondDescription");
                    this.ValidateProperty("PondDescription", value);
                    this._pondDescription = value;
                    this.RaiseDataMemberChanged("PondDescription");
                    this.OnPondDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PondID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PondID
        {
            get
            {
                return this._pondID;
            }
            set
            {
                if ((this._pondID != value))
                {
                    this.OnPondIDChanging(value);
                    this.ValidateProperty("PondID", value);
                    this._pondID = value;
                    this.RaisePropertyChanged("PondID");
                    this.OnPondIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PondLocation' value.
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string PondLocation
        {
            get
            {
                return this._pondLocation;
            }
            set
            {
                if ((this._pondLocation != value))
                {
                    this.OnPondLocationChanging(value);
                    this.RaiseDataMemberChanging("PondLocation");
                    this.ValidateProperty("PondLocation", value);
                    this._pondLocation = value;
                    this.RaiseDataMemberChanged("PondLocation");
                    this.OnPondLocationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'pondSize' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> pondSize
        {
            get
            {
                return this._pondSize;
            }
            set
            {
                if ((this._pondSize != value))
                {
                    this.OnpondSizeChanging(value);
                    this.RaiseDataMemberChanging("pondSize");
                    this.ValidateProperty("pondSize", value);
                    this._pondSize = value;
                    this.RaiseDataMemberChanged("pondSize");
                    this.OnpondSizeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'pondUOM' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string pondUOM
        {
            get
            {
                return this._pondUOM;
            }
            set
            {
                if ((this._pondUOM != value))
                {
                    this.OnpondUOMChanging(value);
                    this.RaiseDataMemberChanging("pondUOM");
                    this.ValidateProperty("pondUOM", value);
                    this._pondUOM = value;
                    this.RaiseDataMemberChanged("pondUOM");
                    this.OnpondUOMChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._pondID;
        }
    }
    
    /// <summary>
    /// The 'PondConsumptionsLog' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class PondConsumptionsLog : Entity
    {
        
        private Nullable<int> _batchDetailID;
        
        private Nullable<int> _batchHeaderID;
        
        private Nullable<double> _buyPrice;
        
        private string _consumptionsBatchID;
        
        private Nullable<DateTime> _logDate;
        
        private int _logID;
        
        private string _note;
        
        private Nullable<int> _pondID;
        
        private Nullable<int> _productGroupID;
        
        private int _productID;
        
        private Nullable<int> _productionCycleID;
        
        private double _qty;
        
        private string _uom;
        
        private string _userId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBatchDetailIDChanging(Nullable<int> value);
        partial void OnBatchDetailIDChanged();
        partial void OnBatchHeaderIDChanging(Nullable<int> value);
        partial void OnBatchHeaderIDChanged();
        partial void OnBuyPriceChanging(Nullable<double> value);
        partial void OnBuyPriceChanged();
        partial void OnConsumptionsBatchIDChanging(string value);
        partial void OnConsumptionsBatchIDChanged();
        partial void OnLogDateChanging(Nullable<DateTime> value);
        partial void OnLogDateChanged();
        partial void OnLogIDChanging(int value);
        partial void OnLogIDChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnPondIDChanging(Nullable<int> value);
        partial void OnPondIDChanged();
        partial void OnProductGroupIDChanging(Nullable<int> value);
        partial void OnProductGroupIDChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductionCycleIDChanging(Nullable<int> value);
        partial void OnProductionCycleIDChanged();
        partial void OnQtyChanging(double value);
        partial void OnQtyChanged();
        partial void OnUOMChanging(string value);
        partial void OnUOMChanged();
        partial void OnuserIdChanging(string value);
        partial void OnuserIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PondConsumptionsLog"/> class.
        /// </summary>
        public PondConsumptionsLog()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BatchDetailID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> BatchDetailID
        {
            get
            {
                return this._batchDetailID;
            }
            set
            {
                if ((this._batchDetailID != value))
                {
                    this.OnBatchDetailIDChanging(value);
                    this.RaiseDataMemberChanging("BatchDetailID");
                    this.ValidateProperty("BatchDetailID", value);
                    this._batchDetailID = value;
                    this.RaiseDataMemberChanged("BatchDetailID");
                    this.OnBatchDetailIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BatchHeaderID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> BatchHeaderID
        {
            get
            {
                return this._batchHeaderID;
            }
            set
            {
                if ((this._batchHeaderID != value))
                {
                    this.OnBatchHeaderIDChanging(value);
                    this.RaiseDataMemberChanging("BatchHeaderID");
                    this.ValidateProperty("BatchHeaderID", value);
                    this._batchHeaderID = value;
                    this.RaiseDataMemberChanged("BatchHeaderID");
                    this.OnBatchHeaderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'BuyPrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> BuyPrice
        {
            get
            {
                return this._buyPrice;
            }
            set
            {
                if ((this._buyPrice != value))
                {
                    this.OnBuyPriceChanging(value);
                    this.RaiseDataMemberChanging("BuyPrice");
                    this.ValidateProperty("BuyPrice", value);
                    this._buyPrice = value;
                    this.RaiseDataMemberChanged("BuyPrice");
                    this.OnBuyPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ConsumptionsBatchID' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ConsumptionsBatchID
        {
            get
            {
                return this._consumptionsBatchID;
            }
            set
            {
                if ((this._consumptionsBatchID != value))
                {
                    this.OnConsumptionsBatchIDChanging(value);
                    this.RaiseDataMemberChanging("ConsumptionsBatchID");
                    this.ValidateProperty("ConsumptionsBatchID", value);
                    this._consumptionsBatchID = value;
                    this.RaiseDataMemberChanged("ConsumptionsBatchID");
                    this.OnConsumptionsBatchIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LogDate' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public Nullable<DateTime> LogDate
        {
            get
            {
                return this._logDate;
            }
            set
            {
                if ((this._logDate != value))
                {
                    this.OnLogDateChanging(value);
                    this.RaiseDataMemberChanging("LogDate");
                    this.ValidateProperty("LogDate", value);
                    this._logDate = value;
                    this.RaiseDataMemberChanged("LogDate");
                    this.OnLogDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LogID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int LogID
        {
            get
            {
                return this._logID;
            }
            set
            {
                if ((this._logID != value))
                {
                    this.OnLogIDChanging(value);
                    this.ValidateProperty("LogID", value);
                    this._logID = value;
                    this.RaisePropertyChanged("LogID");
                    this.OnLogIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Note' value.
        /// </summary>
        [DataMember()]
        public string Note
        {
            get
            {
                return this._note;
            }
            set
            {
                if ((this._note != value))
                {
                    this.OnNoteChanging(value);
                    this.RaiseDataMemberChanging("Note");
                    this.ValidateProperty("Note", value);
                    this._note = value;
                    this.RaiseDataMemberChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PondID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> PondID
        {
            get
            {
                return this._pondID;
            }
            set
            {
                if ((this._pondID != value))
                {
                    this.OnPondIDChanging(value);
                    this.RaiseDataMemberChanging("PondID");
                    this.ValidateProperty("PondID", value);
                    this._pondID = value;
                    this.RaiseDataMemberChanged("PondID");
                    this.OnPondIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductGroupID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ProductGroupID
        {
            get
            {
                return this._productGroupID;
            }
            set
            {
                if ((this._productGroupID != value))
                {
                    this.OnProductGroupIDChanging(value);
                    this.RaiseDataMemberChanging("ProductGroupID");
                    this.ValidateProperty("ProductGroupID", value);
                    this._productGroupID = value;
                    this.RaiseDataMemberChanged("ProductGroupID");
                    this.OnProductGroupIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.RaiseDataMemberChanging("ProductID");
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaiseDataMemberChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductionCycleID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ProductionCycleID
        {
            get
            {
                return this._productionCycleID;
            }
            set
            {
                if ((this._productionCycleID != value))
                {
                    this.OnProductionCycleIDChanging(value);
                    this.RaiseDataMemberChanging("ProductionCycleID");
                    this.ValidateProperty("ProductionCycleID", value);
                    this._productionCycleID = value;
                    this.RaiseDataMemberChanged("ProductionCycleID");
                    this.OnProductionCycleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Qty' value.
        /// </summary>
        [DataMember()]
        public double Qty
        {
            get
            {
                return this._qty;
            }
            set
            {
                if ((this._qty != value))
                {
                    this.OnQtyChanging(value);
                    this.RaiseDataMemberChanging("Qty");
                    this.ValidateProperty("Qty", value);
                    this._qty = value;
                    this.RaiseDataMemberChanged("Qty");
                    this.OnQtyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UOM' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string UOM
        {
            get
            {
                return this._uom;
            }
            set
            {
                if ((this._uom != value))
                {
                    this.OnUOMChanging(value);
                    this.RaiseDataMemberChanging("UOM");
                    this.ValidateProperty("UOM", value);
                    this._uom = value;
                    this.RaiseDataMemberChanged("UOM");
                    this.OnUOMChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'userId' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string userId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnuserIdChanging(value);
                    this.RaiseDataMemberChanging("userId");
                    this.ValidateProperty("userId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("userId");
                    this.OnuserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._logID;
        }
    }
    
    /// <summary>
    /// The 'PondsProductionCycle' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class PondsProductionCycle : Entity
    {
        
        private Nullable<double> _density;
        
        private Nullable<DateTime> _endDate;
        
        private string _fryOrigin;
        
        private Nullable<bool> _isInProduction;
        
        private string _note;
        
        private Nullable<int> _numberOfFry;
        
        private int _pondID;
        
        private int _productionCycleID;
        
        private Nullable<DateTime> _startDate;
        
        private Nullable<int> _technician;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDensityChanging(Nullable<double> value);
        partial void OnDensityChanged();
        partial void OnEndDateChanging(Nullable<DateTime> value);
        partial void OnEndDateChanged();
        partial void OnFryOriginChanging(string value);
        partial void OnFryOriginChanged();
        partial void OnisInProductionChanging(Nullable<bool> value);
        partial void OnisInProductionChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnNumberOfFryChanging(Nullable<int> value);
        partial void OnNumberOfFryChanged();
        partial void OnPondIDChanging(int value);
        partial void OnPondIDChanged();
        partial void OnProductionCycleIDChanging(int value);
        partial void OnProductionCycleIDChanged();
        partial void OnStartDateChanging(Nullable<DateTime> value);
        partial void OnStartDateChanged();
        partial void OnTechnicianChanging(Nullable<int> value);
        partial void OnTechnicianChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PondsProductionCycle"/> class.
        /// </summary>
        public PondsProductionCycle()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Density' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Density
        {
            get
            {
                return this._density;
            }
            set
            {
                if ((this._density != value))
                {
                    this.OnDensityChanging(value);
                    this.RaiseDataMemberChanging("Density");
                    this.ValidateProperty("Density", value);
                    this._density = value;
                    this.RaiseDataMemberChanged("Density");
                    this.OnDensityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> EndDate
        {
            get
            {
                return this._endDate;
            }
            set
            {
                if ((this._endDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.RaiseDataMemberChanging("EndDate");
                    this.ValidateProperty("EndDate", value);
                    this._endDate = value;
                    this.RaiseDataMemberChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FryOrigin' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string FryOrigin
        {
            get
            {
                return this._fryOrigin;
            }
            set
            {
                if ((this._fryOrigin != value))
                {
                    this.OnFryOriginChanging(value);
                    this.RaiseDataMemberChanging("FryOrigin");
                    this.ValidateProperty("FryOrigin", value);
                    this._fryOrigin = value;
                    this.RaiseDataMemberChanged("FryOrigin");
                    this.OnFryOriginChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isInProduction' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> isInProduction
        {
            get
            {
                return this._isInProduction;
            }
            set
            {
                if ((this._isInProduction != value))
                {
                    this.OnisInProductionChanging(value);
                    this.RaiseDataMemberChanging("isInProduction");
                    this.ValidateProperty("isInProduction", value);
                    this._isInProduction = value;
                    this.RaiseDataMemberChanged("isInProduction");
                    this.OnisInProductionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Note' value.
        /// </summary>
        [DataMember()]
        public string Note
        {
            get
            {
                return this._note;
            }
            set
            {
                if ((this._note != value))
                {
                    this.OnNoteChanging(value);
                    this.RaiseDataMemberChanging("Note");
                    this.ValidateProperty("Note", value);
                    this._note = value;
                    this.RaiseDataMemberChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NumberOfFry' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> NumberOfFry
        {
            get
            {
                return this._numberOfFry;
            }
            set
            {
                if ((this._numberOfFry != value))
                {
                    this.OnNumberOfFryChanging(value);
                    this.RaiseDataMemberChanging("NumberOfFry");
                    this.ValidateProperty("NumberOfFry", value);
                    this._numberOfFry = value;
                    this.RaiseDataMemberChanged("NumberOfFry");
                    this.OnNumberOfFryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PondID' value.
        /// </summary>
        [DataMember()]
        public int PondID
        {
            get
            {
                return this._pondID;
            }
            set
            {
                if ((this._pondID != value))
                {
                    this.OnPondIDChanging(value);
                    this.RaiseDataMemberChanging("PondID");
                    this.ValidateProperty("PondID", value);
                    this._pondID = value;
                    this.RaiseDataMemberChanged("PondID");
                    this.OnPondIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductionCycleID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductionCycleID
        {
            get
            {
                return this._productionCycleID;
            }
            set
            {
                if ((this._productionCycleID != value))
                {
                    this.OnProductionCycleIDChanging(value);
                    this.ValidateProperty("ProductionCycleID", value);
                    this._productionCycleID = value;
                    this.RaisePropertyChanged("ProductionCycleID");
                    this.OnProductionCycleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> StartDate
        {
            get
            {
                return this._startDate;
            }
            set
            {
                if ((this._startDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.RaiseDataMemberChanging("StartDate");
                    this.ValidateProperty("StartDate", value);
                    this._startDate = value;
                    this.RaiseDataMemberChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Technician' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> Technician
        {
            get
            {
                return this._technician;
            }
            set
            {
                if ((this._technician != value))
                {
                    this.OnTechnicianChanging(value);
                    this.RaiseDataMemberChanging("Technician");
                    this.ValidateProperty("Technician", value);
                    this._technician = value;
                    this.RaiseDataMemberChanged("Technician");
                    this.OnTechnicianChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productionCycleID;
        }
    }
    
    /// <summary>
    /// The 'Product' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class Product : Entity
    {
        
        private Nullable<int> _category;
        
        private Nullable<bool> _isFinishedProduct;
        
        private string _product_Description;
        
        private int _productID;
        
        private string _productName;
        
        private Nullable<decimal> _purchasePrice;
        
        private Nullable<decimal> _qtyperunit;
        
        private Nullable<decimal> _reorderLevel;
        
        private Nullable<decimal> _salePrice;
        
        private string _sku;
        
        private Nullable<decimal> _unitInOrder;
        
        private Nullable<decimal> _unitInStock;
        
        private string _uom;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryChanging(Nullable<int> value);
        partial void OnCategoryChanged();
        partial void OnIsFinishedProductChanging(Nullable<bool> value);
        partial void OnIsFinishedProductChanged();
        partial void OnProduct_DescriptionChanging(string value);
        partial void OnProduct_DescriptionChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnPurchasePriceChanging(Nullable<decimal> value);
        partial void OnPurchasePriceChanged();
        partial void OnqtyperunitChanging(Nullable<decimal> value);
        partial void OnqtyperunitChanged();
        partial void OnReorderLevelChanging(Nullable<decimal> value);
        partial void OnReorderLevelChanged();
        partial void OnSalePriceChanging(Nullable<decimal> value);
        partial void OnSalePriceChanged();
        partial void OnSKUChanging(string value);
        partial void OnSKUChanged();
        partial void OnUnitInOrderChanging(Nullable<decimal> value);
        partial void OnUnitInOrderChanged();
        partial void OnUnitInStockChanging(Nullable<decimal> value);
        partial void OnUnitInStockChanged();
        partial void OnUomChanging(string value);
        partial void OnUomChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Product"/> class.
        /// </summary>
        public Product()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Category' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    this.OnCategoryChanging(value);
                    this.RaiseDataMemberChanging("Category");
                    this.ValidateProperty("Category", value);
                    this._category = value;
                    this.RaiseDataMemberChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsFinishedProduct' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsFinishedProduct
        {
            get
            {
                return this._isFinishedProduct;
            }
            set
            {
                if ((this._isFinishedProduct != value))
                {
                    this.OnIsFinishedProductChanging(value);
                    this.RaiseDataMemberChanging("IsFinishedProduct");
                    this.ValidateProperty("IsFinishedProduct", value);
                    this._isFinishedProduct = value;
                    this.RaiseDataMemberChanged("IsFinishedProduct");
                    this.OnIsFinishedProductChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Product_Description' value.
        /// </summary>
        [DataMember()]
        public string Product_Description
        {
            get
            {
                return this._product_Description;
            }
            set
            {
                if ((this._product_Description != value))
                {
                    this.OnProduct_DescriptionChanging(value);
                    this.RaiseDataMemberChanging("Product_Description");
                    this.ValidateProperty("Product_Description", value);
                    this._product_Description = value;
                    this.RaiseDataMemberChanged("Product_Description");
                    this.OnProduct_DescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaisePropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductName' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string ProductName
        {
            get
            {
                return this._productName;
            }
            set
            {
                if ((this._productName != value))
                {
                    this.OnProductNameChanging(value);
                    this.RaiseDataMemberChanging("ProductName");
                    this.ValidateProperty("ProductName", value);
                    this._productName = value;
                    this.RaiseDataMemberChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurchasePrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PurchasePrice
        {
            get
            {
                return this._purchasePrice;
            }
            set
            {
                if ((this._purchasePrice != value))
                {
                    this.OnPurchasePriceChanging(value);
                    this.RaiseDataMemberChanging("PurchasePrice");
                    this.ValidateProperty("PurchasePrice", value);
                    this._purchasePrice = value;
                    this.RaiseDataMemberChanged("PurchasePrice");
                    this.OnPurchasePriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'qtyperunit' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> qtyperunit
        {
            get
            {
                return this._qtyperunit;
            }
            set
            {
                if ((this._qtyperunit != value))
                {
                    this.OnqtyperunitChanging(value);
                    this.RaiseDataMemberChanging("qtyperunit");
                    this.ValidateProperty("qtyperunit", value);
                    this._qtyperunit = value;
                    this.RaiseDataMemberChanged("qtyperunit");
                    this.OnqtyperunitChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReorderLevel' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> ReorderLevel
        {
            get
            {
                return this._reorderLevel;
            }
            set
            {
                if ((this._reorderLevel != value))
                {
                    this.OnReorderLevelChanging(value);
                    this.RaiseDataMemberChanging("ReorderLevel");
                    this.ValidateProperty("ReorderLevel", value);
                    this._reorderLevel = value;
                    this.RaiseDataMemberChanged("ReorderLevel");
                    this.OnReorderLevelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalePrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SalePrice
        {
            get
            {
                return this._salePrice;
            }
            set
            {
                if ((this._salePrice != value))
                {
                    this.OnSalePriceChanging(value);
                    this.RaiseDataMemberChanging("SalePrice");
                    this.ValidateProperty("SalePrice", value);
                    this._salePrice = value;
                    this.RaiseDataMemberChanged("SalePrice");
                    this.OnSalePriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SKU' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string SKU
        {
            get
            {
                return this._sku;
            }
            set
            {
                if ((this._sku != value))
                {
                    this.OnSKUChanging(value);
                    this.RaiseDataMemberChanging("SKU");
                    this.ValidateProperty("SKU", value);
                    this._sku = value;
                    this.RaiseDataMemberChanged("SKU");
                    this.OnSKUChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitInOrder' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UnitInOrder
        {
            get
            {
                return this._unitInOrder;
            }
            set
            {
                if ((this._unitInOrder != value))
                {
                    this.OnUnitInOrderChanging(value);
                    this.RaiseDataMemberChanging("UnitInOrder");
                    this.ValidateProperty("UnitInOrder", value);
                    this._unitInOrder = value;
                    this.RaiseDataMemberChanged("UnitInOrder");
                    this.OnUnitInOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitInStock' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UnitInStock
        {
            get
            {
                return this._unitInStock;
            }
            set
            {
                if ((this._unitInStock != value))
                {
                    this.OnUnitInStockChanging(value);
                    this.RaiseDataMemberChanging("UnitInStock");
                    this.ValidateProperty("UnitInStock", value);
                    this._unitInStock = value;
                    this.RaiseDataMemberChanged("UnitInStock");
                    this.OnUnitInStockChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Uom' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Uom
        {
            get
            {
                return this._uom;
            }
            set
            {
                if ((this._uom != value))
                {
                    this.OnUomChanging(value);
                    this.RaiseDataMemberChanging("Uom");
                    this.ValidateProperty("Uom", value);
                    this._uom = value;
                    this.RaiseDataMemberChanged("Uom");
                    this.OnUomChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productID;
        }
    }
    
    /// <summary>
    /// The 'ProductionCycleCostDetailView' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class ProductionCycleCostDetailView : Entity
    {
        
        private int _batchTrxID;
        
        private string _categoryName;
        
        private Nullable<double> _cost;
        
        private Nullable<int> _productionCycleID;
        
        private string _productName;
        
        private Nullable<DateTime> _trxDate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBatchTrxIDChanging(int value);
        partial void OnBatchTrxIDChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnCostChanging(Nullable<double> value);
        partial void OnCostChanged();
        partial void OnProductionCycleIDChanging(Nullable<int> value);
        partial void OnProductionCycleIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnTrxDateChanging(Nullable<DateTime> value);
        partial void OnTrxDateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionCycleCostDetailView"/> class.
        /// </summary>
        public ProductionCycleCostDetailView()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BatchTrxID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int BatchTrxID
        {
            get
            {
                return this._batchTrxID;
            }
            set
            {
                if ((this._batchTrxID != value))
                {
                    this.OnBatchTrxIDChanging(value);
                    this.ValidateProperty("BatchTrxID", value);
                    this._batchTrxID = value;
                    this.RaisePropertyChanged("BatchTrxID");
                    this.OnBatchTrxIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryName' value.
        /// </summary>
        [DataMember()]
        [StringLength(512)]
        public string CategoryName
        {
            get
            {
                return this._categoryName;
            }
            set
            {
                if ((this._categoryName != value))
                {
                    this.OnCategoryNameChanging(value);
                    this.RaiseDataMemberChanging("CategoryName");
                    this.ValidateProperty("CategoryName", value);
                    this._categoryName = value;
                    this.RaiseDataMemberChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Cost' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Cost
        {
            get
            {
                return this._cost;
            }
            set
            {
                if ((this._cost != value))
                {
                    this.OnCostChanging(value);
                    this.RaiseDataMemberChanging("Cost");
                    this.ValidateProperty("Cost", value);
                    this._cost = value;
                    this.RaiseDataMemberChanged("Cost");
                    this.OnCostChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductionCycleID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ProductionCycleID
        {
            get
            {
                return this._productionCycleID;
            }
            set
            {
                if ((this._productionCycleID != value))
                {
                    this.OnProductionCycleIDChanging(value);
                    this.RaiseDataMemberChanging("ProductionCycleID");
                    this.ValidateProperty("ProductionCycleID", value);
                    this._productionCycleID = value;
                    this.RaiseDataMemberChanged("ProductionCycleID");
                    this.OnProductionCycleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductName' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string ProductName
        {
            get
            {
                return this._productName;
            }
            set
            {
                if ((this._productName != value))
                {
                    this.OnProductNameChanging(value);
                    this.RaiseDataMemberChanging("ProductName");
                    this.ValidateProperty("ProductName", value);
                    this._productName = value;
                    this.RaiseDataMemberChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TrxDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> TrxDate
        {
            get
            {
                return this._trxDate;
            }
            set
            {
                if ((this._trxDate != value))
                {
                    this.OnTrxDateChanging(value);
                    this.RaiseDataMemberChanging("TrxDate");
                    this.ValidateProperty("TrxDate", value);
                    this._trxDate = value;
                    this.RaiseDataMemberChanged("TrxDate");
                    this.OnTrxDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._batchTrxID;
        }
    }
    
    /// <summary>
    /// The 'ProductPurchaseLog' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class ProductPurchaseLog : Entity
    {
        
        private string _batchID;
        
        private string _currency;
        
        private Nullable<DateTime> _date;
        
        private Nullable<DateTime> _expireDate;
        
        private Nullable<bool> _isDelivered;
        
        private Nullable<bool> _isSynchronized;
        
        private string _location;
        
        private int _productID;
        
        private int _purchaseLogID;
        
        private Nullable<decimal> _purchasePrice;
        
        private Nullable<int> _quantity;
        
        private string _requester;
        
        private Nullable<decimal> _shipping;
        
        private Nullable<decimal> _tax;
        
        private Nullable<decimal> _total;
        
        private string _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnbatchIDChanging(string value);
        partial void OnbatchIDChanged();
        partial void OnCurrencyChanging(string value);
        partial void OnCurrencyChanged();
        partial void OnDateChanging(Nullable<DateTime> value);
        partial void OnDateChanged();
        partial void OnExpireDateChanging(Nullable<DateTime> value);
        partial void OnExpireDateChanged();
        partial void OnisDeliveredChanging(Nullable<bool> value);
        partial void OnisDeliveredChanged();
        partial void OnisSynchronizedChanging(Nullable<bool> value);
        partial void OnisSynchronizedChanged();
        partial void OnlocationChanging(string value);
        partial void OnlocationChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnPurchaseLogIDChanging(int value);
        partial void OnPurchaseLogIDChanged();
        partial void OnPurchasePriceChanging(Nullable<decimal> value);
        partial void OnPurchasePriceChanged();
        partial void OnQuantityChanging(Nullable<int> value);
        partial void OnQuantityChanged();
        partial void OnRequesterChanging(string value);
        partial void OnRequesterChanged();
        partial void OnShippingChanging(Nullable<decimal> value);
        partial void OnShippingChanged();
        partial void OntaxChanging(Nullable<decimal> value);
        partial void OntaxChanged();
        partial void OnTotalChanging(Nullable<decimal> value);
        partial void OnTotalChanged();
        partial void OnuserIDChanging(string value);
        partial void OnuserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductPurchaseLog"/> class.
        /// </summary>
        public ProductPurchaseLog()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'batchID' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string batchID
        {
            get
            {
                return this._batchID;
            }
            set
            {
                if ((this._batchID != value))
                {
                    this.OnbatchIDChanging(value);
                    this.RaiseDataMemberChanging("batchID");
                    this.ValidateProperty("batchID", value);
                    this._batchID = value;
                    this.RaiseDataMemberChanged("batchID");
                    this.OnbatchIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Currency' value.
        /// </summary>
        [DataMember()]
        [StringLength(3)]
        public string Currency
        {
            get
            {
                return this._currency;
            }
            set
            {
                if ((this._currency != value))
                {
                    this.OnCurrencyChanging(value);
                    this.RaiseDataMemberChanging("Currency");
                    this.ValidateProperty("Currency", value);
                    this._currency = value;
                    this.RaiseDataMemberChanged("Currency");
                    this.OnCurrencyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExpireDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ExpireDate
        {
            get
            {
                return this._expireDate;
            }
            set
            {
                if ((this._expireDate != value))
                {
                    this.OnExpireDateChanging(value);
                    this.RaiseDataMemberChanging("ExpireDate");
                    this.ValidateProperty("ExpireDate", value);
                    this._expireDate = value;
                    this.RaiseDataMemberChanged("ExpireDate");
                    this.OnExpireDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isDelivered' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> isDelivered
        {
            get
            {
                return this._isDelivered;
            }
            set
            {
                if ((this._isDelivered != value))
                {
                    this.OnisDeliveredChanging(value);
                    this.RaiseDataMemberChanging("isDelivered");
                    this.ValidateProperty("isDelivered", value);
                    this._isDelivered = value;
                    this.RaiseDataMemberChanged("isDelivered");
                    this.OnisDeliveredChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isSynchronized' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> isSynchronized
        {
            get
            {
                return this._isSynchronized;
            }
            set
            {
                if ((this._isSynchronized != value))
                {
                    this.OnisSynchronizedChanging(value);
                    this.RaiseDataMemberChanging("isSynchronized");
                    this.ValidateProperty("isSynchronized", value);
                    this._isSynchronized = value;
                    this.RaiseDataMemberChanged("isSynchronized");
                    this.OnisSynchronizedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'location' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    this.OnlocationChanging(value);
                    this.RaiseDataMemberChanging("location");
                    this.ValidateProperty("location", value);
                    this._location = value;
                    this.RaiseDataMemberChanged("location");
                    this.OnlocationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.RaiseDataMemberChanging("ProductID");
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaiseDataMemberChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurchaseLogID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PurchaseLogID
        {
            get
            {
                return this._purchaseLogID;
            }
            set
            {
                if ((this._purchaseLogID != value))
                {
                    this.OnPurchaseLogIDChanging(value);
                    this.ValidateProperty("PurchaseLogID", value);
                    this._purchaseLogID = value;
                    this.RaisePropertyChanged("PurchaseLogID");
                    this.OnPurchaseLogIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PurchasePrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> PurchasePrice
        {
            get
            {
                return this._purchasePrice;
            }
            set
            {
                if ((this._purchasePrice != value))
                {
                    this.OnPurchasePriceChanging(value);
                    this.RaiseDataMemberChanging("PurchasePrice");
                    this.ValidateProperty("PurchasePrice", value);
                    this._purchasePrice = value;
                    this.RaiseDataMemberChanged("PurchasePrice");
                    this.OnPurchasePriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Quantity' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    this.OnQuantityChanging(value);
                    this.RaiseDataMemberChanging("Quantity");
                    this.ValidateProperty("Quantity", value);
                    this._quantity = value;
                    this.RaiseDataMemberChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Requester' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Requester
        {
            get
            {
                return this._requester;
            }
            set
            {
                if ((this._requester != value))
                {
                    this.OnRequesterChanging(value);
                    this.RaiseDataMemberChanging("Requester");
                    this.ValidateProperty("Requester", value);
                    this._requester = value;
                    this.RaiseDataMemberChanged("Requester");
                    this.OnRequesterChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Shipping' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Shipping
        {
            get
            {
                return this._shipping;
            }
            set
            {
                if ((this._shipping != value))
                {
                    this.OnShippingChanging(value);
                    this.RaiseDataMemberChanging("Shipping");
                    this.ValidateProperty("Shipping", value);
                    this._shipping = value;
                    this.RaiseDataMemberChanged("Shipping");
                    this.OnShippingChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'tax' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> tax
        {
            get
            {
                return this._tax;
            }
            set
            {
                if ((this._tax != value))
                {
                    this.OntaxChanging(value);
                    this.RaiseDataMemberChanging("tax");
                    this.ValidateProperty("tax", value);
                    this._tax = value;
                    this.RaiseDataMemberChanged("tax");
                    this.OntaxChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Total' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Total
        {
            get
            {
                return this._total;
            }
            set
            {
                if ((this._total != value))
                {
                    this.OnTotalChanging(value);
                    this.RaiseDataMemberChanging("Total");
                    this.ValidateProperty("Total", value);
                    this._total = value;
                    this.RaiseDataMemberChanged("Total");
                    this.OnTotalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'userID' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string userID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnuserIDChanging(value);
                    this.RaiseDataMemberChanging("userID");
                    this.ValidateProperty("userID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("userID");
                    this.OnuserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._purchaseLogID;
        }
    }
    
    /// <summary>
    /// The 'ProductRequired' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class ProductRequired : Entity
    {
        
        private Nullable<decimal> _amount;
        
        private Nullable<int> _productID;
        
        private int _requirementID;
        
        private Nullable<int> _taskID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAmountChanging(Nullable<decimal> value);
        partial void OnAmountChanged();
        partial void OnProductIDChanging(Nullable<int> value);
        partial void OnProductIDChanged();
        partial void OnRequirementIDChanging(int value);
        partial void OnRequirementIDChanged();
        partial void OnTaskIDChanging(Nullable<int> value);
        partial void OnTaskIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductRequired"/> class.
        /// </summary>
        public ProductRequired()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Amount' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    this.OnAmountChanging(value);
                    this.RaiseDataMemberChanging("Amount");
                    this.ValidateProperty("Amount", value);
                    this._amount = value;
                    this.RaiseDataMemberChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.RaiseDataMemberChanging("ProductID");
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaiseDataMemberChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RequirementID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int RequirementID
        {
            get
            {
                return this._requirementID;
            }
            set
            {
                if ((this._requirementID != value))
                {
                    this.OnRequirementIDChanging(value);
                    this.ValidateProperty("RequirementID", value);
                    this._requirementID = value;
                    this.RaisePropertyChanged("RequirementID");
                    this.OnRequirementIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TaskID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> TaskID
        {
            get
            {
                return this._taskID;
            }
            set
            {
                if ((this._taskID != value))
                {
                    this.OnTaskIDChanging(value);
                    this.RaiseDataMemberChanging("TaskID");
                    this.ValidateProperty("TaskID", value);
                    this._taskID = value;
                    this.RaiseDataMemberChanged("TaskID");
                    this.OnTaskIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._requirementID;
        }
    }
    
    /// <summary>
    /// The 'ProductRequiredView' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class ProductRequiredView : Entity
    {
        
        private Nullable<decimal> _amount;
        
        private Nullable<DateTime> _dueDate;
        
        private string _pondDescription;
        
        private int _pondID;
        
        private int _productID;
        
        private int _productionCycleID;
        
        private string _productName;
        
        private int _taskID;
        
        private string _uom;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAmountChanging(Nullable<decimal> value);
        partial void OnAmountChanged();
        partial void OnDueDateChanging(Nullable<DateTime> value);
        partial void OnDueDateChanged();
        partial void OnPondDescriptionChanging(string value);
        partial void OnPondDescriptionChanged();
        partial void OnPondIDChanging(int value);
        partial void OnPondIDChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductionCycleIDChanging(int value);
        partial void OnProductionCycleIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnTaskIDChanging(int value);
        partial void OnTaskIDChanged();
        partial void OnUomChanging(string value);
        partial void OnUomChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductRequiredView"/> class.
        /// </summary>
        public ProductRequiredView()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Amount' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    this.OnAmountChanging(value);
                    this.RaiseDataMemberChanging("Amount");
                    this.ValidateProperty("Amount", value);
                    this._amount = value;
                    this.RaiseDataMemberChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DueDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DueDate
        {
            get
            {
                return this._dueDate;
            }
            set
            {
                if ((this._dueDate != value))
                {
                    this.OnDueDateChanging(value);
                    this.RaiseDataMemberChanging("DueDate");
                    this.ValidateProperty("DueDate", value);
                    this._dueDate = value;
                    this.RaiseDataMemberChanged("DueDate");
                    this.OnDueDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PondDescription' value.
        /// </summary>
        [DataMember()]
        public string PondDescription
        {
            get
            {
                return this._pondDescription;
            }
            set
            {
                if ((this._pondDescription != value))
                {
                    this.OnPondDescriptionChanging(value);
                    this.RaiseDataMemberChanging("PondDescription");
                    this.ValidateProperty("PondDescription", value);
                    this._pondDescription = value;
                    this.RaiseDataMemberChanged("PondDescription");
                    this.OnPondDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PondID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int PondID
        {
            get
            {
                return this._pondID;
            }
            set
            {
                if ((this._pondID != value))
                {
                    this.OnPondIDChanging(value);
                    this.ValidateProperty("PondID", value);
                    this._pondID = value;
                    this.RaisePropertyChanged("PondID");
                    this.OnPondIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaisePropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductionCycleID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductionCycleID
        {
            get
            {
                return this._productionCycleID;
            }
            set
            {
                if ((this._productionCycleID != value))
                {
                    this.OnProductionCycleIDChanging(value);
                    this.ValidateProperty("ProductionCycleID", value);
                    this._productionCycleID = value;
                    this.RaisePropertyChanged("ProductionCycleID");
                    this.OnProductionCycleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductName' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string ProductName
        {
            get
            {
                return this._productName;
            }
            set
            {
                if ((this._productName != value))
                {
                    this.OnProductNameChanging(value);
                    this.RaiseDataMemberChanging("ProductName");
                    this.ValidateProperty("ProductName", value);
                    this._productName = value;
                    this.RaiseDataMemberChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TaskID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int TaskID
        {
            get
            {
                return this._taskID;
            }
            set
            {
                if ((this._taskID != value))
                {
                    this.OnTaskIDChanging(value);
                    this.ValidateProperty("TaskID", value);
                    this._taskID = value;
                    this.RaisePropertyChanged("TaskID");
                    this.OnTaskIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Uom' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Uom
        {
            get
            {
                return this._uom;
            }
            set
            {
                if ((this._uom != value))
                {
                    this.OnUomChanging(value);
                    this.RaiseDataMemberChanging("Uom");
                    this.ValidateProperty("Uom", value);
                    this._uom = value;
                    this.RaiseDataMemberChanged("Uom");
                    this.OnUomChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._pondID, this._productID, this._productionCycleID, this._taskID);
        }
    }
    
    /// <summary>
    /// The 'ProductSalesOrder' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class ProductSalesOrder : Entity
    {
        
        private Nullable<int> _lotNumber;
        
        private Nullable<decimal> _price;
        
        private Nullable<int> _productID;
        
        private Nullable<decimal> _qty;
        
        private Nullable<int> _requirementID;
        
        private int _salesOrderID;
        
        private Nullable<int> _taskID;
        
        private Nullable<decimal> _total;
        
        private Nullable<DateTime> _trxDate;
        
        private string _userID;
        
        private Nullable<int> _userPicked;
        
        private string _userPickedName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnLotNumberChanging(Nullable<int> value);
        partial void OnLotNumberChanged();
        partial void OnPriceChanging(Nullable<decimal> value);
        partial void OnPriceChanged();
        partial void OnProductIDChanging(Nullable<int> value);
        partial void OnProductIDChanged();
        partial void OnQTYChanging(Nullable<decimal> value);
        partial void OnQTYChanged();
        partial void OnRequirementIDChanging(Nullable<int> value);
        partial void OnRequirementIDChanged();
        partial void OnSalesOrderIDChanging(int value);
        partial void OnSalesOrderIDChanged();
        partial void OnTaskIDChanging(Nullable<int> value);
        partial void OnTaskIDChanged();
        partial void OntotalChanging(Nullable<decimal> value);
        partial void OntotalChanged();
        partial void OntrxDateChanging(Nullable<DateTime> value);
        partial void OntrxDateChanged();
        partial void OnUserIDChanging(string value);
        partial void OnUserIDChanged();
        partial void OnUserPickedChanging(Nullable<int> value);
        partial void OnUserPickedChanged();
        partial void OnuserPickedNameChanging(string value);
        partial void OnuserPickedNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductSalesOrder"/> class.
        /// </summary>
        public ProductSalesOrder()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'LotNumber' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> LotNumber
        {
            get
            {
                return this._lotNumber;
            }
            set
            {
                if ((this._lotNumber != value))
                {
                    this.OnLotNumberChanging(value);
                    this.RaiseDataMemberChanging("LotNumber");
                    this.ValidateProperty("LotNumber", value);
                    this._lotNumber = value;
                    this.RaiseDataMemberChanged("LotNumber");
                    this.OnLotNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Price' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Price
        {
            get
            {
                return this._price;
            }
            set
            {
                if ((this._price != value))
                {
                    this.OnPriceChanging(value);
                    this.RaiseDataMemberChanging("Price");
                    this.ValidateProperty("Price", value);
                    this._price = value;
                    this.RaiseDataMemberChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.RaiseDataMemberChanging("ProductID");
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaiseDataMemberChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'QTY' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> QTY
        {
            get
            {
                return this._qty;
            }
            set
            {
                if ((this._qty != value))
                {
                    this.OnQTYChanging(value);
                    this.RaiseDataMemberChanging("QTY");
                    this.ValidateProperty("QTY", value);
                    this._qty = value;
                    this.RaiseDataMemberChanged("QTY");
                    this.OnQTYChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RequirementID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> RequirementID
        {
            get
            {
                return this._requirementID;
            }
            set
            {
                if ((this._requirementID != value))
                {
                    this.OnRequirementIDChanging(value);
                    this.RaiseDataMemberChanging("RequirementID");
                    this.ValidateProperty("RequirementID", value);
                    this._requirementID = value;
                    this.RaiseDataMemberChanged("RequirementID");
                    this.OnRequirementIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesOrderID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int SalesOrderID
        {
            get
            {
                return this._salesOrderID;
            }
            set
            {
                if ((this._salesOrderID != value))
                {
                    this.OnSalesOrderIDChanging(value);
                    this.ValidateProperty("SalesOrderID", value);
                    this._salesOrderID = value;
                    this.RaisePropertyChanged("SalesOrderID");
                    this.OnSalesOrderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TaskID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> TaskID
        {
            get
            {
                return this._taskID;
            }
            set
            {
                if ((this._taskID != value))
                {
                    this.OnTaskIDChanging(value);
                    this.RaiseDataMemberChanging("TaskID");
                    this.ValidateProperty("TaskID", value);
                    this._taskID = value;
                    this.RaiseDataMemberChanged("TaskID");
                    this.OnTaskIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'total' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> total
        {
            get
            {
                return this._total;
            }
            set
            {
                if ((this._total != value))
                {
                    this.OntotalChanging(value);
                    this.RaiseDataMemberChanging("total");
                    this.ValidateProperty("total", value);
                    this._total = value;
                    this.RaiseDataMemberChanged("total");
                    this.OntotalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'trxDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> trxDate
        {
            get
            {
                return this._trxDate;
            }
            set
            {
                if ((this._trxDate != value))
                {
                    this.OntrxDateChanging(value);
                    this.RaiseDataMemberChanging("trxDate");
                    this.ValidateProperty("trxDate", value);
                    this._trxDate = value;
                    this.RaiseDataMemberChanged("trxDate");
                    this.OntrxDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [StringLength(512)]
        public string UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserPicked' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> UserPicked
        {
            get
            {
                return this._userPicked;
            }
            set
            {
                if ((this._userPicked != value))
                {
                    this.OnUserPickedChanging(value);
                    this.RaiseDataMemberChanging("UserPicked");
                    this.ValidateProperty("UserPicked", value);
                    this._userPicked = value;
                    this.RaiseDataMemberChanged("UserPicked");
                    this.OnUserPickedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'userPickedName' value.
        /// </summary>
        [DataMember()]
        [StringLength(1024)]
        public string userPickedName
        {
            get
            {
                return this._userPickedName;
            }
            set
            {
                if ((this._userPickedName != value))
                {
                    this.OnuserPickedNameChanging(value);
                    this.RaiseDataMemberChanging("userPickedName");
                    this.ValidateProperty("userPickedName", value);
                    this._userPickedName = value;
                    this.RaiseDataMemberChanged("userPickedName");
                    this.OnuserPickedNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._salesOrderID;
        }
    }
    
    /// <summary>
    /// The 'ProductsDetail' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class ProductsDetail : Entity
    {
        
        private string _description;
        
        private Nullable<int> _ordered;
        
        private int _productID;
        
        private int _productTrxID;
        
        private Nullable<int> _received;
        
        private Nullable<int> _shrinkage;
        
        private Nullable<int> _sold;
        
        private Nullable<int> _trxDate;
        
        private string _userID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnOrderedChanging(Nullable<int> value);
        partial void OnOrderedChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductTrxIDChanging(int value);
        partial void OnProductTrxIDChanged();
        partial void OnreceivedChanging(Nullable<int> value);
        partial void OnreceivedChanged();
        partial void OnshrinkageChanging(Nullable<int> value);
        partial void OnshrinkageChanged();
        partial void OnsoldChanging(Nullable<int> value);
        partial void OnsoldChanged();
        partial void OntrxDateChanging(Nullable<int> value);
        partial void OntrxDateChanged();
        partial void OnUserIDChanging(string value);
        partial void OnUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsDetail"/> class.
        /// </summary>
        public ProductsDetail()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Ordered' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Ordered
        {
            get
            {
                return this._ordered;
            }
            set
            {
                if ((this._ordered != value))
                {
                    this.OnOrderedChanging(value);
                    this.RaiseDataMemberChanging("Ordered");
                    this.ValidateProperty("Ordered", value);
                    this._ordered = value;
                    this.RaiseDataMemberChanged("Ordered");
                    this.OnOrderedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.RaiseDataMemberChanging("ProductID");
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaiseDataMemberChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductTrxID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductTrxID
        {
            get
            {
                return this._productTrxID;
            }
            set
            {
                if ((this._productTrxID != value))
                {
                    this.OnProductTrxIDChanging(value);
                    this.ValidateProperty("ProductTrxID", value);
                    this._productTrxID = value;
                    this.RaisePropertyChanged("ProductTrxID");
                    this.OnProductTrxIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'received' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> received
        {
            get
            {
                return this._received;
            }
            set
            {
                if ((this._received != value))
                {
                    this.OnreceivedChanging(value);
                    this.RaiseDataMemberChanging("received");
                    this.ValidateProperty("received", value);
                    this._received = value;
                    this.RaiseDataMemberChanged("received");
                    this.OnreceivedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'shrinkage' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> shrinkage
        {
            get
            {
                return this._shrinkage;
            }
            set
            {
                if ((this._shrinkage != value))
                {
                    this.OnshrinkageChanging(value);
                    this.RaiseDataMemberChanging("shrinkage");
                    this.ValidateProperty("shrinkage", value);
                    this._shrinkage = value;
                    this.RaiseDataMemberChanged("shrinkage");
                    this.OnshrinkageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'sold' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> sold
        {
            get
            {
                return this._sold;
            }
            set
            {
                if ((this._sold != value))
                {
                    this.OnsoldChanging(value);
                    this.RaiseDataMemberChanging("sold");
                    this.ValidateProperty("sold", value);
                    this._sold = value;
                    this.RaiseDataMemberChanged("sold");
                    this.OnsoldChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'trxDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> trxDate
        {
            get
            {
                return this._trxDate;
            }
            set
            {
                if ((this._trxDate != value))
                {
                    this.OntrxDateChanging(value);
                    this.RaiseDataMemberChanging("trxDate");
                    this.ValidateProperty("trxDate", value);
                    this._trxDate = value;
                    this.RaiseDataMemberChanged("trxDate");
                    this.OntrxDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productTrxID;
        }
    }
    
    /// <summary>
    /// The 'ProductsInfoView' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class ProductsInfoView : Entity
    {
        
        private string _categoryname;
        
        private string _product_description;
        
        private int _productid;
        
        private string _productname;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OncategorynameChanging(string value);
        partial void OncategorynameChanged();
        partial void Onproduct_descriptionChanging(string value);
        partial void Onproduct_descriptionChanged();
        partial void OnproductidChanging(int value);
        partial void OnproductidChanged();
        partial void OnproductnameChanging(string value);
        partial void OnproductnameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsInfoView"/> class.
        /// </summary>
        public ProductsInfoView()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'categoryname' value.
        /// </summary>
        [DataMember()]
        [StringLength(512)]
        public string categoryname
        {
            get
            {
                return this._categoryname;
            }
            set
            {
                if ((this._categoryname != value))
                {
                    this.OncategorynameChanging(value);
                    this.RaiseDataMemberChanging("categoryname");
                    this.ValidateProperty("categoryname", value);
                    this._categoryname = value;
                    this.RaiseDataMemberChanged("categoryname");
                    this.OncategorynameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'product_description' value.
        /// </summary>
        [DataMember()]
        public string product_description
        {
            get
            {
                return this._product_description;
            }
            set
            {
                if ((this._product_description != value))
                {
                    this.Onproduct_descriptionChanging(value);
                    this.RaiseDataMemberChanging("product_description");
                    this.ValidateProperty("product_description", value);
                    this._product_description = value;
                    this.RaiseDataMemberChanged("product_description");
                    this.Onproduct_descriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'productid' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int productid
        {
            get
            {
                return this._productid;
            }
            set
            {
                if ((this._productid != value))
                {
                    this.OnproductidChanging(value);
                    this.ValidateProperty("productid", value);
                    this._productid = value;
                    this.RaisePropertyChanged("productid");
                    this.OnproductidChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'productname' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string productname
        {
            get
            {
                return this._productname;
            }
            set
            {
                if ((this._productname != value))
                {
                    this.OnproductnameChanging(value);
                    this.RaiseDataMemberChanging("productname");
                    this.ValidateProperty("productname", value);
                    this._productname = value;
                    this.RaiseDataMemberChanged("productname");
                    this.OnproductnameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productid;
        }
    }
    
    /// <summary>
    /// The 'PurchaseOrder' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class PurchaseOrder : Entity
    {
        
        private Nullable<double> _currencyRate;
        
        private string _currencyShortCode;
        
        private Nullable<decimal> _discount;
        
        private Nullable<DateTime> _dueDate;
        
        private Nullable<bool> _isComplete;
        
        private string _note;
        
        private Nullable<decimal> _otherFee;
        
        private Nullable<DateTime> _poDate;
        
        private string _poid;
        
        private string _poReference;
        
        private Nullable<decimal> _shipping;
        
        private int _shipTo;
        
        private string _status;
        
        private Nullable<decimal> _subTotal;
        
        private Nullable<decimal> _taxRate;
        
        private Nullable<decimal> _totalPrice;
        
        private string _userName;
        
        private int _vendorID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCurrencyRateChanging(Nullable<double> value);
        partial void OnCurrencyRateChanged();
        partial void OnCurrencyShortCodeChanging(string value);
        partial void OnCurrencyShortCodeChanged();
        partial void OnDiscountChanging(Nullable<decimal> value);
        partial void OnDiscountChanged();
        partial void OnDueDateChanging(Nullable<DateTime> value);
        partial void OnDueDateChanged();
        partial void OnisCompleteChanging(Nullable<bool> value);
        partial void OnisCompleteChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        partial void OnOtherFeeChanging(Nullable<decimal> value);
        partial void OnOtherFeeChanged();
        partial void OnPoDateChanging(Nullable<DateTime> value);
        partial void OnPoDateChanged();
        partial void OnPOIDChanging(string value);
        partial void OnPOIDChanged();
        partial void OnPOReferenceChanging(string value);
        partial void OnPOReferenceChanged();
        partial void OnShippingChanging(Nullable<decimal> value);
        partial void OnShippingChanged();
        partial void OnShipToChanging(int value);
        partial void OnShipToChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnSubTotalChanging(Nullable<decimal> value);
        partial void OnSubTotalChanged();
        partial void OntaxRateChanging(Nullable<decimal> value);
        partial void OntaxRateChanged();
        partial void OnTotalPriceChanging(Nullable<decimal> value);
        partial void OnTotalPriceChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnVendorIDChanging(int value);
        partial void OnVendorIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrder"/> class.
        /// </summary>
        public PurchaseOrder()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CurrencyRate' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> CurrencyRate
        {
            get
            {
                return this._currencyRate;
            }
            set
            {
                if ((this._currencyRate != value))
                {
                    this.OnCurrencyRateChanging(value);
                    this.RaiseDataMemberChanging("CurrencyRate");
                    this.ValidateProperty("CurrencyRate", value);
                    this._currencyRate = value;
                    this.RaiseDataMemberChanged("CurrencyRate");
                    this.OnCurrencyRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrencyShortCode' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(3)]
        public string CurrencyShortCode
        {
            get
            {
                return this._currencyShortCode;
            }
            set
            {
                if ((this._currencyShortCode != value))
                {
                    this.OnCurrencyShortCodeChanging(value);
                    this.RaiseDataMemberChanging("CurrencyShortCode");
                    this.ValidateProperty("CurrencyShortCode", value);
                    this._currencyShortCode = value;
                    this.RaiseDataMemberChanged("CurrencyShortCode");
                    this.OnCurrencyShortCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Discount' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Discount
        {
            get
            {
                return this._discount;
            }
            set
            {
                if ((this._discount != value))
                {
                    this.OnDiscountChanging(value);
                    this.RaiseDataMemberChanging("Discount");
                    this.ValidateProperty("Discount", value);
                    this._discount = value;
                    this.RaiseDataMemberChanged("Discount");
                    this.OnDiscountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DueDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DueDate
        {
            get
            {
                return this._dueDate;
            }
            set
            {
                if ((this._dueDate != value))
                {
                    this.OnDueDateChanging(value);
                    this.RaiseDataMemberChanging("DueDate");
                    this.ValidateProperty("DueDate", value);
                    this._dueDate = value;
                    this.RaiseDataMemberChanged("DueDate");
                    this.OnDueDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isComplete' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> isComplete
        {
            get
            {
                return this._isComplete;
            }
            set
            {
                if ((this._isComplete != value))
                {
                    this.OnisCompleteChanging(value);
                    this.RaiseDataMemberChanging("isComplete");
                    this.ValidateProperty("isComplete", value);
                    this._isComplete = value;
                    this.RaiseDataMemberChanged("isComplete");
                    this.OnisCompleteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Note' value.
        /// </summary>
        [DataMember()]
        public string Note
        {
            get
            {
                return this._note;
            }
            set
            {
                if ((this._note != value))
                {
                    this.OnNoteChanging(value);
                    this.RaiseDataMemberChanging("Note");
                    this.ValidateProperty("Note", value);
                    this._note = value;
                    this.RaiseDataMemberChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OtherFee' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> OtherFee
        {
            get
            {
                return this._otherFee;
            }
            set
            {
                if ((this._otherFee != value))
                {
                    this.OnOtherFeeChanging(value);
                    this.RaiseDataMemberChanging("OtherFee");
                    this.ValidateProperty("OtherFee", value);
                    this._otherFee = value;
                    this.RaiseDataMemberChanged("OtherFee");
                    this.OnOtherFeeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PoDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> PoDate
        {
            get
            {
                return this._poDate;
            }
            set
            {
                if ((this._poDate != value))
                {
                    this.OnPoDateChanging(value);
                    this.RaiseDataMemberChanging("PoDate");
                    this.ValidateProperty("PoDate", value);
                    this._poDate = value;
                    this.RaiseDataMemberChanged("PoDate");
                    this.OnPoDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'POID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string POID
        {
            get
            {
                return this._poid;
            }
            set
            {
                if ((this._poid != value))
                {
                    this.OnPOIDChanging(value);
                    this.ValidateProperty("POID", value);
                    this._poid = value;
                    this.RaisePropertyChanged("POID");
                    this.OnPOIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'POReference' value.
        /// </summary>
        [DataMember()]
        public string POReference
        {
            get
            {
                return this._poReference;
            }
            set
            {
                if ((this._poReference != value))
                {
                    this.OnPOReferenceChanging(value);
                    this.RaiseDataMemberChanging("POReference");
                    this.ValidateProperty("POReference", value);
                    this._poReference = value;
                    this.RaiseDataMemberChanged("POReference");
                    this.OnPOReferenceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Shipping' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Shipping
        {
            get
            {
                return this._shipping;
            }
            set
            {
                if ((this._shipping != value))
                {
                    this.OnShippingChanging(value);
                    this.RaiseDataMemberChanging("Shipping");
                    this.ValidateProperty("Shipping", value);
                    this._shipping = value;
                    this.RaiseDataMemberChanged("Shipping");
                    this.OnShippingChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShipTo' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ShipTo
        {
            get
            {
                return this._shipTo;
            }
            set
            {
                if ((this._shipTo != value))
                {
                    this.OnShipToChanging(value);
                    this.RaiseDataMemberChanging("ShipTo");
                    this.ValidateProperty("ShipTo", value);
                    this._shipTo = value;
                    this.RaiseDataMemberChanged("ShipTo");
                    this.OnShipToChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SubTotal' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> SubTotal
        {
            get
            {
                return this._subTotal;
            }
            set
            {
                if ((this._subTotal != value))
                {
                    this.OnSubTotalChanging(value);
                    this.RaiseDataMemberChanging("SubTotal");
                    this.ValidateProperty("SubTotal", value);
                    this._subTotal = value;
                    this.RaiseDataMemberChanged("SubTotal");
                    this.OnSubTotalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'taxRate' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> taxRate
        {
            get
            {
                return this._taxRate;
            }
            set
            {
                if ((this._taxRate != value))
                {
                    this.OntaxRateChanging(value);
                    this.RaiseDataMemberChanging("taxRate");
                    this.ValidateProperty("taxRate", value);
                    this._taxRate = value;
                    this.RaiseDataMemberChanged("taxRate");
                    this.OntaxRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalPrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> TotalPrice
        {
            get
            {
                return this._totalPrice;
            }
            set
            {
                if ((this._totalPrice != value))
                {
                    this.OnTotalPriceChanging(value);
                    this.RaiseDataMemberChanging("TotalPrice");
                    this.ValidateProperty("TotalPrice", value);
                    this._totalPrice = value;
                    this.RaiseDataMemberChanged("TotalPrice");
                    this.OnTotalPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [StringLength(512)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'VendorID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int VendorID
        {
            get
            {
                return this._vendorID;
            }
            set
            {
                if ((this._vendorID != value))
                {
                    this.OnVendorIDChanging(value);
                    this.RaiseDataMemberChanging("VendorID");
                    this.ValidateProperty("VendorID", value);
                    this._vendorID = value;
                    this.RaiseDataMemberChanged("VendorID");
                    this.OnVendorIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._poid;
        }
    }
    
    /// <summary>
    /// The 'PurchaseTaxTransaction' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class PurchaseTaxTransaction : Entity
    {
        
        private Nullable<int> _masterTaxID;
        
        private string _poHeaderID;
        
        private int _poTaxTrxID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnMasterTaxIDChanging(Nullable<int> value);
        partial void OnMasterTaxIDChanged();
        partial void OnPOHeaderIDChanging(string value);
        partial void OnPOHeaderIDChanged();
        partial void OnPOTaxTrxIDChanging(int value);
        partial void OnPOTaxTrxIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseTaxTransaction"/> class.
        /// </summary>
        public PurchaseTaxTransaction()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'MasterTaxID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> MasterTaxID
        {
            get
            {
                return this._masterTaxID;
            }
            set
            {
                if ((this._masterTaxID != value))
                {
                    this.OnMasterTaxIDChanging(value);
                    this.RaiseDataMemberChanging("MasterTaxID");
                    this.ValidateProperty("MasterTaxID", value);
                    this._masterTaxID = value;
                    this.RaiseDataMemberChanged("MasterTaxID");
                    this.OnMasterTaxIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'POHeaderID' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string POHeaderID
        {
            get
            {
                return this._poHeaderID;
            }
            set
            {
                if ((this._poHeaderID != value))
                {
                    this.OnPOHeaderIDChanging(value);
                    this.RaiseDataMemberChanging("POHeaderID");
                    this.ValidateProperty("POHeaderID", value);
                    this._poHeaderID = value;
                    this.RaiseDataMemberChanged("POHeaderID");
                    this.OnPOHeaderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'POTaxTrxID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int POTaxTrxID
        {
            get
            {
                return this._poTaxTrxID;
            }
            set
            {
                if ((this._poTaxTrxID != value))
                {
                    this.OnPOTaxTrxIDChanging(value);
                    this.ValidateProperty("POTaxTrxID", value);
                    this._poTaxTrxID = value;
                    this.RaisePropertyChanged("POTaxTrxID");
                    this.OnPOTaxTrxIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._poTaxTrxID;
        }
    }
    
    /// <summary>
    /// The 'RegistrationData' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class RegistrationData : ComplexObject
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(128, ErrorMessageResourceName="ValidationErrorBadAnswerLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'RequiredFeedNext10Days' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class RequiredFeedNext10Days : Entity
    {
        
        private string _noPakan;
        
        private Nullable<double> _pakan;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNoPakanChanging(string value);
        partial void OnNoPakanChanged();
        partial void OnPakanChanging(Nullable<double> value);
        partial void OnPakanChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RequiredFeedNext10Days"/> class.
        /// </summary>
        public RequiredFeedNext10Days()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'NoPakan' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string NoPakan
        {
            get
            {
                return this._noPakan;
            }
            set
            {
                if ((this._noPakan != value))
                {
                    this.OnNoPakanChanging(value);
                    this.ValidateProperty("NoPakan", value);
                    this._noPakan = value;
                    this.RaisePropertyChanged("NoPakan");
                    this.OnNoPakanChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Pakan' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Pakan
        {
            get
            {
                return this._pakan;
            }
            set
            {
                if ((this._pakan != value))
                {
                    this.OnPakanChanging(value);
                    this.RaiseDataMemberChanging("Pakan");
                    this.ValidateProperty("Pakan", value);
                    this._pakan = value;
                    this.RaiseDataMemberChanged("Pakan");
                    this.OnPakanChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._noPakan;
        }
    }
    
    /// <summary>
    /// The 'RequiredFeedNext14days' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class RequiredFeedNext14days : Entity
    {
        
        private string _noPakan;
        
        private Nullable<double> _pakan;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNoPakanChanging(string value);
        partial void OnNoPakanChanged();
        partial void OnPakanChanging(Nullable<double> value);
        partial void OnPakanChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RequiredFeedNext14days"/> class.
        /// </summary>
        public RequiredFeedNext14days()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'NoPakan' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string NoPakan
        {
            get
            {
                return this._noPakan;
            }
            set
            {
                if ((this._noPakan != value))
                {
                    this.OnNoPakanChanging(value);
                    this.ValidateProperty("NoPakan", value);
                    this._noPakan = value;
                    this.RaisePropertyChanged("NoPakan");
                    this.OnNoPakanChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Pakan' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Pakan
        {
            get
            {
                return this._pakan;
            }
            set
            {
                if ((this._pakan != value))
                {
                    this.OnPakanChanging(value);
                    this.RaiseDataMemberChanging("Pakan");
                    this.ValidateProperty("Pakan", value);
                    this._pakan = value;
                    this.RaiseDataMemberChanged("Pakan");
                    this.OnPakanChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._noPakan;
        }
    }
    
    /// <summary>
    /// The 'RequiredFeedNext3days' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class RequiredFeedNext3days : Entity
    {
        
        private string _noPakan;
        
        private Nullable<double> _pakan;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNoPakanChanging(string value);
        partial void OnNoPakanChanged();
        partial void OnPakanChanging(Nullable<double> value);
        partial void OnPakanChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RequiredFeedNext3days"/> class.
        /// </summary>
        public RequiredFeedNext3days()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'NoPakan' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string NoPakan
        {
            get
            {
                return this._noPakan;
            }
            set
            {
                if ((this._noPakan != value))
                {
                    this.OnNoPakanChanging(value);
                    this.ValidateProperty("NoPakan", value);
                    this._noPakan = value;
                    this.RaisePropertyChanged("NoPakan");
                    this.OnNoPakanChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Pakan' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Pakan
        {
            get
            {
                return this._pakan;
            }
            set
            {
                if ((this._pakan != value))
                {
                    this.OnPakanChanging(value);
                    this.RaiseDataMemberChanging("Pakan");
                    this.ValidateProperty("Pakan", value);
                    this._pakan = value;
                    this.RaiseDataMemberChanged("Pakan");
                    this.OnPakanChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._noPakan;
        }
    }
    
    /// <summary>
    /// The 'RequredFeedNext7days' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class RequredFeedNext7days : Entity
    {
        
        private string _noPakan;
        
        private Nullable<double> _pakan;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNoPakanChanging(string value);
        partial void OnNoPakanChanged();
        partial void OnPakanChanging(Nullable<double> value);
        partial void OnPakanChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RequredFeedNext7days"/> class.
        /// </summary>
        public RequredFeedNext7days()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'NoPakan' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string NoPakan
        {
            get
            {
                return this._noPakan;
            }
            set
            {
                if ((this._noPakan != value))
                {
                    this.OnNoPakanChanging(value);
                    this.ValidateProperty("NoPakan", value);
                    this._noPakan = value;
                    this.RaisePropertyChanged("NoPakan");
                    this.OnNoPakanChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Pakan' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Pakan
        {
            get
            {
                return this._pakan;
            }
            set
            {
                if ((this._pakan != value))
                {
                    this.OnPakanChanging(value);
                    this.RaiseDataMemberChanging("Pakan");
                    this.ValidateProperty("Pakan", value);
                    this._pakan = value;
                    this.RaiseDataMemberChanged("Pakan");
                    this.OnPakanChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._noPakan;
        }
    }
    
    /// <summary>
    /// The 'ResultNote' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class ResultNote : Entity
    {
        
        private Nullable<DateTime> _entryDate;
        
        private int _resultID;
        
        private string _resultNote1;
        
        private Nullable<int> _taskID;
        
        private string _userId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnentryDateChanging(Nullable<DateTime> value);
        partial void OnentryDateChanged();
        partial void OnresultIDChanging(int value);
        partial void OnresultIDChanged();
        partial void OnResultNote1Changing(string value);
        partial void OnResultNote1Changed();
        partial void OntaskIDChanging(Nullable<int> value);
        partial void OntaskIDChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultNote"/> class.
        /// </summary>
        public ResultNote()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'entryDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> entryDate
        {
            get
            {
                return this._entryDate;
            }
            set
            {
                if ((this._entryDate != value))
                {
                    this.OnentryDateChanging(value);
                    this.RaiseDataMemberChanging("entryDate");
                    this.ValidateProperty("entryDate", value);
                    this._entryDate = value;
                    this.RaiseDataMemberChanged("entryDate");
                    this.OnentryDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'resultID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int resultID
        {
            get
            {
                return this._resultID;
            }
            set
            {
                if ((this._resultID != value))
                {
                    this.OnresultIDChanging(value);
                    this.ValidateProperty("resultID", value);
                    this._resultID = value;
                    this.RaisePropertyChanged("resultID");
                    this.OnresultIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResultNote1' value.
        /// </summary>
        [DataMember()]
        public string ResultNote1
        {
            get
            {
                return this._resultNote1;
            }
            set
            {
                if ((this._resultNote1 != value))
                {
                    this.OnResultNote1Changing(value);
                    this.RaiseDataMemberChanging("ResultNote1");
                    this.ValidateProperty("ResultNote1", value);
                    this._resultNote1 = value;
                    this.RaiseDataMemberChanged("ResultNote1");
                    this.OnResultNote1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'taskID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> taskID
        {
            get
            {
                return this._taskID;
            }
            set
            {
                if ((this._taskID != value))
                {
                    this.OntaskIDChanging(value);
                    this.RaiseDataMemberChanging("taskID");
                    this.ValidateProperty("taskID", value);
                    this._taskID = value;
                    this.RaiseDataMemberChanged("taskID");
                    this.OntaskIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._resultID;
        }
    }
    
    /// <summary>
    /// The 'SalesOrderDetailsView' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class SalesOrderDetailsView : Entity
    {
        
        private Nullable<decimal> _discount;
        
        private Nullable<decimal> _price;
        
        private int _productId;
        
        private string _productName;
        
        private Nullable<decimal> _qty;
        
        private int _salesOrderDetailID;
        
        private Nullable<int> _salesOrderHeaderID;
        
        private Nullable<decimal> _total;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDiscountChanging(Nullable<decimal> value);
        partial void OnDiscountChanged();
        partial void OnpriceChanging(Nullable<decimal> value);
        partial void OnpriceChanged();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnqtyChanging(Nullable<decimal> value);
        partial void OnqtyChanged();
        partial void OnsalesOrderDetailIDChanging(int value);
        partial void OnsalesOrderDetailIDChanged();
        partial void OnSalesOrderHeaderIDChanging(Nullable<int> value);
        partial void OnSalesOrderHeaderIDChanged();
        partial void OnTotalChanging(Nullable<decimal> value);
        partial void OnTotalChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrderDetailsView"/> class.
        /// </summary>
        public SalesOrderDetailsView()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Discount' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Discount
        {
            get
            {
                return this._discount;
            }
            set
            {
                if ((this._discount != value))
                {
                    this.OnDiscountChanging(value);
                    this.RaiseDataMemberChanging("Discount");
                    this.ValidateProperty("Discount", value);
                    this._discount = value;
                    this.RaiseDataMemberChanged("Discount");
                    this.OnDiscountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'price' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> price
        {
            get
            {
                return this._price;
            }
            set
            {
                if ((this._price != value))
                {
                    this.OnpriceChanging(value);
                    this.RaiseDataMemberChanging("price");
                    this.ValidateProperty("price", value);
                    this._price = value;
                    this.RaiseDataMemberChanged("price");
                    this.OnpriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaisePropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductName' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string ProductName
        {
            get
            {
                return this._productName;
            }
            set
            {
                if ((this._productName != value))
                {
                    this.OnProductNameChanging(value);
                    this.RaiseDataMemberChanging("ProductName");
                    this.ValidateProperty("ProductName", value);
                    this._productName = value;
                    this.RaiseDataMemberChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'qty' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> qty
        {
            get
            {
                return this._qty;
            }
            set
            {
                if ((this._qty != value))
                {
                    this.OnqtyChanging(value);
                    this.RaiseDataMemberChanging("qty");
                    this.ValidateProperty("qty", value);
                    this._qty = value;
                    this.RaiseDataMemberChanged("qty");
                    this.OnqtyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'salesOrderDetailID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int salesOrderDetailID
        {
            get
            {
                return this._salesOrderDetailID;
            }
            set
            {
                if ((this._salesOrderDetailID != value))
                {
                    this.OnsalesOrderDetailIDChanging(value);
                    this.ValidateProperty("salesOrderDetailID", value);
                    this._salesOrderDetailID = value;
                    this.RaisePropertyChanged("salesOrderDetailID");
                    this.OnsalesOrderDetailIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesOrderHeaderID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> SalesOrderHeaderID
        {
            get
            {
                return this._salesOrderHeaderID;
            }
            set
            {
                if ((this._salesOrderHeaderID != value))
                {
                    this.OnSalesOrderHeaderIDChanging(value);
                    this.RaiseDataMemberChanging("SalesOrderHeaderID");
                    this.ValidateProperty("SalesOrderHeaderID", value);
                    this._salesOrderHeaderID = value;
                    this.RaiseDataMemberChanged("SalesOrderHeaderID");
                    this.OnSalesOrderHeaderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Total' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Total
        {
            get
            {
                return this._total;
            }
            set
            {
                if ((this._total != value))
                {
                    this.OnTotalChanging(value);
                    this.RaiseDataMemberChanging("Total");
                    this.ValidateProperty("Total", value);
                    this._total = value;
                    this.RaiseDataMemberChanged("Total");
                    this.OnTotalChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._productId, this._salesOrderDetailID);
        }
    }
    
    /// <summary>
    /// The 'SamplingLog' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class SamplingLog : Entity
    {
        
        private Nullable<int> _age;
        
        private Nullable<double> _averageDailyGrowth;
        
        private Nullable<double> _biomass;
        
        private Nullable<double> _cummulativeADG;
        
        private Nullable<int> _cummulativeFeed;
        
        private Nullable<decimal> _dailyFeed;
        
        private Nullable<double> _fcr;
        
        private Nullable<double> _feedConsumptions;
        
        private Nullable<double> _feedingRate;
        
        private string _feedType;
        
        private Nullable<DateTime> _logDate;
        
        private int _logID;
        
        private Nullable<double> _medianBodyWeight;
        
        private Nullable<double> _populations;
        
        private Nullable<int> _productionCycleID;
        
        private Nullable<double> _size;
        
        private Nullable<double> _survivalRate;
        
        private string _userID;
        
        private Nullable<decimal> _weeklyFCR;
        
        private Nullable<int> _weeklyFeed;
        
        private Nullable<double> _weightperWeek;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAgeChanging(Nullable<int> value);
        partial void OnAgeChanged();
        partial void OnAverageDailyGrowthChanging(Nullable<double> value);
        partial void OnAverageDailyGrowthChanged();
        partial void OnBiomassChanging(Nullable<double> value);
        partial void OnBiomassChanged();
        partial void OnCummulativeADGChanging(Nullable<double> value);
        partial void OnCummulativeADGChanged();
        partial void OnCummulativeFeedChanging(Nullable<int> value);
        partial void OnCummulativeFeedChanged();
        partial void OnDailyFeedChanging(Nullable<decimal> value);
        partial void OnDailyFeedChanged();
        partial void OnFCRChanging(Nullable<double> value);
        partial void OnFCRChanged();
        partial void OnFeedConsumptionsChanging(Nullable<double> value);
        partial void OnFeedConsumptionsChanged();
        partial void OnfeedingRateChanging(Nullable<double> value);
        partial void OnfeedingRateChanged();
        partial void OnFeedTypeChanging(string value);
        partial void OnFeedTypeChanged();
        partial void OnLogDateChanging(Nullable<DateTime> value);
        partial void OnLogDateChanged();
        partial void OnLogIDChanging(int value);
        partial void OnLogIDChanged();
        partial void OnMedianBodyWeightChanging(Nullable<double> value);
        partial void OnMedianBodyWeightChanged();
        partial void OnPopulationsChanging(Nullable<double> value);
        partial void OnPopulationsChanged();
        partial void OnProductionCycleIDChanging(Nullable<int> value);
        partial void OnProductionCycleIDChanged();
        partial void OnSizeChanging(Nullable<double> value);
        partial void OnSizeChanged();
        partial void OnSurvivalRateChanging(Nullable<double> value);
        partial void OnSurvivalRateChanged();
        partial void OnUserIDChanging(string value);
        partial void OnUserIDChanged();
        partial void OnWeeklyFCRChanging(Nullable<decimal> value);
        partial void OnWeeklyFCRChanged();
        partial void OnWeeklyFeedChanging(Nullable<int> value);
        partial void OnWeeklyFeedChanged();
        partial void OnWeightperWeekChanging(Nullable<double> value);
        partial void OnWeightperWeekChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SamplingLog"/> class.
        /// </summary>
        public SamplingLog()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Age' value.
        /// </summary>
        [DataMember()]
        [Range(0, 120, ErrorMessage="Day of culture must be on range of 0 to 120")]
        [Required()]
        public Nullable<int> Age
        {
            get
            {
                return this._age;
            }
            set
            {
                if ((this._age != value))
                {
                    this.OnAgeChanging(value);
                    this.RaiseDataMemberChanging("Age");
                    this.ValidateProperty("Age", value);
                    this._age = value;
                    this.RaiseDataMemberChanged("Age");
                    this.OnAgeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AverageDailyGrowth' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<double> AverageDailyGrowth
        {
            get
            {
                return this._averageDailyGrowth;
            }
            set
            {
                if ((this._averageDailyGrowth != value))
                {
                    this.OnAverageDailyGrowthChanging(value);
                    this.RaiseDataMemberChanging("AverageDailyGrowth");
                    this.ValidateProperty("AverageDailyGrowth", value);
                    this._averageDailyGrowth = value;
                    this.RaiseDataMemberChanged("AverageDailyGrowth");
                    this.OnAverageDailyGrowthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Biomass' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<double> Biomass
        {
            get
            {
                return this._biomass;
            }
            set
            {
                if ((this._biomass != value))
                {
                    this.OnBiomassChanging(value);
                    this.RaiseDataMemberChanging("Biomass");
                    this.ValidateProperty("Biomass", value);
                    this._biomass = value;
                    this.RaiseDataMemberChanged("Biomass");
                    this.OnBiomassChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CummulativeADG' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<double> CummulativeADG
        {
            get
            {
                return this._cummulativeADG;
            }
            set
            {
                if ((this._cummulativeADG != value))
                {
                    this.OnCummulativeADGChanging(value);
                    this.RaiseDataMemberChanging("CummulativeADG");
                    this.ValidateProperty("CummulativeADG", value);
                    this._cummulativeADG = value;
                    this.RaiseDataMemberChanged("CummulativeADG");
                    this.OnCummulativeADGChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CummulativeFeed' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<int> CummulativeFeed
        {
            get
            {
                return this._cummulativeFeed;
            }
            set
            {
                if ((this._cummulativeFeed != value))
                {
                    this.OnCummulativeFeedChanging(value);
                    this.RaiseDataMemberChanging("CummulativeFeed");
                    this.ValidateProperty("CummulativeFeed", value);
                    this._cummulativeFeed = value;
                    this.RaiseDataMemberChanged("CummulativeFeed");
                    this.OnCummulativeFeedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DailyFeed' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<decimal> DailyFeed
        {
            get
            {
                return this._dailyFeed;
            }
            set
            {
                if ((this._dailyFeed != value))
                {
                    this.OnDailyFeedChanging(value);
                    this.RaiseDataMemberChanging("DailyFeed");
                    this.ValidateProperty("DailyFeed", value);
                    this._dailyFeed = value;
                    this.RaiseDataMemberChanged("DailyFeed");
                    this.OnDailyFeedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FCR' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<double> FCR
        {
            get
            {
                return this._fcr;
            }
            set
            {
                if ((this._fcr != value))
                {
                    this.OnFCRChanging(value);
                    this.RaiseDataMemberChanging("FCR");
                    this.ValidateProperty("FCR", value);
                    this._fcr = value;
                    this.RaiseDataMemberChanged("FCR");
                    this.OnFCRChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FeedConsumptions' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<double> FeedConsumptions
        {
            get
            {
                return this._feedConsumptions;
            }
            set
            {
                if ((this._feedConsumptions != value))
                {
                    this.OnFeedConsumptionsChanging(value);
                    this.RaiseDataMemberChanging("FeedConsumptions");
                    this.ValidateProperty("FeedConsumptions", value);
                    this._feedConsumptions = value;
                    this.RaiseDataMemberChanged("FeedConsumptions");
                    this.OnFeedConsumptionsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'feedingRate' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<double> feedingRate
        {
            get
            {
                return this._feedingRate;
            }
            set
            {
                if ((this._feedingRate != value))
                {
                    this.OnfeedingRateChanging(value);
                    this.RaiseDataMemberChanging("feedingRate");
                    this.ValidateProperty("feedingRate", value);
                    this._feedingRate = value;
                    this.RaiseDataMemberChanged("feedingRate");
                    this.OnfeedingRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FeedType' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string FeedType
        {
            get
            {
                return this._feedType;
            }
            set
            {
                if ((this._feedType != value))
                {
                    this.OnFeedTypeChanging(value);
                    this.RaiseDataMemberChanging("FeedType");
                    this.ValidateProperty("FeedType", value);
                    this._feedType = value;
                    this.RaiseDataMemberChanged("FeedType");
                    this.OnFeedTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LogDate' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public Nullable<DateTime> LogDate
        {
            get
            {
                return this._logDate;
            }
            set
            {
                if ((this._logDate != value))
                {
                    this.OnLogDateChanging(value);
                    this.RaiseDataMemberChanging("LogDate");
                    this.ValidateProperty("LogDate", value);
                    this._logDate = value;
                    this.RaiseDataMemberChanged("LogDate");
                    this.OnLogDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LogID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int LogID
        {
            get
            {
                return this._logID;
            }
            set
            {
                if ((this._logID != value))
                {
                    this.OnLogIDChanging(value);
                    this.ValidateProperty("LogID", value);
                    this._logID = value;
                    this.RaisePropertyChanged("LogID");
                    this.OnLogIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MedianBodyWeight' value.
        /// </summary>
        [DataMember()]
        [Range(0, 26, ErrorMessage="Enter range from 0-26")]
        [Required()]
        public Nullable<double> MedianBodyWeight
        {
            get
            {
                return this._medianBodyWeight;
            }
            set
            {
                if ((this._medianBodyWeight != value))
                {
                    this.OnMedianBodyWeightChanging(value);
                    this.RaiseDataMemberChanging("MedianBodyWeight");
                    this.ValidateProperty("MedianBodyWeight", value);
                    this._medianBodyWeight = value;
                    this.RaiseDataMemberChanged("MedianBodyWeight");
                    this.OnMedianBodyWeightChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Populations' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<double> Populations
        {
            get
            {
                return this._populations;
            }
            set
            {
                if ((this._populations != value))
                {
                    this.OnPopulationsChanging(value);
                    this.RaiseDataMemberChanging("Populations");
                    this.ValidateProperty("Populations", value);
                    this._populations = value;
                    this.RaiseDataMemberChanged("Populations");
                    this.OnPopulationsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductionCycleID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public Nullable<int> ProductionCycleID
        {
            get
            {
                return this._productionCycleID;
            }
            set
            {
                if ((this._productionCycleID != value))
                {
                    this.OnProductionCycleIDChanging(value);
                    this.RaiseDataMemberChanging("ProductionCycleID");
                    this.ValidateProperty("ProductionCycleID", value);
                    this._productionCycleID = value;
                    this.RaiseDataMemberChanged("ProductionCycleID");
                    this.OnProductionCycleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Size' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<double> Size
        {
            get
            {
                return this._size;
            }
            set
            {
                if ((this._size != value))
                {
                    this.OnSizeChanging(value);
                    this.RaiseDataMemberChanging("Size");
                    this.ValidateProperty("Size", value);
                    this._size = value;
                    this.RaiseDataMemberChanged("Size");
                    this.OnSizeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SurvivalRate' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<double> SurvivalRate
        {
            get
            {
                return this._survivalRate;
            }
            set
            {
                if ((this._survivalRate != value))
                {
                    this.OnSurvivalRateChanging(value);
                    this.RaiseDataMemberChanging("SurvivalRate");
                    this.ValidateProperty("SurvivalRate", value);
                    this._survivalRate = value;
                    this.RaiseDataMemberChanged("SurvivalRate");
                    this.OnSurvivalRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WeeklyFCR' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<decimal> WeeklyFCR
        {
            get
            {
                return this._weeklyFCR;
            }
            set
            {
                if ((this._weeklyFCR != value))
                {
                    this.OnWeeklyFCRChanging(value);
                    this.RaiseDataMemberChanging("WeeklyFCR");
                    this.ValidateProperty("WeeklyFCR", value);
                    this._weeklyFCR = value;
                    this.RaiseDataMemberChanged("WeeklyFCR");
                    this.OnWeeklyFCRChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WeeklyFeed' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<int> WeeklyFeed
        {
            get
            {
                return this._weeklyFeed;
            }
            set
            {
                if ((this._weeklyFeed != value))
                {
                    this.OnWeeklyFeedChanging(value);
                    this.RaiseDataMemberChanging("WeeklyFeed");
                    this.ValidateProperty("WeeklyFeed", value);
                    this._weeklyFeed = value;
                    this.RaiseDataMemberChanged("WeeklyFeed");
                    this.OnWeeklyFeedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WeightperWeek' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<double> WeightperWeek
        {
            get
            {
                return this._weightperWeek;
            }
            set
            {
                if ((this._weightperWeek != value))
                {
                    this.OnWeightperWeekChanging(value);
                    this.RaiseDataMemberChanging("WeightperWeek");
                    this.ValidateProperty("WeightperWeek", value);
                    this._weightperWeek = value;
                    this.RaiseDataMemberChanged("WeightperWeek");
                    this.OnWeightperWeekChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._logID;
        }
    }
    
    /// <summary>
    /// The 'SumProductRequiredView' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class SumProductRequiredView : Entity
    {
        
        private Nullable<DateTime> _dueDate;
        
        private int _productID;
        
        private string _productName;
        
        private Nullable<decimal> _totalRequired;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDueDateChanging(Nullable<DateTime> value);
        partial void OnDueDateChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OntotalRequiredChanging(Nullable<decimal> value);
        partial void OntotalRequiredChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SumProductRequiredView"/> class.
        /// </summary>
        public SumProductRequiredView()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DueDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DueDate
        {
            get
            {
                return this._dueDate;
            }
            set
            {
                if ((this._dueDate != value))
                {
                    this.OnDueDateChanging(value);
                    this.RaiseDataMemberChanging("DueDate");
                    this.ValidateProperty("DueDate", value);
                    this._dueDate = value;
                    this.RaiseDataMemberChanged("DueDate");
                    this.OnDueDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaisePropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductName' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string ProductName
        {
            get
            {
                return this._productName;
            }
            set
            {
                if ((this._productName != value))
                {
                    this.OnProductNameChanging(value);
                    this.RaiseDataMemberChanging("ProductName");
                    this.ValidateProperty("ProductName", value);
                    this._productName = value;
                    this.RaiseDataMemberChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'totalRequired' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> totalRequired
        {
            get
            {
                return this._totalRequired;
            }
            set
            {
                if ((this._totalRequired != value))
                {
                    this.OntotalRequiredChanging(value);
                    this.RaiseDataMemberChanging("totalRequired");
                    this.ValidateProperty("totalRequired", value);
                    this._totalRequired = value;
                    this.RaiseDataMemberChanged("totalRequired");
                    this.OntotalRequiredChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productID;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'SumProductRequiredViewDS' DomainService.
    /// </summary>
    public sealed partial class SumProductRequiredViewDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SumProductRequiredViewDS"/> class.
        /// </summary>
        public SumProductRequiredViewDS() : 
                this(new WebDomainClient<ISumProductRequiredViewDSContract>(new Uri("tambak-Web-SumProductRequiredViewDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SumProductRequiredViewDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SumProductRequiredViewDS service URI.</param>
        public SumProductRequiredViewDS(Uri serviceUri) : 
                this(new WebDomainClient<ISumProductRequiredViewDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SumProductRequiredViewDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public SumProductRequiredViewDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="SumProductRequiredView"/> entity instances that have been loaded into this <see cref="SumProductRequiredViewDS"/> instance.
        /// </summary>
        public EntitySet<SumProductRequiredView> SumProductRequiredViews
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SumProductRequiredView>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SumProductRequiredView"/> entity instances using the 'GetSumProductRequiredViews' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SumProductRequiredView"/> entity instances.</returns>
        public EntityQuery<SumProductRequiredView> GetSumProductRequiredViewsQuery()
        {
            this.ValidateMethod("GetSumProductRequiredViewsQuery", null);
            return base.CreateQuery<SumProductRequiredView>("GetSumProductRequiredViews", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SumProductRequiredViewDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SumProductRequiredViewDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ISumProductRequiredViewDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetSumProductRequiredViews' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SumProductRequiredViewDS/GetSumProductRequiredViewsDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SumProductRequiredViewDS/GetSumProductRequiredViews", ReplyAction="http://tempuri.org/SumProductRequiredViewDS/GetSumProductRequiredViewsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSumProductRequiredViews(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSumProductRequiredViews'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSumProductRequiredViews'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSumProductRequiredViews' operation.</returns>
            QueryResult<SumProductRequiredView> EndGetSumProductRequiredViews(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SumProductRequiredViewDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SumProductRequiredViewDS/SubmitChanges", ReplyAction="http://tempuri.org/SumProductRequiredViewDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SumProductRequiredViewDSEntityContainer : EntityContainer
        {
            
            public SumProductRequiredViewDSEntityContainer()
            {
                this.CreateEntitySet<SumProductRequiredView>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'Supplier' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class Supplier : Entity
    {
        
        private string _address;
        
        private string _address2;
        
        private string _city;
        
        private string _companyName;
        
        private string _country;
        
        private string _dob;
        
        private string _email;
        
        private Nullable<DateTime> _entryDate;
        
        private string _firstName;
        
        private string _lastName;
        
        private string _phoneNumber;
        
        private int _supplierID;
        
        private string _userID;
        
        private string _zipCode;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnAddress2Changing(string value);
        partial void OnAddress2Changed();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnDOBChanging(string value);
        partial void OnDOBChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnEntryDateChanging(Nullable<DateTime> value);
        partial void OnEntryDateChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnPhoneNumberChanging(string value);
        partial void OnPhoneNumberChanged();
        partial void OnSupplierIDChanging(int value);
        partial void OnSupplierIDChanged();
        partial void OnUserIDChanging(string value);
        partial void OnUserIDChanged();
        partial void OnZipCodeChanging(string value);
        partial void OnZipCodeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Supplier"/> class.
        /// </summary>
        public Supplier()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address2' value.
        /// </summary>
        [DataMember()]
        public string Address2
        {
            get
            {
                return this._address2;
            }
            set
            {
                if ((this._address2 != value))
                {
                    this.OnAddress2Changing(value);
                    this.RaiseDataMemberChanging("Address2");
                    this.ValidateProperty("Address2", value);
                    this._address2 = value;
                    this.RaiseDataMemberChanged("Address2");
                    this.OnAddress2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(512)]
        public string CompanyName
        {
            get
            {
                return this._companyName;
            }
            set
            {
                if ((this._companyName != value))
                {
                    this.OnCompanyNameChanging(value);
                    this.RaiseDataMemberChanging("CompanyName");
                    this.ValidateProperty("CompanyName", value);
                    this._companyName = value;
                    this.RaiseDataMemberChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DOB' value.
        /// </summary>
        [DataMember()]
        public string DOB
        {
            get
            {
                return this._dob;
            }
            set
            {
                if ((this._dob != value))
                {
                    this.OnDOBChanging(value);
                    this.RaiseDataMemberChanging("DOB");
                    this.ValidateProperty("DOB", value);
                    this._dob = value;
                    this.RaiseDataMemberChanged("DOB");
                    this.OnDOBChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EntryDate' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public Nullable<DateTime> EntryDate
        {
            get
            {
                return this._entryDate;
            }
            set
            {
                if ((this._entryDate != value))
                {
                    this.OnEntryDateChanging(value);
                    this.RaiseDataMemberChanging("EntryDate");
                    this.ValidateProperty("EntryDate", value);
                    this._entryDate = value;
                    this.RaiseDataMemberChanged("EntryDate");
                    this.OnEntryDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNumber' value.
        /// </summary>
        [DataMember()]
        public string PhoneNumber
        {
            get
            {
                return this._phoneNumber;
            }
            set
            {
                if ((this._phoneNumber != value))
                {
                    this.OnPhoneNumberChanging(value);
                    this.RaiseDataMemberChanging("PhoneNumber");
                    this.ValidateProperty("PhoneNumber", value);
                    this._phoneNumber = value;
                    this.RaiseDataMemberChanged("PhoneNumber");
                    this.OnPhoneNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SupplierID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int SupplierID
        {
            get
            {
                return this._supplierID;
            }
            set
            {
                if ((this._supplierID != value))
                {
                    this.OnSupplierIDChanging(value);
                    this.ValidateProperty("SupplierID", value);
                    this._supplierID = value;
                    this.RaisePropertyChanged("SupplierID");
                    this.OnSupplierIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ZipCode' value.
        /// </summary>
        [DataMember()]
        public string ZipCode
        {
            get
            {
                return this._zipCode;
            }
            set
            {
                if ((this._zipCode != value))
                {
                    this.OnZipCodeChanging(value);
                    this.RaiseDataMemberChanging("ZipCode");
                    this.ValidateProperty("ZipCode", value);
                    this._zipCode = value;
                    this.RaiseDataMemberChanged("ZipCode");
                    this.OnZipCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._supplierID;
        }
    }
    
    /// <summary>
    /// The 'Task' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class Task : Entity
    {
        
        private int _assignedTo;
        
        private string _attachments;
        
        private Nullable<double> _completePercentage;
        
        private string _description;
        
        private Nullable<DateTime> _dueDate;
        
        private Nullable<DateTime> _endDate;
        
        private Nullable<bool> _isDone;
        
        private Nullable<double> _plannedManHours;
        
        private Nullable<int> _pondID;
        
        private string _priority;
        
        private Nullable<int> _productionCycleID;
        
        private string _reccurencePattern;
        
        private Nullable<DateTime> _startDate;
        
        private string _status;
        
        private int _taskID;
        
        private string _title;
        
        private string _userId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnassignedToChanging(int value);
        partial void OnassignedToChanged();
        partial void OnAttachmentsChanging(string value);
        partial void OnAttachmentsChanged();
        partial void OnCompletePercentageChanging(Nullable<double> value);
        partial void OnCompletePercentageChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDueDateChanging(Nullable<DateTime> value);
        partial void OnDueDateChanged();
        partial void OnEndDateChanging(Nullable<DateTime> value);
        partial void OnEndDateChanged();
        partial void OnisDoneChanging(Nullable<bool> value);
        partial void OnisDoneChanged();
        partial void OnplannedManHoursChanging(Nullable<double> value);
        partial void OnplannedManHoursChanged();
        partial void OnPondIDChanging(Nullable<int> value);
        partial void OnPondIDChanged();
        partial void OnPriorityChanging(string value);
        partial void OnPriorityChanged();
        partial void OnProductionCycleIDChanging(Nullable<int> value);
        partial void OnProductionCycleIDChanged();
        partial void OnReccurencePatternChanging(string value);
        partial void OnReccurencePatternChanged();
        partial void OnStartDateChanging(Nullable<DateTime> value);
        partial void OnStartDateChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnTaskIDChanging(int value);
        partial void OnTaskIDChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Task"/> class.
        /// </summary>
        public Task()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'assignedTo' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public int assignedTo
        {
            get
            {
                return this._assignedTo;
            }
            set
            {
                if ((this._assignedTo != value))
                {
                    this.OnassignedToChanging(value);
                    this.RaiseDataMemberChanging("assignedTo");
                    this.ValidateProperty("assignedTo", value);
                    this._assignedTo = value;
                    this.RaiseDataMemberChanged("assignedTo");
                    this.OnassignedToChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Attachments' value.
        /// </summary>
        [DataMember()]
        public string Attachments
        {
            get
            {
                return this._attachments;
            }
            set
            {
                if ((this._attachments != value))
                {
                    this.OnAttachmentsChanging(value);
                    this.RaiseDataMemberChanging("Attachments");
                    this.ValidateProperty("Attachments", value);
                    this._attachments = value;
                    this.RaiseDataMemberChanged("Attachments");
                    this.OnAttachmentsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompletePercentage' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> CompletePercentage
        {
            get
            {
                return this._completePercentage;
            }
            set
            {
                if ((this._completePercentage != value))
                {
                    this.OnCompletePercentageChanging(value);
                    this.RaiseDataMemberChanging("CompletePercentage");
                    this.ValidateProperty("CompletePercentage", value);
                    this._completePercentage = value;
                    this.RaiseDataMemberChanged("CompletePercentage");
                    this.OnCompletePercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DueDate' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<DateTime> DueDate
        {
            get
            {
                return this._dueDate;
            }
            set
            {
                if ((this._dueDate != value))
                {
                    this.OnDueDateChanging(value);
                    this.RaiseDataMemberChanging("DueDate");
                    this.ValidateProperty("DueDate", value);
                    this._dueDate = value;
                    this.RaiseDataMemberChanged("DueDate");
                    this.OnDueDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> EndDate
        {
            get
            {
                return this._endDate;
            }
            set
            {
                if ((this._endDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.RaiseDataMemberChanging("EndDate");
                    this.ValidateProperty("EndDate", value);
                    this._endDate = value;
                    this.RaiseDataMemberChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isDone' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> isDone
        {
            get
            {
                return this._isDone;
            }
            set
            {
                if ((this._isDone != value))
                {
                    this.OnisDoneChanging(value);
                    this.RaiseDataMemberChanging("isDone");
                    this.ValidateProperty("isDone", value);
                    this._isDone = value;
                    this.RaiseDataMemberChanged("isDone");
                    this.OnisDoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'plannedManHours' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> plannedManHours
        {
            get
            {
                return this._plannedManHours;
            }
            set
            {
                if ((this._plannedManHours != value))
                {
                    this.OnplannedManHoursChanging(value);
                    this.RaiseDataMemberChanging("plannedManHours");
                    this.ValidateProperty("plannedManHours", value);
                    this._plannedManHours = value;
                    this.RaiseDataMemberChanged("plannedManHours");
                    this.OnplannedManHoursChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PondID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public Nullable<int> PondID
        {
            get
            {
                return this._pondID;
            }
            set
            {
                if ((this._pondID != value))
                {
                    this.OnPondIDChanging(value);
                    this.RaiseDataMemberChanging("PondID");
                    this.ValidateProperty("PondID", value);
                    this._pondID = value;
                    this.RaiseDataMemberChanged("PondID");
                    this.OnPondIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Priority' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                if ((this._priority != value))
                {
                    this.OnPriorityChanging(value);
                    this.RaiseDataMemberChanging("Priority");
                    this.ValidateProperty("Priority", value);
                    this._priority = value;
                    this.RaiseDataMemberChanged("Priority");
                    this.OnPriorityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductionCycleID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public Nullable<int> ProductionCycleID
        {
            get
            {
                return this._productionCycleID;
            }
            set
            {
                if ((this._productionCycleID != value))
                {
                    this.OnProductionCycleIDChanging(value);
                    this.RaiseDataMemberChanging("ProductionCycleID");
                    this.ValidateProperty("ProductionCycleID", value);
                    this._productionCycleID = value;
                    this.RaiseDataMemberChanged("ProductionCycleID");
                    this.OnProductionCycleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReccurencePattern' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string ReccurencePattern
        {
            get
            {
                return this._reccurencePattern;
            }
            set
            {
                if ((this._reccurencePattern != value))
                {
                    this.OnReccurencePatternChanging(value);
                    this.RaiseDataMemberChanging("ReccurencePattern");
                    this.ValidateProperty("ReccurencePattern", value);
                    this._reccurencePattern = value;
                    this.RaiseDataMemberChanged("ReccurencePattern");
                    this.OnReccurencePatternChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> StartDate
        {
            get
            {
                return this._startDate;
            }
            set
            {
                if ((this._startDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.RaiseDataMemberChanging("StartDate");
                    this.ValidateProperty("StartDate", value);
                    this._startDate = value;
                    this.RaiseDataMemberChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TaskID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int TaskID
        {
            get
            {
                return this._taskID;
            }
            set
            {
                if ((this._taskID != value))
                {
                    this.OnTaskIDChanging(value);
                    this.ValidateProperty("TaskID", value);
                    this._taskID = value;
                    this.RaisePropertyChanged("TaskID");
                    this.OnTaskIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Title' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._taskID;
        }
    }
    
    /// <summary>
    /// The 'TaskNotDoneView' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class TaskNotDoneView : Entity
    {
        
        private int _assignedTo;
        
        private string _attachments;
        
        private Nullable<double> _completePercentage;
        
        private string _description;
        
        private Nullable<DateTime> _dueDate;
        
        private Nullable<DateTime> _endDate;
        
        private Nullable<bool> _isDone;
        
        private Nullable<double> _plannedManHours;
        
        private string _pondDescription;
        
        private string _priority;
        
        private Nullable<int> _productionCycleID;
        
        private string _reccurencePattern;
        
        private Nullable<DateTime> _startDate;
        
        private string _status;
        
        private int _taskID;
        
        private string _title;
        
        private string _userId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnassignedToChanging(int value);
        partial void OnassignedToChanged();
        partial void OnAttachmentsChanging(string value);
        partial void OnAttachmentsChanged();
        partial void OnCompletePercentageChanging(Nullable<double> value);
        partial void OnCompletePercentageChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDueDateChanging(Nullable<DateTime> value);
        partial void OnDueDateChanged();
        partial void OnEndDateChanging(Nullable<DateTime> value);
        partial void OnEndDateChanged();
        partial void OnisDoneChanging(Nullable<bool> value);
        partial void OnisDoneChanged();
        partial void OnplannedManHoursChanging(Nullable<double> value);
        partial void OnplannedManHoursChanged();
        partial void OnPondDescriptionChanging(string value);
        partial void OnPondDescriptionChanged();
        partial void OnPriorityChanging(string value);
        partial void OnPriorityChanged();
        partial void OnProductionCycleIDChanging(Nullable<int> value);
        partial void OnProductionCycleIDChanged();
        partial void OnReccurencePatternChanging(string value);
        partial void OnReccurencePatternChanged();
        partial void OnStartDateChanging(Nullable<DateTime> value);
        partial void OnStartDateChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnTaskIDChanging(int value);
        partial void OnTaskIDChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskNotDoneView"/> class.
        /// </summary>
        public TaskNotDoneView()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'assignedTo' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int assignedTo
        {
            get
            {
                return this._assignedTo;
            }
            set
            {
                if ((this._assignedTo != value))
                {
                    this.OnassignedToChanging(value);
                    this.ValidateProperty("assignedTo", value);
                    this._assignedTo = value;
                    this.RaisePropertyChanged("assignedTo");
                    this.OnassignedToChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Attachments' value.
        /// </summary>
        [DataMember()]
        public string Attachments
        {
            get
            {
                return this._attachments;
            }
            set
            {
                if ((this._attachments != value))
                {
                    this.OnAttachmentsChanging(value);
                    this.RaiseDataMemberChanging("Attachments");
                    this.ValidateProperty("Attachments", value);
                    this._attachments = value;
                    this.RaiseDataMemberChanged("Attachments");
                    this.OnAttachmentsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompletePercentage' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> CompletePercentage
        {
            get
            {
                return this._completePercentage;
            }
            set
            {
                if ((this._completePercentage != value))
                {
                    this.OnCompletePercentageChanging(value);
                    this.RaiseDataMemberChanging("CompletePercentage");
                    this.ValidateProperty("CompletePercentage", value);
                    this._completePercentage = value;
                    this.RaiseDataMemberChanged("CompletePercentage");
                    this.OnCompletePercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DueDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DueDate
        {
            get
            {
                return this._dueDate;
            }
            set
            {
                if ((this._dueDate != value))
                {
                    this.OnDueDateChanging(value);
                    this.RaiseDataMemberChanging("DueDate");
                    this.ValidateProperty("DueDate", value);
                    this._dueDate = value;
                    this.RaiseDataMemberChanged("DueDate");
                    this.OnDueDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EndDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> EndDate
        {
            get
            {
                return this._endDate;
            }
            set
            {
                if ((this._endDate != value))
                {
                    this.OnEndDateChanging(value);
                    this.RaiseDataMemberChanging("EndDate");
                    this.ValidateProperty("EndDate", value);
                    this._endDate = value;
                    this.RaiseDataMemberChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isDone' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> isDone
        {
            get
            {
                return this._isDone;
            }
            set
            {
                if ((this._isDone != value))
                {
                    this.OnisDoneChanging(value);
                    this.RaiseDataMemberChanging("isDone");
                    this.ValidateProperty("isDone", value);
                    this._isDone = value;
                    this.RaiseDataMemberChanged("isDone");
                    this.OnisDoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'plannedManHours' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> plannedManHours
        {
            get
            {
                return this._plannedManHours;
            }
            set
            {
                if ((this._plannedManHours != value))
                {
                    this.OnplannedManHoursChanging(value);
                    this.RaiseDataMemberChanging("plannedManHours");
                    this.ValidateProperty("plannedManHours", value);
                    this._plannedManHours = value;
                    this.RaiseDataMemberChanged("plannedManHours");
                    this.OnplannedManHoursChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PondDescription' value.
        /// </summary>
        [DataMember()]
        public string PondDescription
        {
            get
            {
                return this._pondDescription;
            }
            set
            {
                if ((this._pondDescription != value))
                {
                    this.OnPondDescriptionChanging(value);
                    this.RaiseDataMemberChanging("PondDescription");
                    this.ValidateProperty("PondDescription", value);
                    this._pondDescription = value;
                    this.RaiseDataMemberChanged("PondDescription");
                    this.OnPondDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Priority' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                if ((this._priority != value))
                {
                    this.OnPriorityChanging(value);
                    this.RaiseDataMemberChanging("Priority");
                    this.ValidateProperty("Priority", value);
                    this._priority = value;
                    this.RaiseDataMemberChanged("Priority");
                    this.OnPriorityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductionCycleID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ProductionCycleID
        {
            get
            {
                return this._productionCycleID;
            }
            set
            {
                if ((this._productionCycleID != value))
                {
                    this.OnProductionCycleIDChanging(value);
                    this.RaiseDataMemberChanging("ProductionCycleID");
                    this.ValidateProperty("ProductionCycleID", value);
                    this._productionCycleID = value;
                    this.RaiseDataMemberChanged("ProductionCycleID");
                    this.OnProductionCycleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ReccurencePattern' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string ReccurencePattern
        {
            get
            {
                return this._reccurencePattern;
            }
            set
            {
                if ((this._reccurencePattern != value))
                {
                    this.OnReccurencePatternChanging(value);
                    this.RaiseDataMemberChanging("ReccurencePattern");
                    this.ValidateProperty("ReccurencePattern", value);
                    this._reccurencePattern = value;
                    this.RaiseDataMemberChanged("ReccurencePattern");
                    this.OnReccurencePatternChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StartDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> StartDate
        {
            get
            {
                return this._startDate;
            }
            set
            {
                if ((this._startDate != value))
                {
                    this.OnStartDateChanging(value);
                    this.RaiseDataMemberChanging("StartDate");
                    this.ValidateProperty("StartDate", value);
                    this._startDate = value;
                    this.RaiseDataMemberChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(255)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaisePropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TaskID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int TaskID
        {
            get
            {
                return this._taskID;
            }
            set
            {
                if ((this._taskID != value))
                {
                    this.OnTaskIDChanging(value);
                    this.ValidateProperty("TaskID", value);
                    this._taskID = value;
                    this.RaisePropertyChanged("TaskID");
                    this.OnTaskIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Title' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(255)]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaisePropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._status == null) 
                        || (this._title == null)))
            {
                return null;
            }
            return EntityKey.Create(this._assignedTo, this._status, this._taskID, this._title);
        }
    }
    
    /// <summary>
    /// The 'UnitofMeasurement' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class UnitofMeasurement : Entity
    {
        
        private int _uomid;
        
        private string _uomName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnUOMIDChanging(int value);
        partial void OnUOMIDChanged();
        partial void OnUOMNameChanging(string value);
        partial void OnUOMNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitofMeasurement"/> class.
        /// </summary>
        public UnitofMeasurement()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'UOMID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int UOMID
        {
            get
            {
                return this._uomid;
            }
            set
            {
                if ((this._uomid != value))
                {
                    this.OnUOMIDChanging(value);
                    this.ValidateProperty("UOMID", value);
                    this._uomid = value;
                    this.RaisePropertyChanged("UOMID");
                    this.OnUOMIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UOMName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string UOMName
        {
            get
            {
                return this._uomName;
            }
            set
            {
                if ((this._uomName != value))
                {
                    this.OnUOMNameChanging(value);
                    this.RaiseDataMemberChanging("UOMName");
                    this.ValidateProperty("UOMName", value);
                    this._uomName = value;
                    this.RaiseDataMemberChanged("UOMName");
                    this.OnUOMNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._uomid;
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'UserRegistrationService' DomainService.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("tambak-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The 'WaterParameterLog' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/tambak.Web")]
    public sealed partial class WaterParameterLog : Entity
    {
        
        private Nullable<double> _ammonium;
        
        private Nullable<double> _amonnia;
        
        private string _bacteria;
        
        private Nullable<double> _dissolvedOxygen;
        
        private Nullable<bool> _imnv;
        
        private Nullable<bool> _isVibrioExist;
        
        private Nullable<DateTime> _logDate;
        
        private Nullable<double> _nitrate;
        
        private Nullable<double> _nitrite;
        
        private Nullable<int> _paddlewheel;
        
        private Nullable<double> _pH;
        
        private Nullable<double> _phospate;
        
        private Nullable<int> _planktons;
        
        private Nullable<double> _potentialRedox;
        
        private int _productionCycleID;
        
        private Nullable<double> _salinity;
        
        private Nullable<double> _temperature;
        
        private string _userID;
        
        private string _vibrio;
        
        private int _waterLogID;
        
        private Nullable<bool> _whiteSpot;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnammoniumChanging(Nullable<double> value);
        partial void OnammoniumChanged();
        partial void OnAmonniaChanging(Nullable<double> value);
        partial void OnAmonniaChanged();
        partial void OnBacteriaChanging(string value);
        partial void OnBacteriaChanged();
        partial void OnDissolvedOxygenChanging(Nullable<double> value);
        partial void OnDissolvedOxygenChanged();
        partial void OnIMNVChanging(Nullable<bool> value);
        partial void OnIMNVChanged();
        partial void OnisVibrioExistChanging(Nullable<bool> value);
        partial void OnisVibrioExistChanged();
        partial void OnLogDateChanging(Nullable<DateTime> value);
        partial void OnLogDateChanged();
        partial void OnnitrateChanging(Nullable<double> value);
        partial void OnnitrateChanged();
        partial void OnnitriteChanging(Nullable<double> value);
        partial void OnnitriteChanged();
        partial void OnPaddlewheelChanging(Nullable<int> value);
        partial void OnPaddlewheelChanged();
        partial void OnpHChanging(Nullable<double> value);
        partial void OnpHChanged();
        partial void OnPhospateChanging(Nullable<double> value);
        partial void OnPhospateChanged();
        partial void OnPlanktonsChanging(Nullable<int> value);
        partial void OnPlanktonsChanged();
        partial void OnPotentialRedoxChanging(Nullable<double> value);
        partial void OnPotentialRedoxChanged();
        partial void OnProductionCycleIDChanging(int value);
        partial void OnProductionCycleIDChanged();
        partial void OnSalinityChanging(Nullable<double> value);
        partial void OnSalinityChanged();
        partial void OnTemperatureChanging(Nullable<double> value);
        partial void OnTemperatureChanged();
        partial void OnUserIDChanging(string value);
        partial void OnUserIDChanged();
        partial void OnVibrioChanging(string value);
        partial void OnVibrioChanged();
        partial void OnWaterLogIDChanging(int value);
        partial void OnWaterLogIDChanged();
        partial void OnWhiteSpotChanging(Nullable<bool> value);
        partial void OnWhiteSpotChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WaterParameterLog"/> class.
        /// </summary>
        public WaterParameterLog()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ammonium' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> ammonium
        {
            get
            {
                return this._ammonium;
            }
            set
            {
                if ((this._ammonium != value))
                {
                    this.OnammoniumChanging(value);
                    this.RaiseDataMemberChanging("ammonium");
                    this.ValidateProperty("ammonium", value);
                    this._ammonium = value;
                    this.RaiseDataMemberChanged("ammonium");
                    this.OnammoniumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Amonnia' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Amonnia
        {
            get
            {
                return this._amonnia;
            }
            set
            {
                if ((this._amonnia != value))
                {
                    this.OnAmonniaChanging(value);
                    this.RaiseDataMemberChanging("Amonnia");
                    this.ValidateProperty("Amonnia", value);
                    this._amonnia = value;
                    this.RaiseDataMemberChanged("Amonnia");
                    this.OnAmonniaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Bacteria' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Bacteria
        {
            get
            {
                return this._bacteria;
            }
            set
            {
                if ((this._bacteria != value))
                {
                    this.OnBacteriaChanging(value);
                    this.RaiseDataMemberChanging("Bacteria");
                    this.ValidateProperty("Bacteria", value);
                    this._bacteria = value;
                    this.RaiseDataMemberChanged("Bacteria");
                    this.OnBacteriaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DissolvedOxygen' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> DissolvedOxygen
        {
            get
            {
                return this._dissolvedOxygen;
            }
            set
            {
                if ((this._dissolvedOxygen != value))
                {
                    this.OnDissolvedOxygenChanging(value);
                    this.RaiseDataMemberChanging("DissolvedOxygen");
                    this.ValidateProperty("DissolvedOxygen", value);
                    this._dissolvedOxygen = value;
                    this.RaiseDataMemberChanged("DissolvedOxygen");
                    this.OnDissolvedOxygenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IMNV' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IMNV
        {
            get
            {
                return this._imnv;
            }
            set
            {
                if ((this._imnv != value))
                {
                    this.OnIMNVChanging(value);
                    this.RaiseDataMemberChanging("IMNV");
                    this.ValidateProperty("IMNV", value);
                    this._imnv = value;
                    this.RaiseDataMemberChanged("IMNV");
                    this.OnIMNVChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isVibrioExist' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> isVibrioExist
        {
            get
            {
                return this._isVibrioExist;
            }
            set
            {
                if ((this._isVibrioExist != value))
                {
                    this.OnisVibrioExistChanging(value);
                    this.RaiseDataMemberChanging("isVibrioExist");
                    this.ValidateProperty("isVibrioExist", value);
                    this._isVibrioExist = value;
                    this.RaiseDataMemberChanged("isVibrioExist");
                    this.OnisVibrioExistChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LogDate' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public Nullable<DateTime> LogDate
        {
            get
            {
                return this._logDate;
            }
            set
            {
                if ((this._logDate != value))
                {
                    this.OnLogDateChanging(value);
                    this.RaiseDataMemberChanging("LogDate");
                    this.ValidateProperty("LogDate", value);
                    this._logDate = value;
                    this.RaiseDataMemberChanged("LogDate");
                    this.OnLogDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'nitrate' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> nitrate
        {
            get
            {
                return this._nitrate;
            }
            set
            {
                if ((this._nitrate != value))
                {
                    this.OnnitrateChanging(value);
                    this.RaiseDataMemberChanging("nitrate");
                    this.ValidateProperty("nitrate", value);
                    this._nitrate = value;
                    this.RaiseDataMemberChanged("nitrate");
                    this.OnnitrateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'nitrite' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> nitrite
        {
            get
            {
                return this._nitrite;
            }
            set
            {
                if ((this._nitrite != value))
                {
                    this.OnnitriteChanging(value);
                    this.RaiseDataMemberChanging("nitrite");
                    this.ValidateProperty("nitrite", value);
                    this._nitrite = value;
                    this.RaiseDataMemberChanged("nitrite");
                    this.OnnitriteChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Paddlewheel' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Paddlewheel
        {
            get
            {
                return this._paddlewheel;
            }
            set
            {
                if ((this._paddlewheel != value))
                {
                    this.OnPaddlewheelChanging(value);
                    this.RaiseDataMemberChanging("Paddlewheel");
                    this.ValidateProperty("Paddlewheel", value);
                    this._paddlewheel = value;
                    this.RaiseDataMemberChanged("Paddlewheel");
                    this.OnPaddlewheelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'pH' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> pH
        {
            get
            {
                return this._pH;
            }
            set
            {
                if ((this._pH != value))
                {
                    this.OnpHChanging(value);
                    this.RaiseDataMemberChanging("pH");
                    this.ValidateProperty("pH", value);
                    this._pH = value;
                    this.RaiseDataMemberChanged("pH");
                    this.OnpHChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Phospate' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Phospate
        {
            get
            {
                return this._phospate;
            }
            set
            {
                if ((this._phospate != value))
                {
                    this.OnPhospateChanging(value);
                    this.RaiseDataMemberChanging("Phospate");
                    this.ValidateProperty("Phospate", value);
                    this._phospate = value;
                    this.RaiseDataMemberChanged("Phospate");
                    this.OnPhospateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Planktons' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Planktons
        {
            get
            {
                return this._planktons;
            }
            set
            {
                if ((this._planktons != value))
                {
                    this.OnPlanktonsChanging(value);
                    this.RaiseDataMemberChanging("Planktons");
                    this.ValidateProperty("Planktons", value);
                    this._planktons = value;
                    this.RaiseDataMemberChanged("Planktons");
                    this.OnPlanktonsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PotentialRedox' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> PotentialRedox
        {
            get
            {
                return this._potentialRedox;
            }
            set
            {
                if ((this._potentialRedox != value))
                {
                    this.OnPotentialRedoxChanging(value);
                    this.RaiseDataMemberChanging("PotentialRedox");
                    this.ValidateProperty("PotentialRedox", value);
                    this._potentialRedox = value;
                    this.RaiseDataMemberChanged("PotentialRedox");
                    this.OnPotentialRedoxChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductionCycleID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ProductionCycleID
        {
            get
            {
                return this._productionCycleID;
            }
            set
            {
                if ((this._productionCycleID != value))
                {
                    this.OnProductionCycleIDChanging(value);
                    this.RaiseDataMemberChanging("ProductionCycleID");
                    this.ValidateProperty("ProductionCycleID", value);
                    this._productionCycleID = value;
                    this.RaiseDataMemberChanged("ProductionCycleID");
                    this.OnProductionCycleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Salinity' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Salinity
        {
            get
            {
                return this._salinity;
            }
            set
            {
                if ((this._salinity != value))
                {
                    this.OnSalinityChanging(value);
                    this.RaiseDataMemberChanging("Salinity");
                    this.ValidateProperty("Salinity", value);
                    this._salinity = value;
                    this.RaiseDataMemberChanged("Salinity");
                    this.OnSalinityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Temperature' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Temperature
        {
            get
            {
                return this._temperature;
            }
            set
            {
                if ((this._temperature != value))
                {
                    this.OnTemperatureChanging(value);
                    this.RaiseDataMemberChanging("Temperature");
                    this.ValidateProperty("Temperature", value);
                    this._temperature = value;
                    this.RaiseDataMemberChanged("Temperature");
                    this.OnTemperatureChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserID' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string UserID
        {
            get
            {
                return this._userID;
            }
            set
            {
                if ((this._userID != value))
                {
                    this.OnUserIDChanging(value);
                    this.RaiseDataMemberChanging("UserID");
                    this.ValidateProperty("UserID", value);
                    this._userID = value;
                    this.RaiseDataMemberChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Vibrio' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Vibrio
        {
            get
            {
                return this._vibrio;
            }
            set
            {
                if ((this._vibrio != value))
                {
                    this.OnVibrioChanging(value);
                    this.RaiseDataMemberChanging("Vibrio");
                    this.ValidateProperty("Vibrio", value);
                    this._vibrio = value;
                    this.RaiseDataMemberChanged("Vibrio");
                    this.OnVibrioChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WaterLogID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int WaterLogID
        {
            get
            {
                return this._waterLogID;
            }
            set
            {
                if ((this._waterLogID != value))
                {
                    this.OnWaterLogIDChanging(value);
                    this.ValidateProperty("WaterLogID", value);
                    this._waterLogID = value;
                    this.RaisePropertyChanged("WaterLogID");
                    this.OnWaterLogIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WhiteSpot' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> WhiteSpot
        {
            get
            {
                return this._whiteSpot;
            }
            set
            {
                if ((this._whiteSpot != value))
                {
                    this.OnWhiteSpotChanging(value);
                    this.RaiseDataMemberChanging("WhiteSpot");
                    this.ValidateProperty("WhiteSpot", value);
                    this._whiteSpot = value;
                    this.RaiseDataMemberChanged("WhiteSpot");
                    this.OnWhiteSpotChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._waterLogID;
        }
    }
}
namespace tambak.Web.DomainServices
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using tambak.Web;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AverageDailyFeedSummaryDS' DomainService.
    /// </summary>
    public sealed partial class AverageDailyFeedSummaryDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AverageDailyFeedSummaryDS"/> class.
        /// </summary>
        public AverageDailyFeedSummaryDS() : 
                this(new WebDomainClient<IAverageDailyFeedSummaryDSContract>(new Uri("tambak-Web-DomainServices-AverageDailyFeedSummaryDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AverageDailyFeedSummaryDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AverageDailyFeedSummaryDS service URI.</param>
        public AverageDailyFeedSummaryDS(Uri serviceUri) : 
                this(new WebDomainClient<IAverageDailyFeedSummaryDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AverageDailyFeedSummaryDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AverageDailyFeedSummaryDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="AverageDailyFeedSummary"/> entity instances that have been loaded into this <see cref="AverageDailyFeedSummaryDS"/> instance.
        /// </summary>
        public EntitySet<AverageDailyFeedSummary> AverageDailyFeedSummaries
        {
            get
            {
                return base.EntityContainer.GetEntitySet<AverageDailyFeedSummary>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="AverageDailyFeedSummary"/> entity instances using the 'GetAverageDailyFeedSummaries' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="AverageDailyFeedSummary"/> entity instances.</returns>
        public EntityQuery<AverageDailyFeedSummary> GetAverageDailyFeedSummariesQuery()
        {
            this.ValidateMethod("GetAverageDailyFeedSummariesQuery", null);
            return base.CreateQuery<AverageDailyFeedSummary>("GetAverageDailyFeedSummaries", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AverageDailyFeedSummaryDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AverageDailyFeedSummaryDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAverageDailyFeedSummaryDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetAverageDailyFeedSummaries' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AverageDailyFeedSummaryDS/GetAverageDailyFeedSummariesDomainSe" +
                "rviceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AverageDailyFeedSummaryDS/GetAverageDailyFeedSummaries", ReplyAction="http://tempuri.org/AverageDailyFeedSummaryDS/GetAverageDailyFeedSummariesResponse" +
                "")]
            [WebGet()]
            IAsyncResult BeginGetAverageDailyFeedSummaries(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAverageDailyFeedSummaries'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAverageDailyFeedSummaries'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAverageDailyFeedSummaries' operation.</returns>
            QueryResult<AverageDailyFeedSummary> EndGetAverageDailyFeedSummaries(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AverageDailyFeedSummaryDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AverageDailyFeedSummaryDS/SubmitChanges", ReplyAction="http://tempuri.org/AverageDailyFeedSummaryDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AverageDailyFeedSummaryDSEntityContainer : EntityContainer
        {
            
            public AverageDailyFeedSummaryDSEntityContainer()
            {
                this.CreateEntitySet<AverageDailyFeedSummary>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'BatchConsumptionJoinDS' DomainService.
    /// </summary>
    public sealed partial class BatchConsumptionJoinDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchConsumptionJoinDS"/> class.
        /// </summary>
        public BatchConsumptionJoinDS() : 
                this(new WebDomainClient<IBatchConsumptionJoinDSContract>(new Uri("tambak-Web-DomainServices-BatchConsumptionJoinDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchConsumptionJoinDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The BatchConsumptionJoinDS service URI.</param>
        public BatchConsumptionJoinDS(Uri serviceUri) : 
                this(new WebDomainClient<IBatchConsumptionJoinDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchConsumptionJoinDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public BatchConsumptionJoinDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="BatchConsumptionJoin"/> entity instances that have been loaded into this <see cref="BatchConsumptionJoinDS"/> instance.
        /// </summary>
        public EntitySet<BatchConsumptionJoin> BatchConsumptionJoins
        {
            get
            {
                return base.EntityContainer.GetEntitySet<BatchConsumptionJoin>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="BatchConsumptionJoin"/> entity instances using the 'GetBatchConsumptionJoins' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="BatchConsumptionJoin"/> entity instances.</returns>
        public EntityQuery<BatchConsumptionJoin> GetBatchConsumptionJoinsQuery()
        {
            this.ValidateMethod("GetBatchConsumptionJoinsQuery", null);
            return base.CreateQuery<BatchConsumptionJoin>("GetBatchConsumptionJoins", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new BatchConsumptionJoinDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'BatchConsumptionJoinDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IBatchConsumptionJoinDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetBatchConsumptionJoins' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BatchConsumptionJoinDS/GetBatchConsumptionJoinsDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BatchConsumptionJoinDS/GetBatchConsumptionJoins", ReplyAction="http://tempuri.org/BatchConsumptionJoinDS/GetBatchConsumptionJoinsResponse")]
            [WebGet()]
            IAsyncResult BeginGetBatchConsumptionJoins(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBatchConsumptionJoins'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBatchConsumptionJoins'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBatchConsumptionJoins' operation.</returns>
            QueryResult<BatchConsumptionJoin> EndGetBatchConsumptionJoins(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BatchConsumptionJoinDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BatchConsumptionJoinDS/SubmitChanges", ReplyAction="http://tempuri.org/BatchConsumptionJoinDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class BatchConsumptionJoinDSEntityContainer : EntityContainer
        {
            
            public BatchConsumptionJoinDSEntityContainer()
            {
                this.CreateEntitySet<BatchConsumptionJoin>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'BatchDetailDS' DomainService.
    /// </summary>
    public sealed partial class BatchDetailDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchDetailDS"/> class.
        /// </summary>
        public BatchDetailDS() : 
                this(new WebDomainClient<IBatchDetailDSContract>(new Uri("tambak-Web-DomainServices-BatchDetailDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchDetailDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The BatchDetailDS service URI.</param>
        public BatchDetailDS(Uri serviceUri) : 
                this(new WebDomainClient<IBatchDetailDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchDetailDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public BatchDetailDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="BatchDetail"/> entity instances that have been loaded into this <see cref="BatchDetailDS"/> instance.
        /// </summary>
        public EntitySet<BatchDetail> BatchDetails
        {
            get
            {
                return base.EntityContainer.GetEntitySet<BatchDetail>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="BatchDetail"/> entity instances using the 'GetBatchDetails' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="BatchDetail"/> entity instances.</returns>
        public EntityQuery<BatchDetail> GetBatchDetailsQuery()
        {
            this.ValidateMethod("GetBatchDetailsQuery", null);
            return base.CreateQuery<BatchDetail>("GetBatchDetails", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new BatchDetailDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'BatchDetailDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IBatchDetailDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetBatchDetails' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BatchDetailDS/GetBatchDetailsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BatchDetailDS/GetBatchDetails", ReplyAction="http://tempuri.org/BatchDetailDS/GetBatchDetailsResponse")]
            [WebGet()]
            IAsyncResult BeginGetBatchDetails(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBatchDetails'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBatchDetails'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBatchDetails' operation.</returns>
            QueryResult<BatchDetail> EndGetBatchDetails(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BatchDetailDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BatchDetailDS/SubmitChanges", ReplyAction="http://tempuri.org/BatchDetailDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class BatchDetailDSEntityContainer : EntityContainer
        {
            
            public BatchDetailDSEntityContainer()
            {
                this.CreateEntitySet<BatchDetail>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'BatchHeaderDS' DomainService.
    /// </summary>
    public sealed partial class BatchHeaderDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchHeaderDS"/> class.
        /// </summary>
        public BatchHeaderDS() : 
                this(new WebDomainClient<IBatchHeaderDSContract>(new Uri("tambak-Web-DomainServices-BatchHeaderDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchHeaderDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The BatchHeaderDS service URI.</param>
        public BatchHeaderDS(Uri serviceUri) : 
                this(new WebDomainClient<IBatchHeaderDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchHeaderDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public BatchHeaderDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="BatchHeader"/> entity instances that have been loaded into this <see cref="BatchHeaderDS"/> instance.
        /// </summary>
        public EntitySet<BatchHeader> BatchHeaders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<BatchHeader>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="BatchHeader"/> entity instances using the 'GetBatchHeaders' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="BatchHeader"/> entity instances.</returns>
        public EntityQuery<BatchHeader> GetBatchHeadersQuery()
        {
            this.ValidateMethod("GetBatchHeadersQuery", null);
            return base.CreateQuery<BatchHeader>("GetBatchHeaders", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new BatchHeaderDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'BatchHeaderDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IBatchHeaderDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetBatchHeaders' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BatchHeaderDS/GetBatchHeadersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BatchHeaderDS/GetBatchHeaders", ReplyAction="http://tempuri.org/BatchHeaderDS/GetBatchHeadersResponse")]
            [WebGet()]
            IAsyncResult BeginGetBatchHeaders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBatchHeaders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBatchHeaders'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBatchHeaders' operation.</returns>
            QueryResult<BatchHeader> EndGetBatchHeaders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BatchHeaderDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BatchHeaderDS/SubmitChanges", ReplyAction="http://tempuri.org/BatchHeaderDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class BatchHeaderDSEntityContainer : EntityContainer
        {
            
            public BatchHeaderDSEntityContainer()
            {
                this.CreateEntitySet<BatchHeader>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'BatchQuantityViewDS' DomainService.
    /// </summary>
    public sealed partial class BatchQuantityViewDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchQuantityViewDS"/> class.
        /// </summary>
        public BatchQuantityViewDS() : 
                this(new WebDomainClient<IBatchQuantityViewDSContract>(new Uri("tambak-Web-DomainServices-BatchQuantityViewDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchQuantityViewDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The BatchQuantityViewDS service URI.</param>
        public BatchQuantityViewDS(Uri serviceUri) : 
                this(new WebDomainClient<IBatchQuantityViewDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchQuantityViewDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public BatchQuantityViewDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="batchQuantityView"/> entity instances that have been loaded into this <see cref="BatchQuantityViewDS"/> instance.
        /// </summary>
        public EntitySet<batchQuantityView> batchQuantityViews
        {
            get
            {
                return base.EntityContainer.GetEntitySet<batchQuantityView>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="batchQuantityView"/> entity instances using the 'GetBatchQuantityViews' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="batchQuantityView"/> entity instances.</returns>
        public EntityQuery<batchQuantityView> GetBatchQuantityViewsQuery()
        {
            this.ValidateMethod("GetBatchQuantityViewsQuery", null);
            return base.CreateQuery<batchQuantityView>("GetBatchQuantityViews", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new BatchQuantityViewDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'BatchQuantityViewDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IBatchQuantityViewDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetBatchQuantityViews' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BatchQuantityViewDS/GetBatchQuantityViewsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BatchQuantityViewDS/GetBatchQuantityViews", ReplyAction="http://tempuri.org/BatchQuantityViewDS/GetBatchQuantityViewsResponse")]
            [WebGet()]
            IAsyncResult BeginGetBatchQuantityViews(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBatchQuantityViews'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBatchQuantityViews'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBatchQuantityViews' operation.</returns>
            QueryResult<batchQuantityView> EndGetBatchQuantityViews(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BatchQuantityViewDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BatchQuantityViewDS/SubmitChanges", ReplyAction="http://tempuri.org/BatchQuantityViewDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class BatchQuantityViewDSEntityContainer : EntityContainer
        {
            
            public BatchQuantityViewDSEntityContainer()
            {
                this.CreateEntitySet<batchQuantityView>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'CategoryDS' DomainService.
    /// </summary>
    public sealed partial class CategoryDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryDS"/> class.
        /// </summary>
        public CategoryDS() : 
                this(new WebDomainClient<ICategoryDSContract>(new Uri("tambak-Web-DomainServices-CategoryDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CategoryDS service URI.</param>
        public CategoryDS(Uri serviceUri) : 
                this(new WebDomainClient<ICategoryDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoryDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CategoryDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Category"/> entity instances that have been loaded into this <see cref="CategoryDS"/> instance.
        /// </summary>
        public EntitySet<Category> Categories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Category>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Category"/> entity instances using the 'GetCategories' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Category"/> entity instances.</returns>
        public EntityQuery<Category> GetCategoriesQuery()
        {
            this.ValidateMethod("GetCategoriesQuery", null);
            return base.CreateQuery<Category>("GetCategories", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CategoryDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CategoryDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICategoryDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCategories' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CategoryDS/GetCategoriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CategoryDS/GetCategories", ReplyAction="http://tempuri.org/CategoryDS/GetCategoriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCategories(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCategories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCategories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCategories' operation.</returns>
            QueryResult<Category> EndGetCategories(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CategoryDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CategoryDS/SubmitChanges", ReplyAction="http://tempuri.org/CategoryDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class CategoryDSEntityContainer : EntityContainer
        {
            
            public CategoryDSEntityContainer()
            {
                this.CreateEntitySet<Category>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'CompanyDS' DomainService.
    /// </summary>
    public sealed partial class CompanyDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyDS"/> class.
        /// </summary>
        public CompanyDS() : 
                this(new WebDomainClient<ICompanyDSContract>(new Uri("tambak-Web-DomainServices-CompanyDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CompanyDS service URI.</param>
        public CompanyDS(Uri serviceUri) : 
                this(new WebDomainClient<ICompanyDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CompanyDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Company"/> entity instances that have been loaded into this <see cref="CompanyDS"/> instance.
        /// </summary>
        public EntitySet<Company> Companies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Company>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Company"/> entity instances using the 'GetCompanies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Company"/> entity instances.</returns>
        public EntityQuery<Company> GetCompaniesQuery()
        {
            this.ValidateMethod("GetCompaniesQuery", null);
            return base.CreateQuery<Company>("GetCompanies", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CompanyDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CompanyDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICompanyDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompanies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CompanyDS/GetCompaniesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CompanyDS/GetCompanies", ReplyAction="http://tempuri.org/CompanyDS/GetCompaniesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompanies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompanies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompanies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompanies' operation.</returns>
            QueryResult<Company> EndGetCompanies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CompanyDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CompanyDS/SubmitChanges", ReplyAction="http://tempuri.org/CompanyDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class CompanyDSEntityContainer : EntityContainer
        {
            
            public CompanyDSEntityContainer()
            {
                this.CreateEntitySet<Company>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ContactDS' DomainService.
    /// </summary>
    public sealed partial class ContactDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactDS"/> class.
        /// </summary>
        public ContactDS() : 
                this(new WebDomainClient<IContactDSContract>(new Uri("tambak-Web-DomainServices-ContactDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ContactDS service URI.</param>
        public ContactDS(Uri serviceUri) : 
                this(new WebDomainClient<IContactDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ContactDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Contact"/> entity instances that have been loaded into this <see cref="ContactDS"/> instance.
        /// </summary>
        public EntitySet<Contact> Contacts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Contact>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Contact"/> entity instances using the 'GetContacts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Contact"/> entity instances.</returns>
        public EntityQuery<Contact> GetContactsQuery()
        {
            this.ValidateMethod("GetContactsQuery", null);
            return base.CreateQuery<Contact>("GetContacts", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ContactDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ContactDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IContactDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetContacts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ContactDS/GetContactsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ContactDS/GetContacts", ReplyAction="http://tempuri.org/ContactDS/GetContactsResponse")]
            [WebGet()]
            IAsyncResult BeginGetContacts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetContacts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetContacts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetContacts' operation.</returns>
            QueryResult<Contact> EndGetContacts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ContactDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ContactDS/SubmitChanges", ReplyAction="http://tempuri.org/ContactDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ContactDSEntityContainer : EntityContainer
        {
            
            public ContactDSEntityContainer()
            {
                this.CreateEntitySet<Contact>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ContactToUserLinkDS' DomainService.
    /// </summary>
    public sealed partial class ContactToUserLinkDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactToUserLinkDS"/> class.
        /// </summary>
        public ContactToUserLinkDS() : 
                this(new WebDomainClient<IContactToUserLinkDSContract>(new Uri("tambak-Web-DomainServices-ContactToUserLinkDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactToUserLinkDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ContactToUserLinkDS service URI.</param>
        public ContactToUserLinkDS(Uri serviceUri) : 
                this(new WebDomainClient<IContactToUserLinkDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactToUserLinkDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ContactToUserLinkDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ContactToUserLink"/> entity instances that have been loaded into this <see cref="ContactToUserLinkDS"/> instance.
        /// </summary>
        public EntitySet<ContactToUserLink> ContactToUserLinks
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ContactToUserLink>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ContactToUserLink"/> entity instances using the 'GetContactToUserLinks' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ContactToUserLink"/> entity instances.</returns>
        public EntityQuery<ContactToUserLink> GetContactToUserLinksQuery()
        {
            this.ValidateMethod("GetContactToUserLinksQuery", null);
            return base.CreateQuery<ContactToUserLink>("GetContactToUserLinks", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ContactToUserLinkDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ContactToUserLinkDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IContactToUserLinkDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetContactToUserLinks' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ContactToUserLinkDS/GetContactToUserLinksDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ContactToUserLinkDS/GetContactToUserLinks", ReplyAction="http://tempuri.org/ContactToUserLinkDS/GetContactToUserLinksResponse")]
            [WebGet()]
            IAsyncResult BeginGetContactToUserLinks(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetContactToUserLinks'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetContactToUserLinks'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetContactToUserLinks' operation.</returns>
            QueryResult<ContactToUserLink> EndGetContactToUserLinks(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ContactToUserLinkDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ContactToUserLinkDS/SubmitChanges", ReplyAction="http://tempuri.org/ContactToUserLinkDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ContactToUserLinkDSEntityContainer : EntityContainer
        {
            
            public ContactToUserLinkDSEntityContainer()
            {
                this.CreateEntitySet<ContactToUserLink>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'CummulativeFeedViewDS' DomainService.
    /// </summary>
    public sealed partial class CummulativeFeedViewDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CummulativeFeedViewDS"/> class.
        /// </summary>
        public CummulativeFeedViewDS() : 
                this(new WebDomainClient<ICummulativeFeedViewDSContract>(new Uri("tambak-Web-DomainServices-CummulativeFeedViewDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CummulativeFeedViewDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CummulativeFeedViewDS service URI.</param>
        public CummulativeFeedViewDS(Uri serviceUri) : 
                this(new WebDomainClient<ICummulativeFeedViewDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CummulativeFeedViewDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CummulativeFeedViewDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="CumulativeFeedView"/> entity instances that have been loaded into this <see cref="CummulativeFeedViewDS"/> instance.
        /// </summary>
        public EntitySet<CumulativeFeedView> CumulativeFeedViews
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CumulativeFeedView>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CumulativeFeedView"/> entity instances using the 'GetCumulativeFeedViews' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CumulativeFeedView"/> entity instances.</returns>
        public EntityQuery<CumulativeFeedView> GetCumulativeFeedViewsQuery()
        {
            this.ValidateMethod("GetCumulativeFeedViewsQuery", null);
            return base.CreateQuery<CumulativeFeedView>("GetCumulativeFeedViews", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CummulativeFeedViewDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CummulativeFeedViewDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICummulativeFeedViewDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCumulativeFeedViews' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CummulativeFeedViewDS/GetCumulativeFeedViewsDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CummulativeFeedViewDS/GetCumulativeFeedViews", ReplyAction="http://tempuri.org/CummulativeFeedViewDS/GetCumulativeFeedViewsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCumulativeFeedViews(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCumulativeFeedViews'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCumulativeFeedViews'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCumulativeFeedViews' operation.</returns>
            QueryResult<CumulativeFeedView> EndGetCumulativeFeedViews(IAsyncResult result);
        }
        
        internal sealed class CummulativeFeedViewDSEntityContainer : EntityContainer
        {
            
            public CummulativeFeedViewDSEntityContainer()
            {
                this.CreateEntitySet<CumulativeFeedView>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'CurrencyRateDS' DomainService.
    /// </summary>
    public sealed partial class CurrencyRateDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyRateDS"/> class.
        /// </summary>
        public CurrencyRateDS() : 
                this(new WebDomainClient<ICurrencyRateDSContract>(new Uri("tambak-Web-DomainServices-CurrencyRateDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyRateDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CurrencyRateDS service URI.</param>
        public CurrencyRateDS(Uri serviceUri) : 
                this(new WebDomainClient<ICurrencyRateDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyRateDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CurrencyRateDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="CurrencyRate"/> entity instances that have been loaded into this <see cref="CurrencyRateDS"/> instance.
        /// </summary>
        public EntitySet<CurrencyRate> CurrencyRates
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CurrencyRate>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CurrencyRate"/> entity instances using the 'GetCurrencyRates' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CurrencyRate"/> entity instances.</returns>
        public EntityQuery<CurrencyRate> GetCurrencyRatesQuery()
        {
            this.ValidateMethod("GetCurrencyRatesQuery", null);
            return base.CreateQuery<CurrencyRate>("GetCurrencyRates", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CurrencyRateDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CurrencyRateDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICurrencyRateDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCurrencyRates' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CurrencyRateDS/GetCurrencyRatesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CurrencyRateDS/GetCurrencyRates", ReplyAction="http://tempuri.org/CurrencyRateDS/GetCurrencyRatesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCurrencyRates(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCurrencyRates'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCurrencyRates'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCurrencyRates' operation.</returns>
            QueryResult<CurrencyRate> EndGetCurrencyRates(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CurrencyRateDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CurrencyRateDS/SubmitChanges", ReplyAction="http://tempuri.org/CurrencyRateDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class CurrencyRateDSEntityContainer : EntityContainer
        {
            
            public CurrencyRateDSEntityContainer()
            {
                this.CreateEntitySet<CurrencyRate>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'CurrentActivePondsViewDS' DomainService.
    /// </summary>
    public sealed partial class CurrentActivePondsViewDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentActivePondsViewDS"/> class.
        /// </summary>
        public CurrentActivePondsViewDS() : 
                this(new WebDomainClient<ICurrentActivePondsViewDSContract>(new Uri("tambak-Web-DomainServices-CurrentActivePondsViewDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentActivePondsViewDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CurrentActivePondsViewDS service URI.</param>
        public CurrentActivePondsViewDS(Uri serviceUri) : 
                this(new WebDomainClient<ICurrentActivePondsViewDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentActivePondsViewDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CurrentActivePondsViewDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="CurrentActivePond"/> entity instances that have been loaded into this <see cref="CurrentActivePondsViewDS"/> instance.
        /// </summary>
        public EntitySet<CurrentActivePond> CurrentActivePonds
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CurrentActivePond>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CurrentActivePond"/> entity instances using the 'GetCurrentActivePonds' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CurrentActivePond"/> entity instances.</returns>
        public EntityQuery<CurrentActivePond> GetCurrentActivePondsQuery()
        {
            this.ValidateMethod("GetCurrentActivePondsQuery", null);
            return base.CreateQuery<CurrentActivePond>("GetCurrentActivePonds", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CurrentActivePondsViewDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CurrentActivePondsViewDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICurrentActivePondsViewDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCurrentActivePonds' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CurrentActivePondsViewDS/GetCurrentActivePondsDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CurrentActivePondsViewDS/GetCurrentActivePonds", ReplyAction="http://tempuri.org/CurrentActivePondsViewDS/GetCurrentActivePondsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCurrentActivePonds(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCurrentActivePonds'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCurrentActivePonds'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCurrentActivePonds' operation.</returns>
            QueryResult<CurrentActivePond> EndGetCurrentActivePonds(IAsyncResult result);
        }
        
        internal sealed class CurrentActivePondsViewDSEntityContainer : EntityContainer
        {
            
            public CurrentActivePondsViewDSEntityContainer()
            {
                this.CreateEntitySet<CurrentActivePond>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'CurrentInventoryViewDS' DomainService.
    /// </summary>
    public sealed partial class CurrentInventoryViewDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentInventoryViewDS"/> class.
        /// </summary>
        public CurrentInventoryViewDS() : 
                this(new WebDomainClient<ICurrentInventoryViewDSContract>(new Uri("tambak-Web-DomainServices-CurrentInventoryViewDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentInventoryViewDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CurrentInventoryViewDS service URI.</param>
        public CurrentInventoryViewDS(Uri serviceUri) : 
                this(new WebDomainClient<ICurrentInventoryViewDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentInventoryViewDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CurrentInventoryViewDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="CurrentInventoryView"/> entity instances that have been loaded into this <see cref="CurrentInventoryViewDS"/> instance.
        /// </summary>
        public EntitySet<CurrentInventoryView> CurrentInventoryViews
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CurrentInventoryView>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CurrentInventoryView"/> entity instances using the 'GetCurrentInventoryViews' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CurrentInventoryView"/> entity instances.</returns>
        public EntityQuery<CurrentInventoryView> GetCurrentInventoryViewsQuery()
        {
            this.ValidateMethod("GetCurrentInventoryViewsQuery", null);
            return base.CreateQuery<CurrentInventoryView>("GetCurrentInventoryViews", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CurrentInventoryViewDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CurrentInventoryViewDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICurrentInventoryViewDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCurrentInventoryViews' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CurrentInventoryViewDS/GetCurrentInventoryViewsDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CurrentInventoryViewDS/GetCurrentInventoryViews", ReplyAction="http://tempuri.org/CurrentInventoryViewDS/GetCurrentInventoryViewsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCurrentInventoryViews(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCurrentInventoryViews'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCurrentInventoryViews'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCurrentInventoryViews' operation.</returns>
            QueryResult<CurrentInventoryView> EndGetCurrentInventoryViews(IAsyncResult result);
        }
        
        internal sealed class CurrentInventoryViewDSEntityContainer : EntityContainer
        {
            
            public CurrentInventoryViewDSEntityContainer()
            {
                this.CreateEntitySet<CurrentInventoryView>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'DeliveryLogDS' DomainService.
    /// </summary>
    public sealed partial class DeliveryLogDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryLogDS"/> class.
        /// </summary>
        public DeliveryLogDS() : 
                this(new WebDomainClient<IDeliveryLogDSContract>(new Uri("tambak-Web-DomainServices-DeliveryLogDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryLogDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The DeliveryLogDS service URI.</param>
        public DeliveryLogDS(Uri serviceUri) : 
                this(new WebDomainClient<IDeliveryLogDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryLogDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public DeliveryLogDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="DeliveryLog"/> entity instances that have been loaded into this <see cref="DeliveryLogDS"/> instance.
        /// </summary>
        public EntitySet<DeliveryLog> DeliveryLogs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DeliveryLog>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DeliveryLog"/> entity instances using the 'GetDeliveryLogs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DeliveryLog"/> entity instances.</returns>
        public EntityQuery<DeliveryLog> GetDeliveryLogsQuery()
        {
            this.ValidateMethod("GetDeliveryLogsQuery", null);
            return base.CreateQuery<DeliveryLog>("GetDeliveryLogs", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new DeliveryLogDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'DeliveryLogDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IDeliveryLogDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetDeliveryLogs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DeliveryLogDS/GetDeliveryLogsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DeliveryLogDS/GetDeliveryLogs", ReplyAction="http://tempuri.org/DeliveryLogDS/GetDeliveryLogsResponse")]
            [WebGet()]
            IAsyncResult BeginGetDeliveryLogs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDeliveryLogs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDeliveryLogs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDeliveryLogs' operation.</returns>
            QueryResult<DeliveryLog> EndGetDeliveryLogs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DeliveryLogDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DeliveryLogDS/SubmitChanges", ReplyAction="http://tempuri.org/DeliveryLogDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class DeliveryLogDSEntityContainer : EntityContainer
        {
            
            public DeliveryLogDSEntityContainer()
            {
                this.CreateEntitySet<DeliveryLog>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'EmployeeNameViewDS' DomainService.
    /// </summary>
    public sealed partial class EmployeeNameViewDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeNameViewDS"/> class.
        /// </summary>
        public EmployeeNameViewDS() : 
                this(new WebDomainClient<IEmployeeNameViewDSContract>(new Uri("tambak-Web-DomainServices-EmployeeNameViewDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeNameViewDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The EmployeeNameViewDS service URI.</param>
        public EmployeeNameViewDS(Uri serviceUri) : 
                this(new WebDomainClient<IEmployeeNameViewDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeNameViewDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public EmployeeNameViewDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="EmployeeNameView"/> entity instances that have been loaded into this <see cref="EmployeeNameViewDS"/> instance.
        /// </summary>
        public EntitySet<EmployeeNameView> EmployeeNameViews
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EmployeeNameView>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="EmployeeNameView"/> entity instances using the 'GetEmployeeNameViews' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="EmployeeNameView"/> entity instances.</returns>
        public EntityQuery<EmployeeNameView> GetEmployeeNameViewsQuery()
        {
            this.ValidateMethod("GetEmployeeNameViewsQuery", null);
            return base.CreateQuery<EmployeeNameView>("GetEmployeeNameViews", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new EmployeeNameViewDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'EmployeeNameViewDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IEmployeeNameViewDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployeeNameViews' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EmployeeNameViewDS/GetEmployeeNameViewsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EmployeeNameViewDS/GetEmployeeNameViews", ReplyAction="http://tempuri.org/EmployeeNameViewDS/GetEmployeeNameViewsResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployeeNameViews(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployeeNameViews'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployeeNameViews'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployeeNameViews' operation.</returns>
            QueryResult<EmployeeNameView> EndGetEmployeeNameViews(IAsyncResult result);
        }
        
        internal sealed class EmployeeNameViewDSEntityContainer : EntityContainer
        {
            
            public EmployeeNameViewDSEntityContainer()
            {
                this.CreateEntitySet<EmployeeNameView>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'FacilityDS' DomainService.
    /// </summary>
    public sealed partial class FacilityDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FacilityDS"/> class.
        /// </summary>
        public FacilityDS() : 
                this(new WebDomainClient<IFacilityDSContract>(new Uri("tambak-Web-DomainServices-FacilityDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FacilityDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The FacilityDS service URI.</param>
        public FacilityDS(Uri serviceUri) : 
                this(new WebDomainClient<IFacilityDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FacilityDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public FacilityDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Facility"/> entity instances that have been loaded into this <see cref="FacilityDS"/> instance.
        /// </summary>
        public EntitySet<Facility> Facilities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Facility>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Facility"/> entity instances using the 'GetFacilities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Facility"/> entity instances.</returns>
        public EntityQuery<Facility> GetFacilitiesQuery()
        {
            this.ValidateMethod("GetFacilitiesQuery", null);
            return base.CreateQuery<Facility>("GetFacilities", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new FacilityDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'FacilityDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IFacilityDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetFacilities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FacilityDS/GetFacilitiesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FacilityDS/GetFacilities", ReplyAction="http://tempuri.org/FacilityDS/GetFacilitiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetFacilities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFacilities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFacilities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFacilities' operation.</returns>
            QueryResult<Facility> EndGetFacilities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FacilityDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FacilityDS/SubmitChanges", ReplyAction="http://tempuri.org/FacilityDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class FacilityDSEntityContainer : EntityContainer
        {
            
            public FacilityDSEntityContainer()
            {
                this.CreateEntitySet<Facility>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'FeedingAuditViewDS' DomainService.
    /// </summary>
    public sealed partial class FeedingAuditViewDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedingAuditViewDS"/> class.
        /// </summary>
        public FeedingAuditViewDS() : 
                this(new WebDomainClient<IFeedingAuditViewDSContract>(new Uri("tambak-Web-DomainServices-FeedingAuditViewDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedingAuditViewDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The FeedingAuditViewDS service URI.</param>
        public FeedingAuditViewDS(Uri serviceUri) : 
                this(new WebDomainClient<IFeedingAuditViewDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedingAuditViewDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public FeedingAuditViewDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="FeedingAuditView"/> entity instances that have been loaded into this <see cref="FeedingAuditViewDS"/> instance.
        /// </summary>
        public EntitySet<FeedingAuditView> FeedingAuditViews
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FeedingAuditView>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FeedingAuditView"/> entity instances using the 'GetFeedingAuditViews' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FeedingAuditView"/> entity instances.</returns>
        public EntityQuery<FeedingAuditView> GetFeedingAuditViewsQuery()
        {
            this.ValidateMethod("GetFeedingAuditViewsQuery", null);
            return base.CreateQuery<FeedingAuditView>("GetFeedingAuditViews", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new FeedingAuditViewDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'FeedingAuditViewDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IFeedingAuditViewDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetFeedingAuditViews' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FeedingAuditViewDS/GetFeedingAuditViewsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FeedingAuditViewDS/GetFeedingAuditViews", ReplyAction="http://tempuri.org/FeedingAuditViewDS/GetFeedingAuditViewsResponse")]
            [WebGet()]
            IAsyncResult BeginGetFeedingAuditViews(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFeedingAuditViews'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFeedingAuditViews'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFeedingAuditViews' operation.</returns>
            QueryResult<FeedingAuditView> EndGetFeedingAuditViews(IAsyncResult result);
        }
        
        internal sealed class FeedingAuditViewDSEntityContainer : EntityContainer
        {
            
            public FeedingAuditViewDSEntityContainer()
            {
                this.CreateEntitySet<FeedingAuditView>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'FeedingLogsDS' DomainService.
    /// </summary>
    public sealed partial class FeedingLogsDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedingLogsDS"/> class.
        /// </summary>
        public FeedingLogsDS() : 
                this(new WebDomainClient<IFeedingLogsDSContract>(new Uri("tambak-Web-DomainServices-FeedingLogsDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedingLogsDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The FeedingLogsDS service URI.</param>
        public FeedingLogsDS(Uri serviceUri) : 
                this(new WebDomainClient<IFeedingLogsDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedingLogsDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public FeedingLogsDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="FeedingLog"/> entity instances that have been loaded into this <see cref="FeedingLogsDS"/> instance.
        /// </summary>
        public EntitySet<FeedingLog> FeedingLogs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FeedingLog>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FeedingLog"/> entity instances using the 'GetFeedingLogs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FeedingLog"/> entity instances.</returns>
        public EntityQuery<FeedingLog> GetFeedingLogsQuery()
        {
            this.ValidateMethod("GetFeedingLogsQuery", null);
            return base.CreateQuery<FeedingLog>("GetFeedingLogs", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new FeedingLogsDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'FeedingLogsDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IFeedingLogsDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetFeedingLogs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FeedingLogsDS/GetFeedingLogsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FeedingLogsDS/GetFeedingLogs", ReplyAction="http://tempuri.org/FeedingLogsDS/GetFeedingLogsResponse")]
            [WebGet()]
            IAsyncResult BeginGetFeedingLogs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFeedingLogs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFeedingLogs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFeedingLogs' operation.</returns>
            QueryResult<FeedingLog> EndGetFeedingLogs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FeedingLogsDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FeedingLogsDS/SubmitChanges", ReplyAction="http://tempuri.org/FeedingLogsDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class FeedingLogsDSEntityContainer : EntityContainer
        {
            
            public FeedingLogsDSEntityContainer()
            {
                this.CreateEntitySet<FeedingLog>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'FeedingRateGuideDS' DomainService.
    /// </summary>
    public sealed partial class FeedingRateGuideDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedingRateGuideDS"/> class.
        /// </summary>
        public FeedingRateGuideDS() : 
                this(new WebDomainClient<IFeedingRateGuideDSContract>(new Uri("tambak-Web-DomainServices-FeedingRateGuideDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedingRateGuideDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The FeedingRateGuideDS service URI.</param>
        public FeedingRateGuideDS(Uri serviceUri) : 
                this(new WebDomainClient<IFeedingRateGuideDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedingRateGuideDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public FeedingRateGuideDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="FRGuide"/> entity instances that have been loaded into this <see cref="FeedingRateGuideDS"/> instance.
        /// </summary>
        public EntitySet<FRGuide> FRGuides
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FRGuide>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FRGuide"/> entity instances using the 'GetFRGuides' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FRGuide"/> entity instances.</returns>
        public EntityQuery<FRGuide> GetFRGuidesQuery()
        {
            this.ValidateMethod("GetFRGuidesQuery", null);
            return base.CreateQuery<FRGuide>("GetFRGuides", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new FeedingRateGuideDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'FeedingRateGuideDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IFeedingRateGuideDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetFRGuides' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FeedingRateGuideDS/GetFRGuidesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FeedingRateGuideDS/GetFRGuides", ReplyAction="http://tempuri.org/FeedingRateGuideDS/GetFRGuidesResponse")]
            [WebGet()]
            IAsyncResult BeginGetFRGuides(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFRGuides'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFRGuides'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFRGuides' operation.</returns>
            QueryResult<FRGuide> EndGetFRGuides(IAsyncResult result);
        }
        
        internal sealed class FeedingRateGuideDSEntityContainer : EntityContainer
        {
            
            public FeedingRateGuideDSEntityContainer()
            {
                this.CreateEntitySet<FRGuide>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'FourteenDaysFeedEstimateDS' DomainService.
    /// </summary>
    public sealed partial class FourteenDaysFeedEstimateDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FourteenDaysFeedEstimateDS"/> class.
        /// </summary>
        public FourteenDaysFeedEstimateDS() : 
                this(new WebDomainClient<IFourteenDaysFeedEstimateDSContract>(new Uri("tambak-Web-DomainServices-FourteenDaysFeedEstimateDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FourteenDaysFeedEstimateDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The FourteenDaysFeedEstimateDS service URI.</param>
        public FourteenDaysFeedEstimateDS(Uri serviceUri) : 
                this(new WebDomainClient<IFourteenDaysFeedEstimateDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FourteenDaysFeedEstimateDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public FourteenDaysFeedEstimateDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="RequiredFeedNext14days"/> entity instances that have been loaded into this <see cref="FourteenDaysFeedEstimateDS"/> instance.
        /// </summary>
        public EntitySet<RequiredFeedNext14days> RequiredFeedNext14days
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RequiredFeedNext14days>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RequiredFeedNext14days"/> entity instances using the 'GetRequiredFeedNext14days' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RequiredFeedNext14days"/> entity instances.</returns>
        public EntityQuery<RequiredFeedNext14days> GetRequiredFeedNext14daysQuery()
        {
            this.ValidateMethod("GetRequiredFeedNext14daysQuery", null);
            return base.CreateQuery<RequiredFeedNext14days>("GetRequiredFeedNext14days", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new FourteenDaysFeedEstimateDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'FourteenDaysFeedEstimateDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IFourteenDaysFeedEstimateDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetRequiredFeedNext14days' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FourteenDaysFeedEstimateDS/GetRequiredFeedNext14daysDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FourteenDaysFeedEstimateDS/GetRequiredFeedNext14days", ReplyAction="http://tempuri.org/FourteenDaysFeedEstimateDS/GetRequiredFeedNext14daysResponse")]
            [WebGet()]
            IAsyncResult BeginGetRequiredFeedNext14days(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRequiredFeedNext14days'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRequiredFeedNext14days'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRequiredFeedNext14days' operation.</returns>
            QueryResult<RequiredFeedNext14days> EndGetRequiredFeedNext14days(IAsyncResult result);
        }
        
        internal sealed class FourteenDaysFeedEstimateDSEntityContainer : EntityContainer
        {
            
            public FourteenDaysFeedEstimateDSEntityContainer()
            {
                this.CreateEntitySet<RequiredFeedNext14days>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'HarvestDS' DomainService.
    /// </summary>
    public sealed partial class HarvestDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="HarvestDS"/> class.
        /// </summary>
        public HarvestDS() : 
                this(new WebDomainClient<IHarvestDSContract>(new Uri("tambak-Web-DomainServices-HarvestDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="HarvestDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The HarvestDS service URI.</param>
        public HarvestDS(Uri serviceUri) : 
                this(new WebDomainClient<IHarvestDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="HarvestDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public HarvestDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Harvest"/> entity instances that have been loaded into this <see cref="HarvestDS"/> instance.
        /// </summary>
        public EntitySet<Harvest> Harvests
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Harvest>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Harvest"/> entity instances using the 'GetHarvests' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Harvest"/> entity instances.</returns>
        public EntityQuery<Harvest> GetHarvestsQuery()
        {
            this.ValidateMethod("GetHarvestsQuery", null);
            return base.CreateQuery<Harvest>("GetHarvests", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new HarvestDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'HarvestDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IHarvestDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetHarvests' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/HarvestDS/GetHarvestsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/HarvestDS/GetHarvests", ReplyAction="http://tempuri.org/HarvestDS/GetHarvestsResponse")]
            [WebGet()]
            IAsyncResult BeginGetHarvests(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetHarvests'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetHarvests'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetHarvests' operation.</returns>
            QueryResult<Harvest> EndGetHarvests(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/HarvestDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/HarvestDS/SubmitChanges", ReplyAction="http://tempuri.org/HarvestDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class HarvestDSEntityContainer : EntityContainer
        {
            
            public HarvestDSEntityContainer()
            {
                this.CreateEntitySet<Harvest>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'MasterCurrencyDS' DomainService.
    /// </summary>
    public sealed partial class MasterCurrencyDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MasterCurrencyDS"/> class.
        /// </summary>
        public MasterCurrencyDS() : 
                this(new WebDomainClient<IMasterCurrencyDSContract>(new Uri("tambak-Web-DomainServices-MasterCurrencyDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MasterCurrencyDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MasterCurrencyDS service URI.</param>
        public MasterCurrencyDS(Uri serviceUri) : 
                this(new WebDomainClient<IMasterCurrencyDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MasterCurrencyDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public MasterCurrencyDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="MasterCurrency"/> entity instances that have been loaded into this <see cref="MasterCurrencyDS"/> instance.
        /// </summary>
        public EntitySet<MasterCurrency> MasterCurrencies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MasterCurrency>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MasterCurrency"/> entity instances using the 'GetDefaultMasterCurrencies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MasterCurrency"/> entity instances.</returns>
        public EntityQuery<MasterCurrency> GetDefaultMasterCurrenciesQuery()
        {
            this.ValidateMethod("GetDefaultMasterCurrenciesQuery", null);
            return base.CreateQuery<MasterCurrency>("GetDefaultMasterCurrencies", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MasterCurrency"/> entity instances using the 'GetMasterCurrencies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MasterCurrency"/> entity instances.</returns>
        public EntityQuery<MasterCurrency> GetMasterCurrenciesQuery()
        {
            this.ValidateMethod("GetMasterCurrenciesQuery", null);
            return base.CreateQuery<MasterCurrency>("GetMasterCurrencies", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MasterCurrencyDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MasterCurrencyDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IMasterCurrencyDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetDefaultMasterCurrencies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MasterCurrencyDS/GetDefaultMasterCurrenciesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MasterCurrencyDS/GetDefaultMasterCurrencies", ReplyAction="http://tempuri.org/MasterCurrencyDS/GetDefaultMasterCurrenciesResponse")]
            [WebGet()]
            IAsyncResult BeginGetDefaultMasterCurrencies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDefaultMasterCurrencies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDefaultMasterCurrencies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDefaultMasterCurrencies' operation.</returns>
            QueryResult<MasterCurrency> EndGetDefaultMasterCurrencies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMasterCurrencies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MasterCurrencyDS/GetMasterCurrenciesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MasterCurrencyDS/GetMasterCurrencies", ReplyAction="http://tempuri.org/MasterCurrencyDS/GetMasterCurrenciesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMasterCurrencies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMasterCurrencies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMasterCurrencies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMasterCurrencies' operation.</returns>
            QueryResult<MasterCurrency> EndGetMasterCurrencies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MasterCurrencyDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MasterCurrencyDS/SubmitChanges", ReplyAction="http://tempuri.org/MasterCurrencyDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class MasterCurrencyDSEntityContainer : EntityContainer
        {
            
            public MasterCurrencyDSEntityContainer()
            {
                this.CreateEntitySet<MasterCurrency>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'MasterTaxDS' DomainService.
    /// </summary>
    public sealed partial class MasterTaxDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MasterTaxDS"/> class.
        /// </summary>
        public MasterTaxDS() : 
                this(new WebDomainClient<IMasterTaxDSContract>(new Uri("tambak-Web-DomainServices-MasterTaxDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MasterTaxDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MasterTaxDS service URI.</param>
        public MasterTaxDS(Uri serviceUri) : 
                this(new WebDomainClient<IMasterTaxDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MasterTaxDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public MasterTaxDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="MasterTax"/> entity instances that have been loaded into this <see cref="MasterTaxDS"/> instance.
        /// </summary>
        public EntitySet<MasterTax> MasterTaxes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MasterTax>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MasterTax"/> entity instances using the 'GetMasterTaxes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MasterTax"/> entity instances.</returns>
        public EntityQuery<MasterTax> GetMasterTaxesQuery()
        {
            this.ValidateMethod("GetMasterTaxesQuery", null);
            return base.CreateQuery<MasterTax>("GetMasterTaxes", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MasterTaxDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MasterTaxDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IMasterTaxDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetMasterTaxes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MasterTaxDS/GetMasterTaxesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MasterTaxDS/GetMasterTaxes", ReplyAction="http://tempuri.org/MasterTaxDS/GetMasterTaxesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMasterTaxes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMasterTaxes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMasterTaxes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMasterTaxes' operation.</returns>
            QueryResult<MasterTax> EndGetMasterTaxes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MasterTaxDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MasterTaxDS/SubmitChanges", ReplyAction="http://tempuri.org/MasterTaxDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class MasterTaxDSEntityContainer : EntityContainer
        {
            
            public MasterTaxDSEntityContainer()
            {
                this.CreateEntitySet<MasterTax>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'PDOControlDS' DomainService.
    /// </summary>
    public sealed partial class PDOControlDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PDOControlDS"/> class.
        /// </summary>
        public PDOControlDS() : 
                this(new WebDomainClient<IPDOControlDSContract>(new Uri("tambak-Web-DomainServices-PDOControlDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PDOControlDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The PDOControlDS service URI.</param>
        public PDOControlDS(Uri serviceUri) : 
                this(new WebDomainClient<IPDOControlDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PDOControlDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public PDOControlDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="PDOControl"/> entity instances that have been loaded into this <see cref="PDOControlDS"/> instance.
        /// </summary>
        public EntitySet<PDOControl> PDOControls
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PDOControl>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PDOControl"/> entity instances using the 'GetPDOControls' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PDOControl"/> entity instances.</returns>
        public EntityQuery<PDOControl> GetPDOControlsQuery()
        {
            this.ValidateMethod("GetPDOControlsQuery", null);
            return base.CreateQuery<PDOControl>("GetPDOControls", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new PDOControlDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'PDOControlDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IPDOControlDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetPDOControls' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PDOControlDS/GetPDOControlsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PDOControlDS/GetPDOControls", ReplyAction="http://tempuri.org/PDOControlDS/GetPDOControlsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPDOControls(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPDOControls'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPDOControls'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPDOControls' operation.</returns>
            QueryResult<PDOControl> EndGetPDOControls(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PDOControlDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PDOControlDS/SubmitChanges", ReplyAction="http://tempuri.org/PDOControlDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class PDOControlDSEntityContainer : EntityContainer
        {
            
            public PDOControlDSEntityContainer()
            {
                this.CreateEntitySet<PDOControl>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'PODeliveredQuantityDS' DomainService.
    /// </summary>
    public sealed partial class PODeliveredQuantityDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PODeliveredQuantityDS"/> class.
        /// </summary>
        public PODeliveredQuantityDS() : 
                this(new WebDomainClient<IPODeliveredQuantityDSContract>(new Uri("tambak-Web-DomainServices-PODeliveredQuantityDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PODeliveredQuantityDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The PODeliveredQuantityDS service URI.</param>
        public PODeliveredQuantityDS(Uri serviceUri) : 
                this(new WebDomainClient<IPODeliveredQuantityDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PODeliveredQuantityDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public PODeliveredQuantityDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="PODeliveredQuantity"/> entity instances that have been loaded into this <see cref="PODeliveredQuantityDS"/> instance.
        /// </summary>
        public EntitySet<PODeliveredQuantity> PODeliveredQuantities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PODeliveredQuantity>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PODeliveredQuantity"/> entity instances using the 'GetPODeliveredQuantities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PODeliveredQuantity"/> entity instances.</returns>
        public EntityQuery<PODeliveredQuantity> GetPODeliveredQuantitiesQuery()
        {
            this.ValidateMethod("GetPODeliveredQuantitiesQuery", null);
            return base.CreateQuery<PODeliveredQuantity>("GetPODeliveredQuantities", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new PODeliveredQuantityDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'PODeliveredQuantityDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IPODeliveredQuantityDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetPODeliveredQuantities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PODeliveredQuantityDS/GetPODeliveredQuantitiesDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PODeliveredQuantityDS/GetPODeliveredQuantities", ReplyAction="http://tempuri.org/PODeliveredQuantityDS/GetPODeliveredQuantitiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetPODeliveredQuantities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPODeliveredQuantities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPODeliveredQuantities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPODeliveredQuantities' operation.</returns>
            QueryResult<PODeliveredQuantity> EndGetPODeliveredQuantities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PODeliveredQuantityDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PODeliveredQuantityDS/SubmitChanges", ReplyAction="http://tempuri.org/PODeliveredQuantityDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class PODeliveredQuantityDSEntityContainer : EntityContainer
        {
            
            public PODeliveredQuantityDSEntityContainer()
            {
                this.CreateEntitySet<PODeliveredQuantity>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'PODetailsViewsDS' DomainService.
    /// </summary>
    public sealed partial class PODetailsViewsDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PODetailsViewsDS"/> class.
        /// </summary>
        public PODetailsViewsDS() : 
                this(new WebDomainClient<IPODetailsViewsDSContract>(new Uri("tambak-Web-DomainServices-PODetailsViewsDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PODetailsViewsDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The PODetailsViewsDS service URI.</param>
        public PODetailsViewsDS(Uri serviceUri) : 
                this(new WebDomainClient<IPODetailsViewsDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PODetailsViewsDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public PODetailsViewsDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="PODetailsView"/> entity instances that have been loaded into this <see cref="PODetailsViewsDS"/> instance.
        /// </summary>
        public EntitySet<PODetailsView> PODetailsViews
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PODetailsView>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PODetailsView"/> entity instances using the 'GetPODetailsViews' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PODetailsView"/> entity instances.</returns>
        public EntityQuery<PODetailsView> GetPODetailsViewsQuery()
        {
            this.ValidateMethod("GetPODetailsViewsQuery", null);
            return base.CreateQuery<PODetailsView>("GetPODetailsViews", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new PODetailsViewsDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'PODetailsViewsDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IPODetailsViewsDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetPODetailsViews' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PODetailsViewsDS/GetPODetailsViewsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PODetailsViewsDS/GetPODetailsViews", ReplyAction="http://tempuri.org/PODetailsViewsDS/GetPODetailsViewsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPODetailsViews(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPODetailsViews'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPODetailsViews'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPODetailsViews' operation.</returns>
            QueryResult<PODetailsView> EndGetPODetailsViews(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PODetailsViewsDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PODetailsViewsDS/SubmitChanges", ReplyAction="http://tempuri.org/PODetailsViewsDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class PODetailsViewsDSEntityContainer : EntityContainer
        {
            
            public PODetailsViewsDSEntityContainer()
            {
                this.CreateEntitySet<PODetailsView>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'PondConsumptionLogDS' DomainService.
    /// </summary>
    public sealed partial class PondConsumptionLogDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PondConsumptionLogDS"/> class.
        /// </summary>
        public PondConsumptionLogDS() : 
                this(new WebDomainClient<IPondConsumptionLogDSContract>(new Uri("tambak-Web-DomainServices-PondConsumptionLogDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PondConsumptionLogDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The PondConsumptionLogDS service URI.</param>
        public PondConsumptionLogDS(Uri serviceUri) : 
                this(new WebDomainClient<IPondConsumptionLogDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PondConsumptionLogDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public PondConsumptionLogDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="PondConsumptionsLog"/> entity instances that have been loaded into this <see cref="PondConsumptionLogDS"/> instance.
        /// </summary>
        public EntitySet<PondConsumptionsLog> PondConsumptionsLogs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PondConsumptionsLog>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PondConsumptionsLog"/> entity instances using the 'GetPondConsumptionsLogs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PondConsumptionsLog"/> entity instances.</returns>
        public EntityQuery<PondConsumptionsLog> GetPondConsumptionsLogsQuery()
        {
            this.ValidateMethod("GetPondConsumptionsLogsQuery", null);
            return base.CreateQuery<PondConsumptionsLog>("GetPondConsumptionsLogs", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new PondConsumptionLogDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'PondConsumptionLogDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IPondConsumptionLogDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetPondConsumptionsLogs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PondConsumptionLogDS/GetPondConsumptionsLogsDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PondConsumptionLogDS/GetPondConsumptionsLogs", ReplyAction="http://tempuri.org/PondConsumptionLogDS/GetPondConsumptionsLogsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPondConsumptionsLogs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPondConsumptionsLogs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPondConsumptionsLogs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPondConsumptionsLogs' operation.</returns>
            QueryResult<PondConsumptionsLog> EndGetPondConsumptionsLogs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PondConsumptionLogDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PondConsumptionLogDS/SubmitChanges", ReplyAction="http://tempuri.org/PondConsumptionLogDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class PondConsumptionLogDSEntityContainer : EntityContainer
        {
            
            public PondConsumptionLogDSEntityContainer()
            {
                this.CreateEntitySet<PondConsumptionsLog>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'PondsDS' DomainService.
    /// </summary>
    public sealed partial class PondsDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PondsDS"/> class.
        /// </summary>
        public PondsDS() : 
                this(new WebDomainClient<IPondsDSContract>(new Uri("tambak-Web-DomainServices-PondsDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PondsDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The PondsDS service URI.</param>
        public PondsDS(Uri serviceUri) : 
                this(new WebDomainClient<IPondsDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PondsDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public PondsDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Pond"/> entity instances that have been loaded into this <see cref="PondsDS"/> instance.
        /// </summary>
        public EntitySet<Pond> Ponds
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Pond>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Pond"/> entity instances using the 'GetPonds' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Pond"/> entity instances.</returns>
        public EntityQuery<Pond> GetPondsQuery()
        {
            this.ValidateMethod("GetPondsQuery", null);
            return base.CreateQuery<Pond>("GetPonds", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new PondsDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'PondsDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IPondsDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetPonds' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PondsDS/GetPondsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PondsDS/GetPonds", ReplyAction="http://tempuri.org/PondsDS/GetPondsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPonds(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPonds'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPonds'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPonds' operation.</returns>
            QueryResult<Pond> EndGetPonds(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PondsDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PondsDS/SubmitChanges", ReplyAction="http://tempuri.org/PondsDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class PondsDSEntityContainer : EntityContainer
        {
            
            public PondsDSEntityContainer()
            {
                this.CreateEntitySet<Pond>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'PondsProductionCycleDS' DomainService.
    /// </summary>
    public sealed partial class PondsProductionCycleDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PondsProductionCycleDS"/> class.
        /// </summary>
        public PondsProductionCycleDS() : 
                this(new WebDomainClient<IPondsProductionCycleDSContract>(new Uri("tambak-Web-DomainServices-PondsProductionCycleDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PondsProductionCycleDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The PondsProductionCycleDS service URI.</param>
        public PondsProductionCycleDS(Uri serviceUri) : 
                this(new WebDomainClient<IPondsProductionCycleDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PondsProductionCycleDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public PondsProductionCycleDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="PondsProductionCycle"/> entity instances that have been loaded into this <see cref="PondsProductionCycleDS"/> instance.
        /// </summary>
        public EntitySet<PondsProductionCycle> PondsProductionCycles
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PondsProductionCycle>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PondsProductionCycle"/> entity instances using the 'GetPondsProductionCycles' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PondsProductionCycle"/> entity instances.</returns>
        public EntityQuery<PondsProductionCycle> GetPondsProductionCyclesQuery()
        {
            this.ValidateMethod("GetPondsProductionCyclesQuery", null);
            return base.CreateQuery<PondsProductionCycle>("GetPondsProductionCycles", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new PondsProductionCycleDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'PondsProductionCycleDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IPondsProductionCycleDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetPondsProductionCycles' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PondsProductionCycleDS/GetPondsProductionCyclesDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PondsProductionCycleDS/GetPondsProductionCycles", ReplyAction="http://tempuri.org/PondsProductionCycleDS/GetPondsProductionCyclesResponse")]
            [WebGet()]
            IAsyncResult BeginGetPondsProductionCycles(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPondsProductionCycles'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPondsProductionCycles'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPondsProductionCycles' operation.</returns>
            QueryResult<PondsProductionCycle> EndGetPondsProductionCycles(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PondsProductionCycleDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PondsProductionCycleDS/SubmitChanges", ReplyAction="http://tempuri.org/PondsProductionCycleDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class PondsProductionCycleDSEntityContainer : EntityContainer
        {
            
            public PondsProductionCycleDSEntityContainer()
            {
                this.CreateEntitySet<PondsProductionCycle>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ProductDS' DomainService.
    /// </summary>
    public sealed partial class ProductDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductDS"/> class.
        /// </summary>
        public ProductDS() : 
                this(new WebDomainClient<IProductDSContract>(new Uri("tambak-Web-DomainServices-ProductDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ProductDS service URI.</param>
        public ProductDS(Uri serviceUri) : 
                this(new WebDomainClient<IProductDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ProductDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Product"/> entity instances that have been loaded into this <see cref="ProductDS"/> instance.
        /// </summary>
        public EntitySet<Product> Products
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Product>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetFinishedProducts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        public EntityQuery<Product> GetFinishedProductsQuery()
        {
            this.ValidateMethod("GetFinishedProductsQuery", null);
            return base.CreateQuery<Product>("GetFinishedProducts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProducts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        public EntityQuery<Product> GetProductsQuery()
        {
            this.ValidateMethod("GetProductsQuery", null);
            return base.CreateQuery<Product>("GetProducts", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetRawProducts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        public EntityQuery<Product> GetRawProductsQuery()
        {
            this.ValidateMethod("GetRawProductsQuery", null);
            return base.CreateQuery<Product>("GetRawProducts", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ProductDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ProductDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IProductDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetFinishedProducts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductDS/GetFinishedProductsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductDS/GetFinishedProducts", ReplyAction="http://tempuri.org/ProductDS/GetFinishedProductsResponse")]
            [WebGet()]
            IAsyncResult BeginGetFinishedProducts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFinishedProducts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFinishedProducts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFinishedProducts' operation.</returns>
            QueryResult<Product> EndGetFinishedProducts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProducts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductDS/GetProductsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductDS/GetProducts", ReplyAction="http://tempuri.org/ProductDS/GetProductsResponse")]
            [WebGet()]
            IAsyncResult BeginGetProducts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProducts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProducts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProducts' operation.</returns>
            QueryResult<Product> EndGetProducts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRawProducts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductDS/GetRawProductsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductDS/GetRawProducts", ReplyAction="http://tempuri.org/ProductDS/GetRawProductsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRawProducts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRawProducts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRawProducts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRawProducts' operation.</returns>
            QueryResult<Product> EndGetRawProducts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductDS/SubmitChanges", ReplyAction="http://tempuri.org/ProductDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ProductDSEntityContainer : EntityContainer
        {
            
            public ProductDSEntityContainer()
            {
                this.CreateEntitySet<Product>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ProductInfoViewDS' DomainService.
    /// </summary>
    public sealed partial class ProductInfoViewDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductInfoViewDS"/> class.
        /// </summary>
        public ProductInfoViewDS() : 
                this(new WebDomainClient<IProductInfoViewDSContract>(new Uri("tambak-Web-DomainServices-ProductInfoViewDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductInfoViewDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ProductInfoViewDS service URI.</param>
        public ProductInfoViewDS(Uri serviceUri) : 
                this(new WebDomainClient<IProductInfoViewDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductInfoViewDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ProductInfoViewDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ProductsInfoView"/> entity instances that have been loaded into this <see cref="ProductInfoViewDS"/> instance.
        /// </summary>
        public EntitySet<ProductsInfoView> ProductsInfoViews
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ProductsInfoView>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProductsInfoView"/> entity instances using the 'GetProductsInfoViews' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProductsInfoView"/> entity instances.</returns>
        public EntityQuery<ProductsInfoView> GetProductsInfoViewsQuery()
        {
            this.ValidateMethod("GetProductsInfoViewsQuery", null);
            return base.CreateQuery<ProductsInfoView>("GetProductsInfoViews", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ProductInfoViewDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ProductInfoViewDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IProductInfoViewDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductsInfoViews' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductInfoViewDS/GetProductsInfoViewsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductInfoViewDS/GetProductsInfoViews", ReplyAction="http://tempuri.org/ProductInfoViewDS/GetProductsInfoViewsResponse")]
            [WebGet()]
            IAsyncResult BeginGetProductsInfoViews(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductsInfoViews'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductsInfoViews'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductsInfoViews' operation.</returns>
            QueryResult<ProductsInfoView> EndGetProductsInfoViews(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductInfoViewDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductInfoViewDS/SubmitChanges", ReplyAction="http://tempuri.org/ProductInfoViewDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ProductInfoViewDSEntityContainer : EntityContainer
        {
            
            public ProductInfoViewDSEntityContainer()
            {
                this.CreateEntitySet<ProductsInfoView>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ProductionCycleCostDetailViewDS' DomainService.
    /// </summary>
    public sealed partial class ProductionCycleCostDetailViewDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionCycleCostDetailViewDS"/> class.
        /// </summary>
        public ProductionCycleCostDetailViewDS() : 
                this(new WebDomainClient<IProductionCycleCostDetailViewDSContract>(new Uri("tambak-Web-DomainServices-ProductionCycleCostDetailViewDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionCycleCostDetailViewDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ProductionCycleCostDetailViewDS service URI.</param>
        public ProductionCycleCostDetailViewDS(Uri serviceUri) : 
                this(new WebDomainClient<IProductionCycleCostDetailViewDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionCycleCostDetailViewDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ProductionCycleCostDetailViewDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ProductionCycleCostDetailView"/> entity instances that have been loaded into this <see cref="ProductionCycleCostDetailViewDS"/> instance.
        /// </summary>
        public EntitySet<ProductionCycleCostDetailView> ProductionCycleCostDetailViews
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ProductionCycleCostDetailView>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProductionCycleCostDetailView"/> entity instances using the 'GetProductionCycleCostDetailViews' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProductionCycleCostDetailView"/> entity instances.</returns>
        public EntityQuery<ProductionCycleCostDetailView> GetProductionCycleCostDetailViewsQuery()
        {
            this.ValidateMethod("GetProductionCycleCostDetailViewsQuery", null);
            return base.CreateQuery<ProductionCycleCostDetailView>("GetProductionCycleCostDetailViews", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ProductionCycleCostDetailViewDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ProductionCycleCostDetailViewDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IProductionCycleCostDetailViewDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductionCycleCostDetailViews' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductionCycleCostDetailViewDS/GetProductionCycleCostDetailVi" +
                "ewsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductionCycleCostDetailViewDS/GetProductionCycleCostDetailVi" +
                "ews", ReplyAction="http://tempuri.org/ProductionCycleCostDetailViewDS/GetProductionCycleCostDetailVi" +
                "ewsResponse")]
            [WebGet()]
            IAsyncResult BeginGetProductionCycleCostDetailViews(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductionCycleCostDetailViews'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductionCycleCostDetailViews'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductionCycleCostDetailViews' operation.</returns>
            QueryResult<ProductionCycleCostDetailView> EndGetProductionCycleCostDetailViews(IAsyncResult result);
        }
        
        internal sealed class ProductionCycleCostDetailViewDSEntityContainer : EntityContainer
        {
            
            public ProductionCycleCostDetailViewDSEntityContainer()
            {
                this.CreateEntitySet<ProductionCycleCostDetailView>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ProductPurchaseLogDS' DomainService.
    /// </summary>
    public sealed partial class ProductPurchaseLogDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductPurchaseLogDS"/> class.
        /// </summary>
        public ProductPurchaseLogDS() : 
                this(new WebDomainClient<IProductPurchaseLogDSContract>(new Uri("tambak-Web-DomainServices-ProductPurchaseLogDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductPurchaseLogDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ProductPurchaseLogDS service URI.</param>
        public ProductPurchaseLogDS(Uri serviceUri) : 
                this(new WebDomainClient<IProductPurchaseLogDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductPurchaseLogDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ProductPurchaseLogDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ProductPurchaseLog"/> entity instances that have been loaded into this <see cref="ProductPurchaseLogDS"/> instance.
        /// </summary>
        public EntitySet<ProductPurchaseLog> ProductPurchaseLogs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ProductPurchaseLog>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProductPurchaseLog"/> entity instances using the 'GetProductPurchaseLogs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProductPurchaseLog"/> entity instances.</returns>
        public EntityQuery<ProductPurchaseLog> GetProductPurchaseLogsQuery()
        {
            this.ValidateMethod("GetProductPurchaseLogsQuery", null);
            return base.CreateQuery<ProductPurchaseLog>("GetProductPurchaseLogs", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ProductPurchaseLogDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ProductPurchaseLogDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IProductPurchaseLogDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductPurchaseLogs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductPurchaseLogDS/GetProductPurchaseLogsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductPurchaseLogDS/GetProductPurchaseLogs", ReplyAction="http://tempuri.org/ProductPurchaseLogDS/GetProductPurchaseLogsResponse")]
            [WebGet()]
            IAsyncResult BeginGetProductPurchaseLogs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductPurchaseLogs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductPurchaseLogs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductPurchaseLogs' operation.</returns>
            QueryResult<ProductPurchaseLog> EndGetProductPurchaseLogs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductPurchaseLogDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductPurchaseLogDS/SubmitChanges", ReplyAction="http://tempuri.org/ProductPurchaseLogDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ProductPurchaseLogDSEntityContainer : EntityContainer
        {
            
            public ProductPurchaseLogDSEntityContainer()
            {
                this.CreateEntitySet<ProductPurchaseLog>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ProductRequiredDS' DomainService.
    /// </summary>
    public sealed partial class ProductRequiredDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductRequiredDS"/> class.
        /// </summary>
        public ProductRequiredDS() : 
                this(new WebDomainClient<IProductRequiredDSContract>(new Uri("tambak-Web-DomainServices-ProductRequiredDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductRequiredDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ProductRequiredDS service URI.</param>
        public ProductRequiredDS(Uri serviceUri) : 
                this(new WebDomainClient<IProductRequiredDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductRequiredDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ProductRequiredDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ProductRequired"/> entity instances that have been loaded into this <see cref="ProductRequiredDS"/> instance.
        /// </summary>
        public EntitySet<ProductRequired> ProductRequireds
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ProductRequired>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProductRequired"/> entity instances using the 'GetProductRequireds' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProductRequired"/> entity instances.</returns>
        public EntityQuery<ProductRequired> GetProductRequiredsQuery()
        {
            this.ValidateMethod("GetProductRequiredsQuery", null);
            return base.CreateQuery<ProductRequired>("GetProductRequireds", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ProductRequiredDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ProductRequiredDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IProductRequiredDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductRequireds' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductRequiredDS/GetProductRequiredsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductRequiredDS/GetProductRequireds", ReplyAction="http://tempuri.org/ProductRequiredDS/GetProductRequiredsResponse")]
            [WebGet()]
            IAsyncResult BeginGetProductRequireds(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductRequireds'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductRequireds'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductRequireds' operation.</returns>
            QueryResult<ProductRequired> EndGetProductRequireds(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductRequiredDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductRequiredDS/SubmitChanges", ReplyAction="http://tempuri.org/ProductRequiredDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ProductRequiredDSEntityContainer : EntityContainer
        {
            
            public ProductRequiredDSEntityContainer()
            {
                this.CreateEntitySet<ProductRequired>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ProductRequiredViewDS' DomainService.
    /// </summary>
    public sealed partial class ProductRequiredViewDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductRequiredViewDS"/> class.
        /// </summary>
        public ProductRequiredViewDS() : 
                this(new WebDomainClient<IProductRequiredViewDSContract>(new Uri("tambak-Web-DomainServices-ProductRequiredViewDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductRequiredViewDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ProductRequiredViewDS service URI.</param>
        public ProductRequiredViewDS(Uri serviceUri) : 
                this(new WebDomainClient<IProductRequiredViewDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductRequiredViewDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ProductRequiredViewDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ProductRequiredView"/> entity instances that have been loaded into this <see cref="ProductRequiredViewDS"/> instance.
        /// </summary>
        public EntitySet<ProductRequiredView> ProductRequiredViews
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ProductRequiredView>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProductRequiredView"/> entity instances using the 'GetProductRequiredViews' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProductRequiredView"/> entity instances.</returns>
        public EntityQuery<ProductRequiredView> GetProductRequiredViewsQuery()
        {
            this.ValidateMethod("GetProductRequiredViewsQuery", null);
            return base.CreateQuery<ProductRequiredView>("GetProductRequiredViews", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ProductRequiredViewDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ProductRequiredViewDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IProductRequiredViewDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductRequiredViews' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductRequiredViewDS/GetProductRequiredViewsDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductRequiredViewDS/GetProductRequiredViews", ReplyAction="http://tempuri.org/ProductRequiredViewDS/GetProductRequiredViewsResponse")]
            [WebGet()]
            IAsyncResult BeginGetProductRequiredViews(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductRequiredViews'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductRequiredViews'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductRequiredViews' operation.</returns>
            QueryResult<ProductRequiredView> EndGetProductRequiredViews(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductRequiredViewDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductRequiredViewDS/SubmitChanges", ReplyAction="http://tempuri.org/ProductRequiredViewDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ProductRequiredViewDSEntityContainer : EntityContainer
        {
            
            public ProductRequiredViewDSEntityContainer()
            {
                this.CreateEntitySet<ProductRequiredView>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ProductSalesOrdersDS' DomainService.
    /// </summary>
    public sealed partial class ProductSalesOrdersDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductSalesOrdersDS"/> class.
        /// </summary>
        public ProductSalesOrdersDS() : 
                this(new WebDomainClient<IProductSalesOrdersDSContract>(new Uri("tambak-Web-DomainServices-ProductSalesOrdersDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductSalesOrdersDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ProductSalesOrdersDS service URI.</param>
        public ProductSalesOrdersDS(Uri serviceUri) : 
                this(new WebDomainClient<IProductSalesOrdersDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductSalesOrdersDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ProductSalesOrdersDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ProductSalesOrder"/> entity instances that have been loaded into this <see cref="ProductSalesOrdersDS"/> instance.
        /// </summary>
        public EntitySet<ProductSalesOrder> ProductSalesOrders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ProductSalesOrder>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProductSalesOrder"/> entity instances using the 'GetProductSalesOrders' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProductSalesOrder"/> entity instances.</returns>
        public EntityQuery<ProductSalesOrder> GetProductSalesOrdersQuery()
        {
            this.ValidateMethod("GetProductSalesOrdersQuery", null);
            return base.CreateQuery<ProductSalesOrder>("GetProductSalesOrders", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ProductSalesOrdersDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ProductSalesOrdersDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IProductSalesOrdersDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductSalesOrders' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductSalesOrdersDS/GetProductSalesOrdersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductSalesOrdersDS/GetProductSalesOrders", ReplyAction="http://tempuri.org/ProductSalesOrdersDS/GetProductSalesOrdersResponse")]
            [WebGet()]
            IAsyncResult BeginGetProductSalesOrders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductSalesOrders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductSalesOrders'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductSalesOrders' operation.</returns>
            QueryResult<ProductSalesOrder> EndGetProductSalesOrders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductSalesOrdersDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductSalesOrdersDS/SubmitChanges", ReplyAction="http://tempuri.org/ProductSalesOrdersDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ProductSalesOrdersDSEntityContainer : EntityContainer
        {
            
            public ProductSalesOrdersDSEntityContainer()
            {
                this.CreateEntitySet<ProductSalesOrder>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ProductsDetailsDS' DomainService.
    /// </summary>
    public sealed partial class ProductsDetailsDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsDetailsDS"/> class.
        /// </summary>
        public ProductsDetailsDS() : 
                this(new WebDomainClient<IProductsDetailsDSContract>(new Uri("tambak-Web-DomainServices-ProductsDetailsDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsDetailsDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ProductsDetailsDS service URI.</param>
        public ProductsDetailsDS(Uri serviceUri) : 
                this(new WebDomainClient<IProductsDetailsDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsDetailsDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ProductsDetailsDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ProductsDetail"/> entity instances that have been loaded into this <see cref="ProductsDetailsDS"/> instance.
        /// </summary>
        public EntitySet<ProductsDetail> ProductsDetails
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ProductsDetail>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ProductsDetail"/> entity instances using the 'GetProductsDetails' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ProductsDetail"/> entity instances.</returns>
        public EntityQuery<ProductsDetail> GetProductsDetailsQuery()
        {
            this.ValidateMethod("GetProductsDetailsQuery", null);
            return base.CreateQuery<ProductsDetail>("GetProductsDetails", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ProductsDetailsDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ProductsDetailsDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IProductsDetailsDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetProductsDetails' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductsDetailsDS/GetProductsDetailsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductsDetailsDS/GetProductsDetails", ReplyAction="http://tempuri.org/ProductsDetailsDS/GetProductsDetailsResponse")]
            [WebGet()]
            IAsyncResult BeginGetProductsDetails(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProductsDetails'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProductsDetails'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProductsDetails' operation.</returns>
            QueryResult<ProductsDetail> EndGetProductsDetails(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductsDetailsDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductsDetailsDS/SubmitChanges", ReplyAction="http://tempuri.org/ProductsDetailsDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ProductsDetailsDSEntityContainer : EntityContainer
        {
            
            public ProductsDetailsDSEntityContainer()
            {
                this.CreateEntitySet<ProductsDetail>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'PurchaseOrderDetailsDS' DomainService.
    /// </summary>
    public sealed partial class PurchaseOrderDetailsDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrderDetailsDS"/> class.
        /// </summary>
        public PurchaseOrderDetailsDS() : 
                this(new WebDomainClient<IPurchaseOrderDetailsDSContract>(new Uri("tambak-Web-DomainServices-PurchaseOrderDetailsDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrderDetailsDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The PurchaseOrderDetailsDS service URI.</param>
        public PurchaseOrderDetailsDS(Uri serviceUri) : 
                this(new WebDomainClient<IPurchaseOrderDetailsDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrderDetailsDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public PurchaseOrderDetailsDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="PODetail"/> entity instances that have been loaded into this <see cref="PurchaseOrderDetailsDS"/> instance.
        /// </summary>
        public EntitySet<PODetail> PODetails
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PODetail>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PODetail"/> entity instances using the 'GetPODetails' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PODetail"/> entity instances.</returns>
        public EntityQuery<PODetail> GetPODetailsQuery()
        {
            this.ValidateMethod("GetPODetailsQuery", null);
            return base.CreateQuery<PODetail>("GetPODetails", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new PurchaseOrderDetailsDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'PurchaseOrderDetailsDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IPurchaseOrderDetailsDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetPODetails' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PurchaseOrderDetailsDS/GetPODetailsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PurchaseOrderDetailsDS/GetPODetails", ReplyAction="http://tempuri.org/PurchaseOrderDetailsDS/GetPODetailsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPODetails(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPODetails'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPODetails'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPODetails' operation.</returns>
            QueryResult<PODetail> EndGetPODetails(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PurchaseOrderDetailsDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PurchaseOrderDetailsDS/SubmitChanges", ReplyAction="http://tempuri.org/PurchaseOrderDetailsDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class PurchaseOrderDetailsDSEntityContainer : EntityContainer
        {
            
            public PurchaseOrderDetailsDSEntityContainer()
            {
                this.CreateEntitySet<PODetail>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'PurchaseOrderHeaderDS' DomainService.
    /// </summary>
    public sealed partial class PurchaseOrderHeaderDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrderHeaderDS"/> class.
        /// </summary>
        public PurchaseOrderHeaderDS() : 
                this(new WebDomainClient<IPurchaseOrderHeaderDSContract>(new Uri("tambak-Web-DomainServices-PurchaseOrderHeaderDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrderHeaderDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The PurchaseOrderHeaderDS service URI.</param>
        public PurchaseOrderHeaderDS(Uri serviceUri) : 
                this(new WebDomainClient<IPurchaseOrderHeaderDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrderHeaderDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public PurchaseOrderHeaderDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="PurchaseOrder"/> entity instances that have been loaded into this <see cref="PurchaseOrderHeaderDS"/> instance.
        /// </summary>
        public EntitySet<PurchaseOrder> PurchaseOrders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PurchaseOrder>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PurchaseOrder"/> entity instances using the 'GetisNotCompletePurchaseOrders' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PurchaseOrder"/> entity instances.</returns>
        public EntityQuery<PurchaseOrder> GetisNotCompletePurchaseOrdersQuery()
        {
            this.ValidateMethod("GetisNotCompletePurchaseOrdersQuery", null);
            return base.CreateQuery<PurchaseOrder>("GetisNotCompletePurchaseOrders", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PurchaseOrder"/> entity instances using the 'GetPurchaseOrders' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PurchaseOrder"/> entity instances.</returns>
        public EntityQuery<PurchaseOrder> GetPurchaseOrdersQuery()
        {
            this.ValidateMethod("GetPurchaseOrdersQuery", null);
            return base.CreateQuery<PurchaseOrder>("GetPurchaseOrders", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new PurchaseOrderHeaderDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'PurchaseOrderHeaderDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IPurchaseOrderHeaderDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetisNotCompletePurchaseOrders' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PurchaseOrderHeaderDS/GetisNotCompletePurchaseOrdersDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PurchaseOrderHeaderDS/GetisNotCompletePurchaseOrders", ReplyAction="http://tempuri.org/PurchaseOrderHeaderDS/GetisNotCompletePurchaseOrdersResponse")]
            [WebGet()]
            IAsyncResult BeginGetisNotCompletePurchaseOrders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetisNotCompletePurchaseOrders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetisNotCompletePurchaseOrders'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetisNotCompletePurchaseOrders' operation.</returns>
            QueryResult<PurchaseOrder> EndGetisNotCompletePurchaseOrders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPurchaseOrders' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PurchaseOrderHeaderDS/GetPurchaseOrdersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PurchaseOrderHeaderDS/GetPurchaseOrders", ReplyAction="http://tempuri.org/PurchaseOrderHeaderDS/GetPurchaseOrdersResponse")]
            [WebGet()]
            IAsyncResult BeginGetPurchaseOrders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPurchaseOrders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPurchaseOrders'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPurchaseOrders' operation.</returns>
            QueryResult<PurchaseOrder> EndGetPurchaseOrders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PurchaseOrderHeaderDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PurchaseOrderHeaderDS/SubmitChanges", ReplyAction="http://tempuri.org/PurchaseOrderHeaderDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class PurchaseOrderHeaderDSEntityContainer : EntityContainer
        {
            
            public PurchaseOrderHeaderDSEntityContainer()
            {
                this.CreateEntitySet<PurchaseOrder>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'PurchaseTaxTransactionsDS' DomainService.
    /// </summary>
    public sealed partial class PurchaseTaxTransactionsDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseTaxTransactionsDS"/> class.
        /// </summary>
        public PurchaseTaxTransactionsDS() : 
                this(new WebDomainClient<IPurchaseTaxTransactionsDSContract>(new Uri("tambak-Web-DomainServices-PurchaseTaxTransactionsDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseTaxTransactionsDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The PurchaseTaxTransactionsDS service URI.</param>
        public PurchaseTaxTransactionsDS(Uri serviceUri) : 
                this(new WebDomainClient<IPurchaseTaxTransactionsDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseTaxTransactionsDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public PurchaseTaxTransactionsDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="PurchaseTaxTransaction"/> entity instances that have been loaded into this <see cref="PurchaseTaxTransactionsDS"/> instance.
        /// </summary>
        public EntitySet<PurchaseTaxTransaction> PurchaseTaxTransactions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PurchaseTaxTransaction>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PurchaseTaxTransaction"/> entity instances using the 'GetPurchaseTaxTransactions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PurchaseTaxTransaction"/> entity instances.</returns>
        public EntityQuery<PurchaseTaxTransaction> GetPurchaseTaxTransactionsQuery()
        {
            this.ValidateMethod("GetPurchaseTaxTransactionsQuery", null);
            return base.CreateQuery<PurchaseTaxTransaction>("GetPurchaseTaxTransactions", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new PurchaseTaxTransactionsDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'PurchaseTaxTransactionsDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IPurchaseTaxTransactionsDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetPurchaseTaxTransactions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PurchaseTaxTransactionsDS/GetPurchaseTaxTransactionsDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PurchaseTaxTransactionsDS/GetPurchaseTaxTransactions", ReplyAction="http://tempuri.org/PurchaseTaxTransactionsDS/GetPurchaseTaxTransactionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPurchaseTaxTransactions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPurchaseTaxTransactions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPurchaseTaxTransactions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPurchaseTaxTransactions' operation.</returns>
            QueryResult<PurchaseTaxTransaction> EndGetPurchaseTaxTransactions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PurchaseTaxTransactionsDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PurchaseTaxTransactionsDS/SubmitChanges", ReplyAction="http://tempuri.org/PurchaseTaxTransactionsDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class PurchaseTaxTransactionsDSEntityContainer : EntityContainer
        {
            
            public PurchaseTaxTransactionsDSEntityContainer()
            {
                this.CreateEntitySet<PurchaseTaxTransaction>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'RequiredFeedNextThreeDaysDS' DomainService.
    /// </summary>
    public sealed partial class RequiredFeedNextThreeDaysDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RequiredFeedNextThreeDaysDS"/> class.
        /// </summary>
        public RequiredFeedNextThreeDaysDS() : 
                this(new WebDomainClient<IRequiredFeedNextThreeDaysDSContract>(new Uri("tambak-Web-DomainServices-RequiredFeedNextThreeDaysDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RequiredFeedNextThreeDaysDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The RequiredFeedNextThreeDaysDS service URI.</param>
        public RequiredFeedNextThreeDaysDS(Uri serviceUri) : 
                this(new WebDomainClient<IRequiredFeedNextThreeDaysDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RequiredFeedNextThreeDaysDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public RequiredFeedNextThreeDaysDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="RequiredFeedNext3days"/> entity instances that have been loaded into this <see cref="RequiredFeedNextThreeDaysDS"/> instance.
        /// </summary>
        public EntitySet<RequiredFeedNext3days> RequiredFeedNext3days
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RequiredFeedNext3days>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RequiredFeedNext3days"/> entity instances using the 'GetRequiredFeedNext3days' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RequiredFeedNext3days"/> entity instances.</returns>
        public EntityQuery<RequiredFeedNext3days> GetRequiredFeedNext3daysQuery()
        {
            this.ValidateMethod("GetRequiredFeedNext3daysQuery", null);
            return base.CreateQuery<RequiredFeedNext3days>("GetRequiredFeedNext3days", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new RequiredFeedNextThreeDaysDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'RequiredFeedNextThreeDaysDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IRequiredFeedNextThreeDaysDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetRequiredFeedNext3days' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/RequiredFeedNextThreeDaysDS/GetRequiredFeedNext3daysDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/RequiredFeedNextThreeDaysDS/GetRequiredFeedNext3days", ReplyAction="http://tempuri.org/RequiredFeedNextThreeDaysDS/GetRequiredFeedNext3daysResponse")]
            [WebGet()]
            IAsyncResult BeginGetRequiredFeedNext3days(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRequiredFeedNext3days'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRequiredFeedNext3days'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRequiredFeedNext3days' operation.</returns>
            QueryResult<RequiredFeedNext3days> EndGetRequiredFeedNext3days(IAsyncResult result);
        }
        
        internal sealed class RequiredFeedNextThreeDaysDSEntityContainer : EntityContainer
        {
            
            public RequiredFeedNextThreeDaysDSEntityContainer()
            {
                this.CreateEntitySet<RequiredFeedNext3days>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ResultNoteDS' DomainService.
    /// </summary>
    public sealed partial class ResultNoteDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultNoteDS"/> class.
        /// </summary>
        public ResultNoteDS() : 
                this(new WebDomainClient<IResultNoteDSContract>(new Uri("tambak-Web-DomainServices-ResultNoteDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultNoteDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ResultNoteDS service URI.</param>
        public ResultNoteDS(Uri serviceUri) : 
                this(new WebDomainClient<IResultNoteDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultNoteDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ResultNoteDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ResultNote"/> entity instances that have been loaded into this <see cref="ResultNoteDS"/> instance.
        /// </summary>
        public EntitySet<ResultNote> ResultNotes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ResultNote>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ResultNote"/> entity instances using the 'GetResultNotes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ResultNote"/> entity instances.</returns>
        public EntityQuery<ResultNote> GetResultNotesQuery()
        {
            this.ValidateMethod("GetResultNotesQuery", null);
            return base.CreateQuery<ResultNote>("GetResultNotes", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ResultNoteDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ResultNoteDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IResultNoteDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetResultNotes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResultNoteDS/GetResultNotesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResultNoteDS/GetResultNotes", ReplyAction="http://tempuri.org/ResultNoteDS/GetResultNotesResponse")]
            [WebGet()]
            IAsyncResult BeginGetResultNotes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetResultNotes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetResultNotes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetResultNotes' operation.</returns>
            QueryResult<ResultNote> EndGetResultNotes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ResultNoteDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ResultNoteDS/SubmitChanges", ReplyAction="http://tempuri.org/ResultNoteDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ResultNoteDSEntityContainer : EntityContainer
        {
            
            public ResultNoteDSEntityContainer()
            {
                this.CreateEntitySet<ResultNote>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'SalesOrderDetailsViewDS' DomainService.
    /// </summary>
    public sealed partial class SalesOrderDetailsViewDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrderDetailsViewDS"/> class.
        /// </summary>
        public SalesOrderDetailsViewDS() : 
                this(new WebDomainClient<ISalesOrderDetailsViewDSContract>(new Uri("tambak-Web-DomainServices-SalesOrderDetailsViewDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrderDetailsViewDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SalesOrderDetailsViewDS service URI.</param>
        public SalesOrderDetailsViewDS(Uri serviceUri) : 
                this(new WebDomainClient<ISalesOrderDetailsViewDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrderDetailsViewDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public SalesOrderDetailsViewDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="SalesOrderDetailsView"/> entity instances that have been loaded into this <see cref="SalesOrderDetailsViewDS"/> instance.
        /// </summary>
        public EntitySet<SalesOrderDetailsView> SalesOrderDetailsViews
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SalesOrderDetailsView>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SalesOrderDetailsView"/> entity instances using the 'GetSalesOrderDetailsViews' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SalesOrderDetailsView"/> entity instances.</returns>
        public EntityQuery<SalesOrderDetailsView> GetSalesOrderDetailsViewsQuery()
        {
            this.ValidateMethod("GetSalesOrderDetailsViewsQuery", null);
            return base.CreateQuery<SalesOrderDetailsView>("GetSalesOrderDetailsViews", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SalesOrderDetailsViewDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SalesOrderDetailsViewDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ISalesOrderDetailsViewDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetSalesOrderDetailsViews' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SalesOrderDetailsViewDS/GetSalesOrderDetailsViewsDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SalesOrderDetailsViewDS/GetSalesOrderDetailsViews", ReplyAction="http://tempuri.org/SalesOrderDetailsViewDS/GetSalesOrderDetailsViewsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSalesOrderDetailsViews(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSalesOrderDetailsViews'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSalesOrderDetailsViews'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSalesOrderDetailsViews' operation.</returns>
            QueryResult<SalesOrderDetailsView> EndGetSalesOrderDetailsViews(IAsyncResult result);
        }
        
        internal sealed class SalesOrderDetailsViewDSEntityContainer : EntityContainer
        {
            
            public SalesOrderDetailsViewDSEntityContainer()
            {
                this.CreateEntitySet<SalesOrderDetailsView>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'SamplingLogDS' DomainService.
    /// </summary>
    public sealed partial class SamplingLogDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SamplingLogDS"/> class.
        /// </summary>
        public SamplingLogDS() : 
                this(new WebDomainClient<ISamplingLogDSContract>(new Uri("tambak-Web-DomainServices-SamplingLogDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SamplingLogDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SamplingLogDS service URI.</param>
        public SamplingLogDS(Uri serviceUri) : 
                this(new WebDomainClient<ISamplingLogDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SamplingLogDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public SamplingLogDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="SamplingLog"/> entity instances that have been loaded into this <see cref="SamplingLogDS"/> instance.
        /// </summary>
        public EntitySet<SamplingLog> SamplingLogs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SamplingLog>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SamplingLog"/> entity instances using the 'GetSamplingLogs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SamplingLog"/> entity instances.</returns>
        public EntityQuery<SamplingLog> GetSamplingLogsQuery()
        {
            this.ValidateMethod("GetSamplingLogsQuery", null);
            return base.CreateQuery<SamplingLog>("GetSamplingLogs", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SamplingLogDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SamplingLogDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ISamplingLogDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetSamplingLogs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SamplingLogDS/GetSamplingLogsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SamplingLogDS/GetSamplingLogs", ReplyAction="http://tempuri.org/SamplingLogDS/GetSamplingLogsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSamplingLogs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSamplingLogs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSamplingLogs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSamplingLogs' operation.</returns>
            QueryResult<SamplingLog> EndGetSamplingLogs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SamplingLogDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SamplingLogDS/SubmitChanges", ReplyAction="http://tempuri.org/SamplingLogDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SamplingLogDSEntityContainer : EntityContainer
        {
            
            public SamplingLogDSEntityContainer()
            {
                this.CreateEntitySet<SamplingLog>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'SevenDaysFoodEstimateDS' DomainService.
    /// </summary>
    public sealed partial class SevenDaysFoodEstimateDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SevenDaysFoodEstimateDS"/> class.
        /// </summary>
        public SevenDaysFoodEstimateDS() : 
                this(new WebDomainClient<ISevenDaysFoodEstimateDSContract>(new Uri("tambak-Web-DomainServices-SevenDaysFoodEstimateDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SevenDaysFoodEstimateDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SevenDaysFoodEstimateDS service URI.</param>
        public SevenDaysFoodEstimateDS(Uri serviceUri) : 
                this(new WebDomainClient<ISevenDaysFoodEstimateDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SevenDaysFoodEstimateDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public SevenDaysFoodEstimateDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="RequredFeedNext7days"/> entity instances that have been loaded into this <see cref="SevenDaysFoodEstimateDS"/> instance.
        /// </summary>
        public EntitySet<RequredFeedNext7days> RequredFeedNext7days
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RequredFeedNext7days>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RequredFeedNext7days"/> entity instances using the 'GetRequredFeedNext7days' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RequredFeedNext7days"/> entity instances.</returns>
        public EntityQuery<RequredFeedNext7days> GetRequredFeedNext7daysQuery()
        {
            this.ValidateMethod("GetRequredFeedNext7daysQuery", null);
            return base.CreateQuery<RequredFeedNext7days>("GetRequredFeedNext7days", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SevenDaysFoodEstimateDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SevenDaysFoodEstimateDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ISevenDaysFoodEstimateDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetRequredFeedNext7days' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SevenDaysFoodEstimateDS/GetRequredFeedNext7daysDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SevenDaysFoodEstimateDS/GetRequredFeedNext7days", ReplyAction="http://tempuri.org/SevenDaysFoodEstimateDS/GetRequredFeedNext7daysResponse")]
            [WebGet()]
            IAsyncResult BeginGetRequredFeedNext7days(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRequredFeedNext7days'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRequredFeedNext7days'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRequredFeedNext7days' operation.</returns>
            QueryResult<RequredFeedNext7days> EndGetRequredFeedNext7days(IAsyncResult result);
        }
        
        internal sealed class SevenDaysFoodEstimateDSEntityContainer : EntityContainer
        {
            
            public SevenDaysFoodEstimateDSEntityContainer()
            {
                this.CreateEntitySet<RequredFeedNext7days>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'SuppliersDS' DomainService.
    /// </summary>
    public sealed partial class SuppliersDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SuppliersDS"/> class.
        /// </summary>
        public SuppliersDS() : 
                this(new WebDomainClient<ISuppliersDSContract>(new Uri("tambak-Web-DomainServices-SuppliersDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SuppliersDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SuppliersDS service URI.</param>
        public SuppliersDS(Uri serviceUri) : 
                this(new WebDomainClient<ISuppliersDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SuppliersDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public SuppliersDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Supplier"/> entity instances that have been loaded into this <see cref="SuppliersDS"/> instance.
        /// </summary>
        public EntitySet<Supplier> Suppliers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Supplier>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Supplier"/> entity instances using the 'GetSuppliers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Supplier"/> entity instances.</returns>
        public EntityQuery<Supplier> GetSuppliersQuery()
        {
            this.ValidateMethod("GetSuppliersQuery", null);
            return base.CreateQuery<Supplier>("GetSuppliers", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SuppliersDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SuppliersDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ISuppliersDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetSuppliers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SuppliersDS/GetSuppliersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SuppliersDS/GetSuppliers", ReplyAction="http://tempuri.org/SuppliersDS/GetSuppliersResponse")]
            [WebGet()]
            IAsyncResult BeginGetSuppliers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSuppliers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSuppliers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSuppliers' operation.</returns>
            QueryResult<Supplier> EndGetSuppliers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SuppliersDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SuppliersDS/SubmitChanges", ReplyAction="http://tempuri.org/SuppliersDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SuppliersDSEntityContainer : EntityContainer
        {
            
            public SuppliersDSEntityContainer()
            {
                this.CreateEntitySet<Supplier>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'TaskNotDoneViewDS' DomainService.
    /// </summary>
    public sealed partial class TaskNotDoneViewDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskNotDoneViewDS"/> class.
        /// </summary>
        public TaskNotDoneViewDS() : 
                this(new WebDomainClient<ITaskNotDoneViewDSContract>(new Uri("tambak-Web-DomainServices-TaskNotDoneViewDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskNotDoneViewDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The TaskNotDoneViewDS service URI.</param>
        public TaskNotDoneViewDS(Uri serviceUri) : 
                this(new WebDomainClient<ITaskNotDoneViewDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskNotDoneViewDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public TaskNotDoneViewDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="TaskNotDoneView"/> entity instances that have been loaded into this <see cref="TaskNotDoneViewDS"/> instance.
        /// </summary>
        public EntitySet<TaskNotDoneView> TaskNotDoneViews
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TaskNotDoneView>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TaskNotDoneView"/> entity instances using the 'GetTaskNotDoneViews' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TaskNotDoneView"/> entity instances.</returns>
        public EntityQuery<TaskNotDoneView> GetTaskNotDoneViewsQuery()
        {
            this.ValidateMethod("GetTaskNotDoneViewsQuery", null);
            return base.CreateQuery<TaskNotDoneView>("GetTaskNotDoneViews", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new TaskNotDoneViewDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'TaskNotDoneViewDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ITaskNotDoneViewDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetTaskNotDoneViews' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TaskNotDoneViewDS/GetTaskNotDoneViewsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TaskNotDoneViewDS/GetTaskNotDoneViews", ReplyAction="http://tempuri.org/TaskNotDoneViewDS/GetTaskNotDoneViewsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTaskNotDoneViews(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTaskNotDoneViews'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTaskNotDoneViews'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTaskNotDoneViews' operation.</returns>
            QueryResult<TaskNotDoneView> EndGetTaskNotDoneViews(IAsyncResult result);
        }
        
        internal sealed class TaskNotDoneViewDSEntityContainer : EntityContainer
        {
            
            public TaskNotDoneViewDSEntityContainer()
            {
                this.CreateEntitySet<TaskNotDoneView>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'TasksDS' DomainService.
    /// </summary>
    public sealed partial class TasksDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TasksDS"/> class.
        /// </summary>
        public TasksDS() : 
                this(new WebDomainClient<ITasksDSContract>(new Uri("tambak-Web-DomainServices-TasksDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TasksDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The TasksDS service URI.</param>
        public TasksDS(Uri serviceUri) : 
                this(new WebDomainClient<ITasksDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TasksDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public TasksDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Task"/> entity instances that have been loaded into this <see cref="TasksDS"/> instance.
        /// </summary>
        public EntitySet<Task> Tasks
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Task>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Task"/> entity instances using the 'GetTasks' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Task"/> entity instances.</returns>
        public EntityQuery<Task> GetTasksQuery()
        {
            this.ValidateMethod("GetTasksQuery", null);
            return base.CreateQuery<Task>("GetTasks", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new TasksDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'TasksDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ITasksDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetTasks' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TasksDS/GetTasksDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TasksDS/GetTasks", ReplyAction="http://tempuri.org/TasksDS/GetTasksResponse")]
            [WebGet()]
            IAsyncResult BeginGetTasks(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTasks'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTasks'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTasks' operation.</returns>
            QueryResult<Task> EndGetTasks(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/TasksDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/TasksDS/SubmitChanges", ReplyAction="http://tempuri.org/TasksDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class TasksDSEntityContainer : EntityContainer
        {
            
            public TasksDSEntityContainer()
            {
                this.CreateEntitySet<Task>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'tenDaysFeedEstimate' DomainService.
    /// </summary>
    public sealed partial class tenDaysFeedEstimate : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="tenDaysFeedEstimate"/> class.
        /// </summary>
        public tenDaysFeedEstimate() : 
                this(new WebDomainClient<ItenDaysFeedEstimateContract>(new Uri("tambak-Web-DomainServices-tenDaysFeedEstimate.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="tenDaysFeedEstimate"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The tenDaysFeedEstimate service URI.</param>
        public tenDaysFeedEstimate(Uri serviceUri) : 
                this(new WebDomainClient<ItenDaysFeedEstimateContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="tenDaysFeedEstimate"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public tenDaysFeedEstimate(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="RequiredFeedNext10Days"/> entity instances that have been loaded into this <see cref="tenDaysFeedEstimate"/> instance.
        /// </summary>
        public EntitySet<RequiredFeedNext10Days> RequiredFeedNext10Days
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RequiredFeedNext10Days>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RequiredFeedNext10Days"/> entity instances using the 'GetRequiredFeedNext10Days' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RequiredFeedNext10Days"/> entity instances.</returns>
        public EntityQuery<RequiredFeedNext10Days> GetRequiredFeedNext10DaysQuery()
        {
            this.ValidateMethod("GetRequiredFeedNext10DaysQuery", null);
            return base.CreateQuery<RequiredFeedNext10Days>("GetRequiredFeedNext10Days", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new tenDaysFeedEstimateEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'tenDaysFeedEstimate' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ItenDaysFeedEstimateContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetRequiredFeedNext10Days' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/tenDaysFeedEstimate/GetRequiredFeedNext10DaysDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/tenDaysFeedEstimate/GetRequiredFeedNext10Days", ReplyAction="http://tempuri.org/tenDaysFeedEstimate/GetRequiredFeedNext10DaysResponse")]
            [WebGet()]
            IAsyncResult BeginGetRequiredFeedNext10Days(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRequiredFeedNext10Days'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRequiredFeedNext10Days'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRequiredFeedNext10Days' operation.</returns>
            QueryResult<RequiredFeedNext10Days> EndGetRequiredFeedNext10Days(IAsyncResult result);
        }
        
        internal sealed class tenDaysFeedEstimateEntityContainer : EntityContainer
        {
            
            public tenDaysFeedEstimateEntityContainer()
            {
                this.CreateEntitySet<RequiredFeedNext10Days>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'UnitofMeasurementDS' DomainService.
    /// </summary>
    public sealed partial class UnitofMeasurementDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitofMeasurementDS"/> class.
        /// </summary>
        public UnitofMeasurementDS() : 
                this(new WebDomainClient<IUnitofMeasurementDSContract>(new Uri("tambak-Web-DomainServices-UnitofMeasurementDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitofMeasurementDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UnitofMeasurementDS service URI.</param>
        public UnitofMeasurementDS(Uri serviceUri) : 
                this(new WebDomainClient<IUnitofMeasurementDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitofMeasurementDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UnitofMeasurementDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="UnitofMeasurement"/> entity instances that have been loaded into this <see cref="UnitofMeasurementDS"/> instance.
        /// </summary>
        public EntitySet<UnitofMeasurement> UnitofMeasurements
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UnitofMeasurement>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UnitofMeasurement"/> entity instances using the 'GetUnitofMeasurements' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UnitofMeasurement"/> entity instances.</returns>
        public EntityQuery<UnitofMeasurement> GetUnitofMeasurementsQuery()
        {
            this.ValidateMethod("GetUnitofMeasurementsQuery", null);
            return base.CreateQuery<UnitofMeasurement>("GetUnitofMeasurements", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UnitofMeasurementDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UnitofMeasurementDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUnitofMeasurementDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUnitofMeasurements' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UnitofMeasurementDS/GetUnitofMeasurementsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UnitofMeasurementDS/GetUnitofMeasurements", ReplyAction="http://tempuri.org/UnitofMeasurementDS/GetUnitofMeasurementsResponse")]
            [WebGet()]
            IAsyncResult BeginGetUnitofMeasurements(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUnitofMeasurements'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUnitofMeasurements'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUnitofMeasurements' operation.</returns>
            QueryResult<UnitofMeasurement> EndGetUnitofMeasurements(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UnitofMeasurementDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UnitofMeasurementDS/SubmitChanges", ReplyAction="http://tempuri.org/UnitofMeasurementDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class UnitofMeasurementDSEntityContainer : EntityContainer
        {
            
            public UnitofMeasurementDSEntityContainer()
            {
                this.CreateEntitySet<UnitofMeasurement>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'WaterParameterLogDS' DomainService.
    /// </summary>
    public sealed partial class WaterParameterLogDS : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WaterParameterLogDS"/> class.
        /// </summary>
        public WaterParameterLogDS() : 
                this(new WebDomainClient<IWaterParameterLogDSContract>(new Uri("tambak-Web-DomainServices-WaterParameterLogDS.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WaterParameterLogDS"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The WaterParameterLogDS service URI.</param>
        public WaterParameterLogDS(Uri serviceUri) : 
                this(new WebDomainClient<IWaterParameterLogDSContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WaterParameterLogDS"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public WaterParameterLogDS(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="WaterParameterLog"/> entity instances that have been loaded into this <see cref="WaterParameterLogDS"/> instance.
        /// </summary>
        public EntitySet<WaterParameterLog> WaterParameterLogs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<WaterParameterLog>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="WaterParameterLog"/> entity instances using the 'GetWaterParameterLogs' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="WaterParameterLog"/> entity instances.</returns>
        public EntityQuery<WaterParameterLog> GetWaterParameterLogsQuery()
        {
            this.ValidateMethod("GetWaterParameterLogsQuery", null);
            return base.CreateQuery<WaterParameterLog>("GetWaterParameterLogs", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new WaterParameterLogDSEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'WaterParameterLogDS' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IWaterParameterLogDSContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetWaterParameterLogs' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WaterParameterLogDS/GetWaterParameterLogsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WaterParameterLogDS/GetWaterParameterLogs", ReplyAction="http://tempuri.org/WaterParameterLogDS/GetWaterParameterLogsResponse")]
            [WebGet()]
            IAsyncResult BeginGetWaterParameterLogs(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetWaterParameterLogs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetWaterParameterLogs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetWaterParameterLogs' operation.</returns>
            QueryResult<WaterParameterLog> EndGetWaterParameterLogs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WaterParameterLogDS/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WaterParameterLogDS/SubmitChanges", ReplyAction="http://tempuri.org/WaterParameterLogDS/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class WaterParameterLogDSEntityContainer : EntityContainer
        {
            
            public WaterParameterLogDSEntityContainer()
            {
                this.CreateEntitySet<WaterParameterLog>(EntitySetOperations.All);
            }
        }
    }
}
