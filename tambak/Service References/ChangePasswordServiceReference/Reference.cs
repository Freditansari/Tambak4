//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace tambak.ChangePasswordServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ChangePasswordServiceReference.ChangePasswordService")]
    public interface ChangePasswordService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ChangePasswordService/UserChangePassword", ReplyAction="urn:ChangePasswordService/UserChangePasswordResponse")]
        System.IAsyncResult BeginUserChangePassword(string userName, string oldPassword, string newPassword, System.AsyncCallback callback, object asyncState);
        
        bool EndUserChangePassword(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ChangePasswordServiceChannel : tambak.ChangePasswordServiceReference.ChangePasswordService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UserChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangePasswordServiceClient : System.ServiceModel.ClientBase<tambak.ChangePasswordServiceReference.ChangePasswordService>, tambak.ChangePasswordServiceReference.ChangePasswordService {
        
        private BeginOperationDelegate onBeginUserChangePasswordDelegate;
        
        private EndOperationDelegate onEndUserChangePasswordDelegate;
        
        private System.Threading.SendOrPostCallback onUserChangePasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ChangePasswordServiceClient() {
        }
        
        public ChangePasswordServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChangePasswordServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChangePasswordServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChangePasswordServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<UserChangePasswordCompletedEventArgs> UserChangePasswordCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult tambak.ChangePasswordServiceReference.ChangePasswordService.BeginUserChangePassword(string userName, string oldPassword, string newPassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUserChangePassword(userName, oldPassword, newPassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool tambak.ChangePasswordServiceReference.ChangePasswordService.EndUserChangePassword(System.IAsyncResult result) {
            return base.Channel.EndUserChangePassword(result);
        }
        
        private System.IAsyncResult OnBeginUserChangePassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string oldPassword = ((string)(inValues[1]));
            string newPassword = ((string)(inValues[2]));
            return ((tambak.ChangePasswordServiceReference.ChangePasswordService)(this)).BeginUserChangePassword(userName, oldPassword, newPassword, callback, asyncState);
        }
        
        private object[] OnEndUserChangePassword(System.IAsyncResult result) {
            bool retVal = ((tambak.ChangePasswordServiceReference.ChangePasswordService)(this)).EndUserChangePassword(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUserChangePasswordCompleted(object state) {
            if ((this.UserChangePasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UserChangePasswordCompleted(this, new UserChangePasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UserChangePasswordAsync(string userName, string oldPassword, string newPassword) {
            this.UserChangePasswordAsync(userName, oldPassword, newPassword, null);
        }
        
        public void UserChangePasswordAsync(string userName, string oldPassword, string newPassword, object userState) {
            if ((this.onBeginUserChangePasswordDelegate == null)) {
                this.onBeginUserChangePasswordDelegate = new BeginOperationDelegate(this.OnBeginUserChangePassword);
            }
            if ((this.onEndUserChangePasswordDelegate == null)) {
                this.onEndUserChangePasswordDelegate = new EndOperationDelegate(this.OnEndUserChangePassword);
            }
            if ((this.onUserChangePasswordCompletedDelegate == null)) {
                this.onUserChangePasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUserChangePasswordCompleted);
            }
            base.InvokeAsync(this.onBeginUserChangePasswordDelegate, new object[] {
                        userName,
                        oldPassword,
                        newPassword}, this.onEndUserChangePasswordDelegate, this.onUserChangePasswordCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override tambak.ChangePasswordServiceReference.ChangePasswordService CreateChannel() {
            return new ChangePasswordServiceClientChannel(this);
        }
        
        private class ChangePasswordServiceClientChannel : ChannelBase<tambak.ChangePasswordServiceReference.ChangePasswordService>, tambak.ChangePasswordServiceReference.ChangePasswordService {
            
            public ChangePasswordServiceClientChannel(System.ServiceModel.ClientBase<tambak.ChangePasswordServiceReference.ChangePasswordService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginUserChangePassword(string userName, string oldPassword, string newPassword, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userName;
                _args[1] = oldPassword;
                _args[2] = newPassword;
                System.IAsyncResult _result = base.BeginInvoke("UserChangePassword", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUserChangePassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UserChangePassword", _args, result)));
                return _result;
            }
        }
    }
}
